{"ast":null,"code":"var _jsxFileName = \"C:\\\\nodejs_projects\\\\ecommerce_CA\\\\client\\\\src\\\\components\\\\ShoppingCart.js\";\n// import React, { Component } from \"react\";\n// import Form from \"react-bootstrap/Form\"\n// import { Redirect } from \"react-router-dom\"\n// import { SANDBOX_CLIENT_ID, SERVER_HOST } from \"../config/global_constants\"\n// import PayPalMessage from \"./PayPalMessage\"\n// import { PayPalButtons, PayPalScriptProvider } from \"@paypal/react-paypal-js\"\n// import NavigationBar from \"./NavigationBar\"\n// import axios from \"axios\"\n// export default class ShoppingCart extends Component {\n//     constructor(props) {\n//         super(props)\n//         this.state = {\n//             redirectToPayPalMessage: false,\n//             payPalMessageType: null,\n//             payPalOrderID: null,\n//             totalPrice: 0\n//         }\n//     }\n//     componentDidMount() {\n//         const { itemsInCart } = this.props.location.state || { itemsInCart: [] };\n//         let totalPrice = 0;\n//         itemsInCart.forEach((item) => {\n//           totalPrice += item.price * item.quantity;\n//         });\n//         this.setState({ totalPrice }); // Update totalPrice in state\n//       }\n//     //   createOrder = (data, actions) => {\n//     //     // Return an object with the correct amount based on the total price\n//     //     return actions.order.create({\n//     //       purchase_units: [\n//     //         {\n//     //           amount: {\n//     //             value: this.state.totalPrice, // Use the total price from state\n//     //             currency_code: \"EUR\",\n//     //           },\n//     //         },\n//     //       ],\n//     //     });\n//     //   };\n//     //   createOrder = (data, actions) => \n//     //   {\n//     //       return actions.order.create({purchase_units:[{amount:{value:this.props.price}}]})\n//     //   }\n//     createOrder = (data, actions) => {\n//         const { itemsInCart } = this.props.location.state || { itemsInCart: [] };\n//         let totalPrice = 0;\n//         itemsInCart.forEach((item) => {\n//           totalPrice += item.price * item.quantity;\n//         });\n//         return actions.order.create({\n//           purchase_units: [\n//             {\n//               amount: {\n//                 value: totalPrice.toFixed(2), // Ensure total price is formatted properly\n//                 currency_code: \"EUR\",\n//               },\n//             },\n//           ],\n//         });\n//       };\n//       onApprove = paymentData =>\n//       {      \n//           axios.post(`${SERVER_HOST}/sales/${paymentData.orderID}/${this.props.shirtID}/${this.props.price}`, {headers:{\"authorization\":localStorage.token, \"Content-type\": \"multipart/form-data\"}})\n//           .then(res => \n//           {                   \n//               this.setState({payPalMessageType:PayPalMessage.messageType.SUCCESS, \n//                              payPalOrderID:paymentData.orderID, \n//                              redirectToPayPalMessage:true}) \n//           })\n//           .catch(errorData =>\n//           {           \n//               this.setState({payPalMessageType:PayPalMessage.messageType.ERROR, \n//                              redirectToPayPalMessage:true}) \n//           })\n//       }\n//       onError = errorData => \n//       {\n//           this.setState({payPalMessageType:PayPalMessage.messageType.ERROR, \n//                          redirectToPayPalMessage:true})         \n//       }\n//       onCancel = cancelData => \n//       {\n//           // The user pressed the Paypal checkout popup window cancel button or closed the Paypal checkout popup window\n//           this.setState({payPalMessageType:PayPalMessage.messageType.CANCEL, \n//                          redirectToPayPalMessage:true})       \n//       }\n//     render() {\n//         const { itemsInCart } = this.props.location.state || { itemsInCart: [] };\n//         // let totalPrice = 0;\n//         // itemsInCart.forEach(item => {\n//         //     totalPrice += item.price * item.quantity;\n//         // });\n//         return (\n//             <div>\n//                 <NavigationBar />\n//                 <h2>Shopping Cart</h2>\n//                 <ul>\n//                     {itemsInCart.map((item, index) => (\n//                         <li key={index}>\n//                             {item.name} - Quantity: {item.quantity} - Price: €{item.price * item.quantity}\n//                         </li>\n//                     ))}\n//                 </ul>\n//                 <p>Total Price: €{this.state.totalPrice}</p>\n//                 <div>\n//                     {this.state.redirectToPayPalMessage ? <Redirect to={`/PayPalMessage/${this.state.payPalMessageType}/${this.state.payPalOrderID}`} /> : null}\n//                     <PayPalScriptProvider options={{ currency: \"EUR\", \"client-id\": SANDBOX_CLIENT_ID }}>\n//                         <PayPalButtons style={{ layout: \"horizontal\" }} createOrder={this.createOrder} onApprove={this.onApprove} onError={this.onError} onCancel={this.onCancel} />\n//                     </PayPalScriptProvider>\n//                 </div>\n//             </div>\n//         );\n//     }\n// }\n// import React, { Component } from \"react\";\n// import Form from \"react-bootstrap/Form\"\n// import NavigationBar from \"./NavigationBar\"\n// import { SERVER_HOST } from \"../config/global_constants\"\n// import axios from \"axios\"\n// export default class ShoppingCart extends Component {\n//     constructor(props) {\n//         super(props)\n//         this.state = {\n//             // userId:\"\",\n//             name: \"\",\n//             size: \"\",\n//             price: \"\",\n//             quantity: \"\",\n//             shirtPhotoFilename: null,\n//             // redirectToDisplayAllTShirtInCart: localStorage.accessLevel < ACCESS_LEVEL_ADMIN,\n//             wasSubmittedAtLeastOnce: false,\n//             cart:[],\n//             totalPrice:0\n//         }\n//     }\n//     componentDidMount() {\n//         // const { itemsInCart } = this.props.location.state || { itemsInCart: [] };\n//         axios.get(`${SERVER_HOST}/cart/`)\n//         .then(res => \n//         { \n//             this.setState({cart: res.data})                                         \n//         })\n//         .catch(err =>\n//         {\n//             // do nothing\n//         })\n//         axios.get(`${SERVER_HOST}/cart/${this.props.match.params.id}`, { headers: { \"authorization\": localStorage.token } })\n//         .then(res => {\n//             this.setState({\n//                 name: res.data.name,\n//                 // colour: res.data.colour,\n//                 size: res.data.size,\n//                 price: res.data.price,\n//                 quantity: res.data.quantity,\n//                 shirtPhotoFilename:res.data.shirtPhotoFilename\n//             })\n//         })\n//         .catch(err => {\n//             // do nothing\n//         })\n//         // Update cart state with itemsInCart\n//         // this.setState({ cart: itemsInCart });\n//         // Calculate total price\n//         let totalPrice = 0;\n//         // itemsInCart.forEach(item => {\n//         //     totalPrice += item.price * item.quantity;\n//         // });\n//         this.state.cart.forEach(item => {\n//             totalPrice += item.price * item.quantity;\n//         })\n//         // Update totalPrice state\n//         this.setState({ totalPrice: totalPrice });\n//         // Load shirt photos\n//         this.state.cart.forEach(cartItem => {\n//             cartItem.shirtPhotoFilename.forEach(photo => {\n//                 axios.get(`${SERVER_HOST}/shirts/photo/${photo.filename}`)\n//                     .then(res => {\n//                         // Update shirt photo in DOM\n//                         document.getElementById(photo._id).src = `data:;base64,${res.data.image}`;\n//                     })\n//                     .catch(err => {\n//                         // Handle error\n//                     });\n//             });\n//         });\n//     }\n//     // componentDidMount(){\n//     //     const { itemsInCart } = this.props.location.state || { itemsInCart: [] };\n//     //     this.setState({ cart: itemsInCart });\n//     //     let totalPrice = 0;\n//     //     itemsInCart.forEach(item => {\n//     //         totalPrice += item.price * item.quantity;\n//     //     });\n//     //     this.setState({ totalPrice: totalPrice });\n//     //     this.state.cart.shirtPhotoFilename.map(photo => {\n//     //         return axios.get(`${SERVER_HOST}/shirts/photo/${photo.filename}`)\n//     //             .then(res => {\n//     //                 document.getElementById(photo._id).src = `data:;base64,${res.data.image}`\n//     //             })\n//     //             .catch(err => {\n//     //                 // do nothing\n//     //             })\n//     //     })\n//         // let formData = new FormData()\n//         // formData.append(\"userId\", this.state.stock)\n//         // formData.append(\"name\", this.state.name)\n//         // // formData.append(\"colour\", this.state.colour)\n//         // formData.append(\"size\", this.state.size)\n//         // formData.append(\"price\", this.state.price)\n//         // formData.append(\"quantity\", this.state.quantity)\n//         // if (this.state.cart.shirtPhotoFilename) {\n//         //     for (let i = 0; i < this.state.cart.shirtPhotoFilename.length; i++) {\n//         //         formData.append(\"cartPhotos\", this.state.cart.shirtPhotoFilename[i])\n//         //     }\n//         // }\n//         // axios.post(`${SERVER_HOST}/cart`, formData, { headers: { \"authorization\": localStorage.token, \"Content-type\": \"multipart/form-data\" } })\n//         //     .then(res => {\n//         //         this.setState({ redirectToDisplayAllTShirtInCart: true })\n//         //     })\n//         //     .catch(err => {\n//         //         this.setState({ wasSubmittedAtLeastOnce: true })\n//         //     })\n//     //}\n//     render() {\n// console.log(this.state.cart)\n//         return (\n//             <div>\n//                 <NavigationBar />\n//                 <h2>Shopping Cart</h2>\n//                 {/* <div>\n//                     {this.state.cart.shirtPhotoFilename === null ? null : <div className=\"shirtPhotos\">{this.state.cart.shirtPhotoFilename.map(photo => <img key={photo._id} id={photo._id} alt=\"\" />)}</div>}\n//                 </div> */}\n//                 {/* <ul>\n//                     {this.state.cart.map((item, index) => (\n//                         <li key={index}>\n//                             {item.name} - Quantity: {item.quantity} - Price: €{item.price * item.quantity}\n//                         </li>\n//                     ))}\n//                 </ul> */}\n//                 <p>Total Price: €{this.state.totalPrice}</p>\n//             </div>\n//         );\n//     }\n// }\nimport React, { Component } from \"react\";\nimport Form from \"react-bootstrap/Form\";\nimport NavigationBar from \"./NavigationBar\";\nimport axios from \"axios\";\nexport default class ShoppingCart extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.handleChange = (index, field, value) => {\n      const updatedCart = [...this.state.cart];\n      updatedCart[index][field] = value;\n      this.setState({\n        cart: updatedCart\n      }); // localStorage.setItem(\"itemsInCart\", JSON.stringify(updatedCart));\n\n      const groupedItems = this.state.cart.reduce((groups, item) => {\n        const group = groups.find(g => g.name === item.name);\n\n        if (group) {\n          group.quantity += item.quantity;\n          group.totalPrice += item.price * item.quantity;\n        } else {\n          groups.push({\n            name: item.name,\n            size: item.size,\n            quantity: item.quantity,\n            price: item.price,\n            totalPrice: item.price * item.quantity\n          });\n        }\n\n        return groups;\n      }, []);\n      this.setState({\n        cart: groupedItems\n      });\n      localStorage.setItem(\"itemsInCart\", JSON.stringify(groupedItems));\n    };\n\n    this.handleDelete = (name, size) => {\n      const updatedCart = this.state.cart.filter(item => !(item.name === name && item.size === size));\n      this.setState({\n        cart: updatedCart\n      });\n      localStorage.setItem(\"itemsInCart\", JSON.stringify(updatedCart));\n    };\n  }\n\n  render() {\n    const _ref = this.props.location.state || {\n      itemsInCart: []\n    },\n          itemsInCart = _ref.itemsInCart;\n\n    let totalPrice = 0; // Calculate total price based on cart items\n    // this.state.cart.forEach(item => {\n    //     const carItem=item.cartItems[0];\n    //     totalPrice += carItem.price * carItem.quantity;\n    // });\n    // // Update totalPrice state\n    // this.setState({ totalPrice: totalPrice });\n\n    this.state.cart.map(item => {\n      totalPrice += item.price * item.quantity;\n    }); // Update totalPrice state\n    // this.setState({ totalPrice: totalPrice });\n\n    return totalPrice.toFixed(2);\n  }\n\n  // loadShirtPhotos() {\n  //     // Loop through each cart item and load its shirt photos\n  //     this.state.cart.forEach(item => {\n  //         item.cartItems[0].shirtPhotoFilename.forEach(photo => {\n  //             axios.get(`${SERVER_HOST}/shirts/photo/${photo.filename}`)\n  //                 .then(res => {\n  //                     // Update shirt photo in DOM\n  //                     document.getElementById(photo._id).src = `data:;base64,${res.data.image}`;\n  //                 })\n  //                 .catch(err => {\n  //                     // Handle error\n  //                     console.error(\"Error loading shirt photo:\", err);\n  //                 });\n  //         });\n  //     });\n  // }\n  render() {\n    console.log(this.state.cart[0]); // {this.state.cart !== undefined ? this.calculateTotalPrice() : null}\n    // console.log(this.state.cart.map((item,index) => (item.cartItems[0].name)));\n\n    const groupedItems = this.state.cart.reduce((groups, item) => {\n      const group = groups.find(g => g.name === item.name);\n\n      if (group) {\n        group.quantity += item.quantity;\n        group.totalPrice += item.price * item.quantity;\n      } else {\n        groups.push({\n          name: item.name,\n          size: item.size,\n          quantity: item.quantity,\n          price: item.price,\n          totalPrice: item.price * item.quantity\n        });\n      }\n\n      return groups;\n    }, []);\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 395\n      },\n      __self: this\n    }, React.createElement(NavigationBar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 396\n      },\n      __self: this\n    }), React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 397\n      },\n      __self: this\n    }, \"Shopping Cart\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 398\n      },\n      __self: this\n    }, itemsInCart.map((item, index) => React.createElement(\"li\", {\n      key: index,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 400\n      },\n      __self: this\n    }, item.name, \" - Quantity: \", item.quantity, \" - Price: \\u20AC\", item.price * item.quantity))), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 405\n      },\n      __self: this\n    }, \"Total Price: \\u20AC\", totalPrice));\n  }\n\n}","map":{"version":3,"sources":["C:\\nodejs_projects\\ecommerce_CA\\client\\src\\components\\ShoppingCart.js"],"names":["React","Component","Form","NavigationBar","axios","ShoppingCart","handleChange","index","field","value","updatedCart","state","cart","setState","groupedItems","reduce","groups","item","group","find","g","name","quantity","totalPrice","price","push","size","localStorage","setItem","JSON","stringify","handleDelete","filter","render","props","location","itemsInCart","map","toFixed","console","log"],"mappings":";AAAA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAGA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAEA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAUA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA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","sourcesContent":["// import React, { Component } from \"react\";\r\n// import Form from \"react-bootstrap/Form\"\r\n\r\n// import { Redirect } from \"react-router-dom\"\r\n// import { SANDBOX_CLIENT_ID, SERVER_HOST } from \"../config/global_constants\"\r\n// import PayPalMessage from \"./PayPalMessage\"\r\n// import { PayPalButtons, PayPalScriptProvider } from \"@paypal/react-paypal-js\"\r\n\r\n// import NavigationBar from \"./NavigationBar\"\r\n\r\n\r\n// import axios from \"axios\"\r\n\r\n// export default class ShoppingCart extends Component {\r\n//     constructor(props) {\r\n//         super(props)\r\n\r\n//         this.state = {\r\n//             redirectToPayPalMessage: false,\r\n//             payPalMessageType: null,\r\n//             payPalOrderID: null,\r\n//             totalPrice: 0\r\n//         }\r\n//     }\r\n\r\n//     componentDidMount() {\r\n//         const { itemsInCart } = this.props.location.state || { itemsInCart: [] };\r\n//         let totalPrice = 0;\r\n//         itemsInCart.forEach((item) => {\r\n//           totalPrice += item.price * item.quantity;\r\n//         });\r\n//         this.setState({ totalPrice }); // Update totalPrice in state\r\n//       }\r\n\r\n//     //   createOrder = (data, actions) => {\r\n//     //     // Return an object with the correct amount based on the total price\r\n//     //     return actions.order.create({\r\n//     //       purchase_units: [\r\n//     //         {\r\n//     //           amount: {\r\n//     //             value: this.state.totalPrice, // Use the total price from state\r\n//     //             currency_code: \"EUR\",\r\n//     //           },\r\n//     //         },\r\n//     //       ],\r\n//     //     });\r\n//     //   };\r\n\r\n//     //   createOrder = (data, actions) => \r\n//     //   {\r\n//     //       return actions.order.create({purchase_units:[{amount:{value:this.props.price}}]})\r\n//     //   }\r\n\r\n//     createOrder = (data, actions) => {\r\n//         const { itemsInCart } = this.props.location.state || { itemsInCart: [] };\r\n//         let totalPrice = 0;\r\n//         itemsInCart.forEach((item) => {\r\n//           totalPrice += item.price * item.quantity;\r\n//         });\r\n//         return actions.order.create({\r\n//           purchase_units: [\r\n//             {\r\n//               amount: {\r\n//                 value: totalPrice.toFixed(2), // Ensure total price is formatted properly\r\n//                 currency_code: \"EUR\",\r\n//               },\r\n//             },\r\n//           ],\r\n//         });\r\n//       };\r\n      \r\n      \r\n//       onApprove = paymentData =>\r\n//       {      \r\n//           axios.post(`${SERVER_HOST}/sales/${paymentData.orderID}/${this.props.shirtID}/${this.props.price}`, {headers:{\"authorization\":localStorage.token, \"Content-type\": \"multipart/form-data\"}})\r\n//           .then(res => \r\n//           {                   \r\n//               this.setState({payPalMessageType:PayPalMessage.messageType.SUCCESS, \r\n//                              payPalOrderID:paymentData.orderID, \r\n//                              redirectToPayPalMessage:true}) \r\n//           })\r\n//           .catch(errorData =>\r\n//           {           \r\n//               this.setState({payPalMessageType:PayPalMessage.messageType.ERROR, \r\n//                              redirectToPayPalMessage:true}) \r\n//           })\r\n//       }\r\n   \r\n          \r\n//       onError = errorData => \r\n//       {\r\n//           this.setState({payPalMessageType:PayPalMessage.messageType.ERROR, \r\n//                          redirectToPayPalMessage:true})         \r\n//       }\r\n      \r\n      \r\n//       onCancel = cancelData => \r\n//       {\r\n//           // The user pressed the Paypal checkout popup window cancel button or closed the Paypal checkout popup window\r\n//           this.setState({payPalMessageType:PayPalMessage.messageType.CANCEL, \r\n//                          redirectToPayPalMessage:true})       \r\n//       }\r\n\r\n\r\n//     render() {\r\n//         const { itemsInCart } = this.props.location.state || { itemsInCart: [] };\r\n\r\n//         // let totalPrice = 0;\r\n//         // itemsInCart.forEach(item => {\r\n//         //     totalPrice += item.price * item.quantity;\r\n//         // });\r\n\r\n\r\n\r\n//         return (\r\n//             <div>\r\n//                 <NavigationBar />\r\n//                 <h2>Shopping Cart</h2>\r\n//                 <ul>\r\n//                     {itemsInCart.map((item, index) => (\r\n//                         <li key={index}>\r\n//                             {item.name} - Quantity: {item.quantity} - Price: €{item.price * item.quantity}\r\n//                         </li>\r\n//                     ))}\r\n//                 </ul>\r\n//                 <p>Total Price: €{this.state.totalPrice}</p>\r\n//                 <div>\r\n//                     {this.state.redirectToPayPalMessage ? <Redirect to={`/PayPalMessage/${this.state.payPalMessageType}/${this.state.payPalOrderID}`} /> : null}\r\n\r\n//                     <PayPalScriptProvider options={{ currency: \"EUR\", \"client-id\": SANDBOX_CLIENT_ID }}>\r\n//                         <PayPalButtons style={{ layout: \"horizontal\" }} createOrder={this.createOrder} onApprove={this.onApprove} onError={this.onError} onCancel={this.onCancel} />\r\n//                     </PayPalScriptProvider>\r\n//                 </div>\r\n//             </div>\r\n            \r\n//         );\r\n//     }\r\n// }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// import React, { Component } from \"react\";\r\n// import Form from \"react-bootstrap/Form\"\r\n// import NavigationBar from \"./NavigationBar\"\r\n// import { SERVER_HOST } from \"../config/global_constants\"\r\n\r\n// import axios from \"axios\"\r\n\r\n// export default class ShoppingCart extends Component {\r\n//     constructor(props) {\r\n//         super(props)\r\n\r\n//         this.state = {\r\n//             // userId:\"\",\r\n//             name: \"\",\r\n//             size: \"\",\r\n//             price: \"\",\r\n//             quantity: \"\",\r\n//             shirtPhotoFilename: null,\r\n//             // redirectToDisplayAllTShirtInCart: localStorage.accessLevel < ACCESS_LEVEL_ADMIN,\r\n//             wasSubmittedAtLeastOnce: false,\r\n//             cart:[],\r\n//             totalPrice:0\r\n//         }\r\n//     }\r\n//     componentDidMount() {\r\n//         // const { itemsInCart } = this.props.location.state || { itemsInCart: [] };\r\n//         axios.get(`${SERVER_HOST}/cart/`)\r\n//         .then(res => \r\n//         { \r\n//             this.setState({cart: res.data})                                         \r\n//         })\r\n//         .catch(err =>\r\n//         {\r\n//             // do nothing\r\n//         })\r\n\r\n\r\n//         axios.get(`${SERVER_HOST}/cart/${this.props.match.params.id}`, { headers: { \"authorization\": localStorage.token } })\r\n//         .then(res => {\r\n//             this.setState({\r\n//                 name: res.data.name,\r\n//                 // colour: res.data.colour,\r\n//                 size: res.data.size,\r\n//                 price: res.data.price,\r\n//                 quantity: res.data.quantity,\r\n//                 shirtPhotoFilename:res.data.shirtPhotoFilename\r\n//             })\r\n//         })\r\n//         .catch(err => {\r\n//             // do nothing\r\n//         })\r\n\r\n\r\n//         // Update cart state with itemsInCart\r\n//         // this.setState({ cart: itemsInCart });\r\n\r\n//         // Calculate total price\r\n//         let totalPrice = 0;\r\n//         // itemsInCart.forEach(item => {\r\n//         //     totalPrice += item.price * item.quantity;\r\n//         // });\r\n//         this.state.cart.forEach(item => {\r\n//             totalPrice += item.price * item.quantity;\r\n//         })\r\n\r\n//         // Update totalPrice state\r\n//         this.setState({ totalPrice: totalPrice });\r\n\r\n//         // Load shirt photos\r\n//         this.state.cart.forEach(cartItem => {\r\n//             cartItem.shirtPhotoFilename.forEach(photo => {\r\n//                 axios.get(`${SERVER_HOST}/shirts/photo/${photo.filename}`)\r\n//                     .then(res => {\r\n//                         // Update shirt photo in DOM\r\n//                         document.getElementById(photo._id).src = `data:;base64,${res.data.image}`;\r\n//                     })\r\n//                     .catch(err => {\r\n//                         // Handle error\r\n//                     });\r\n//             });\r\n//         });\r\n//     }\r\n\r\n//     // componentDidMount(){\r\n//     //     const { itemsInCart } = this.props.location.state || { itemsInCart: [] };\r\n//     //     this.setState({ cart: itemsInCart });\r\n//     //     let totalPrice = 0;\r\n//     //     itemsInCart.forEach(item => {\r\n//     //         totalPrice += item.price * item.quantity;\r\n//     //     });\r\n//     //     this.setState({ totalPrice: totalPrice });\r\n//     //     this.state.cart.shirtPhotoFilename.map(photo => {\r\n//     //         return axios.get(`${SERVER_HOST}/shirts/photo/${photo.filename}`)\r\n//     //             .then(res => {\r\n//     //                 document.getElementById(photo._id).src = `data:;base64,${res.data.image}`\r\n//     //             })\r\n//     //             .catch(err => {\r\n//     //                 // do nothing\r\n//     //             })\r\n//     //     })\r\n//         // let formData = new FormData()\r\n//         // formData.append(\"userId\", this.state.stock)\r\n//         // formData.append(\"name\", this.state.name)\r\n//         // // formData.append(\"colour\", this.state.colour)\r\n//         // formData.append(\"size\", this.state.size)\r\n//         // formData.append(\"price\", this.state.price)\r\n//         // formData.append(\"quantity\", this.state.quantity)\r\n\r\n\r\n//         // if (this.state.cart.shirtPhotoFilename) {\r\n//         //     for (let i = 0; i < this.state.cart.shirtPhotoFilename.length; i++) {\r\n//         //         formData.append(\"cartPhotos\", this.state.cart.shirtPhotoFilename[i])\r\n//         //     }\r\n//         // }\r\n\r\n//         // axios.post(`${SERVER_HOST}/cart`, formData, { headers: { \"authorization\": localStorage.token, \"Content-type\": \"multipart/form-data\" } })\r\n//         //     .then(res => {\r\n//         //         this.setState({ redirectToDisplayAllTShirtInCart: true })\r\n//         //     })\r\n//         //     .catch(err => {\r\n//         //         this.setState({ wasSubmittedAtLeastOnce: true })\r\n//         //     })\r\n//     //}\r\n//     render() {\r\n// console.log(this.state.cart)\r\n//         return (\r\n//             <div>\r\n//                 <NavigationBar />\r\n//                 <h2>Shopping Cart</h2>\r\n//                 {/* <div>\r\n//                     {this.state.cart.shirtPhotoFilename === null ? null : <div className=\"shirtPhotos\">{this.state.cart.shirtPhotoFilename.map(photo => <img key={photo._id} id={photo._id} alt=\"\" />)}</div>}\r\n//                 </div> */}\r\n//                 {/* <ul>\r\n//                     {this.state.cart.map((item, index) => (\r\n//                         <li key={index}>\r\n//                             {item.name} - Quantity: {item.quantity} - Price: €{item.price * item.quantity}\r\n//                         </li>\r\n//                     ))}\r\n//                 </ul> */}\r\n//                 <p>Total Price: €{this.state.totalPrice}</p>\r\n//             </div>\r\n//         );\r\n//     }\r\n// }\r\n\r\n\r\n\r\n\r\n\r\nimport React, { Component } from \"react\";\r\nimport Form from \"react-bootstrap/Form\"\r\nimport NavigationBar from \"./NavigationBar\"\r\n\r\n\r\nimport axios from \"axios\"\r\n\r\nexport default class ShoppingCart extends Component {\r\n    render() {\r\n        const { itemsInCart } = this.props.location.state || { itemsInCart: [] };\r\n\r\n        let totalPrice = 0;\r\n        // Calculate total price based on cart items\r\n        // this.state.cart.forEach(item => {\r\n        //     const carItem=item.cartItems[0];\r\n        //     totalPrice += carItem.price * carItem.quantity;\r\n        // });\r\n        // // Update totalPrice state\r\n        // this.setState({ totalPrice: totalPrice });\r\n        this.state.cart.map(item => {\r\n            totalPrice += item.price * item.quantity;\r\n        });\r\n        // Update totalPrice state\r\n        // this.setState({ totalPrice: totalPrice });\r\n        return totalPrice.toFixed(2);\r\n    }\r\n    handleChange = (index, field, value) => {\r\n        const updatedCart = [...this.state.cart];\r\n        updatedCart[index][field] = value;\r\n        this.setState({ cart: updatedCart });\r\n        \r\n        // localStorage.setItem(\"itemsInCart\", JSON.stringify(updatedCart));\r\n        const groupedItems = this.state.cart.reduce((groups, item) => {\r\n            const group = groups.find(g => g.name === item.name);\r\n            if (group) {\r\n                group.quantity += item.quantity;\r\n                group.totalPrice += item.price * item.quantity;\r\n            } else {\r\n                groups.push({\r\n                    name: item.name,\r\n                    size: item.size,\r\n                    quantity: item.quantity,\r\n                    price: item.price,\r\n                    totalPrice: item.price * item.quantity\r\n                });\r\n            }\r\n            return groups;\r\n        }, []);\r\n        this.setState({cart:groupedItems})\r\n        localStorage.setItem(\"itemsInCart\", JSON.stringify(groupedItems));\r\n    };\r\n\r\n    handleDelete = (name, size) => {\r\n        const updatedCart = this.state.cart.filter(item => !(item.name === name && item.size === size));\r\n        this.setState({ cart: updatedCart });\r\n        localStorage.setItem(\"itemsInCart\", JSON.stringify(updatedCart));\r\n    };\r\n\r\n    // loadShirtPhotos() {\r\n    //     // Loop through each cart item and load its shirt photos\r\n\r\n    //     this.state.cart.forEach(item => {\r\n    //         item.cartItems[0].shirtPhotoFilename.forEach(photo => {\r\n    //             axios.get(`${SERVER_HOST}/shirts/photo/${photo.filename}`)\r\n    //                 .then(res => {\r\n    //                     // Update shirt photo in DOM\r\n    //                     document.getElementById(photo._id).src = `data:;base64,${res.data.image}`;\r\n    //                 })\r\n    //                 .catch(err => {\r\n    //                     // Handle error\r\n    //                     console.error(\"Error loading shirt photo:\", err);\r\n    //                 });\r\n    //         });\r\n    //     });\r\n    // }\r\n\r\n    render() {\r\n        console.log(this.state.cart[0])\r\n        // {this.state.cart !== undefined ? this.calculateTotalPrice() : null}\r\n\r\n        // console.log(this.state.cart.map((item,index) => (item.cartItems[0].name)));\r\n        const groupedItems = this.state.cart.reduce((groups, item) => {\r\n            const group = groups.find(g => g.name === item.name);\r\n            if (group) {\r\n                group.quantity += item.quantity;\r\n                group.totalPrice += item.price * item.quantity;\r\n            } else {\r\n                groups.push({\r\n                    name: item.name,\r\n                    size: item.size,\r\n                    quantity: item.quantity,\r\n                    price: item.price,\r\n                    totalPrice: item.price * item.quantity\r\n                });\r\n            }\r\n            return groups;\r\n        }, []);\r\n        return (\r\n            <div>\r\n                <NavigationBar />\r\n                <h2>Shopping Cart</h2>\r\n                <ul>\r\n                    {itemsInCart.map((item, index) => (\r\n                        <li key={index}>\r\n                            {item.name} - Quantity: {item.quantity} - Price: €{item.price * item.quantity}\r\n                        </li>\r\n                    ))}\r\n                </ul>\r\n                <p>Total Price: €{totalPrice}</p>\r\n            </div>\r\n            \r\n        );\r\n    }\r\n}\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}