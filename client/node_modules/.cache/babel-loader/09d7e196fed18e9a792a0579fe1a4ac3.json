{"ast":null,"code":"import _defineProperty from \"/Users/xhanhan/Desktop/CA Ecommerce/ecommerce_CA/client/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/xhanhan/Desktop/CA Ecommerce/ecommerce_CA/client/src/components/PayPalMessage.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { Component } from \"react\";\nimport { Redirect, Link } from \"react-router-dom\";\nimport axios from \"axios\";\nimport { SERVER_HOST } from \"../config/global_constants\";\nexport default class PayPalMessage extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      redirectToDisplayAllShirts: false,\n      buttonColour: \"red-button\",\n      cart: []\n    };\n  }\n\n  componentDidMount() {\n    if (this.props.match.params.messageType === PayPalMessage.messageType.SUCCESS) {\n      this.setState({\n        heading: \"PayPal Transaction Confirmation\",\n        message: \"Your PayPal transaction was successful.\",\n        buttonColour: \"green-button\"\n      });\n      const cartLocalStorage = JSON.parse(localStorage.getItem(\"itemsInCart\") || \"[]\");\n      this.setState({\n        cart: cartLocalStorage\n      }, () => {\n        this.state.cart.forEach((item, index) => {\n          let shirtObject = {\n            stock: item.stock - item.quantity\n          };\n\n          if (item.stock - item.quantity === 0) {\n            shirtObject = _objectSpread({}, shirtObject, {\n              sold: true\n            });\n          }\n\n          axios.put(\"\".concat(SERVER_HOST, \"/shirts/sales/\").concat(item.shirtId), shirtObject, {\n            headers: {\n              \"authorization\": localStorage.token\n            }\n          }).then(res => {\n            // Handle success if needed\n            console.log(\"Stock updated for shirt with ID: \".concat(item.shirtId));\n            localStorage.removeItem(\"itemsInCart\");\n          }).catch(err => {\n            // Handle error if needed\n            console.error(\"Error updating stock for shirt with ID: \".concat(item.shirtId), err);\n          });\n        });\n      });\n    } else if (this.props.match.params.messageType === PayPalMessage.messageType.CANCEL) {\n      this.setState({\n        heading: \"PayPal Transaction Cancelled\",\n        message: \"You cancelled your PayPal transaction. Therefore, the transaction was not completed.\"\n      });\n    } else if (this.props.match.params.messageType === PayPalMessage.messageType.ERROR) {\n      this.setState({\n        heading: \"PayPal Transaction Error\",\n        message: \"An error occured when trying to perform your PayPal transaction. The transaction was not completed. Please try to perform your transaction again.\"\n      });\n    } else {\n      console.log(\"The 'messageType' prop that was passed into the PayPalMessage component is invalid. It must be one of the following: PayPalMessage.messageType.SUCCESS, PayPalMessage.messageType.CANCEL or PayPalMessage.messageType.ERROR\");\n    }\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"payPalMessage\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }, this.state.redirectToDisplayAllShirts ? React.createElement(Redirect, {\n      to: \"/main\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }) : null, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }, this.state.heading), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    }, this.props.match.params.message), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    }, this.state.message), this.props.match.params.messageType === PayPalMessage.messageType.SUCCESS ? React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }, \"Your PayPal payment confirmation is \", React.createElement(\"span\", {\n      id: \"payPalPaymentID\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }, this.props.match.params.payPalPaymentID)) : null, React.createElement(\"p\", {\n      id: \"payPalPaymentIDButton\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }, React.createElement(Link, {\n      className: this.state.buttonColour,\n      to: \"/Main\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }, \"Continue\")));\n  }\n\n}\nPayPalMessage.messageType = {\n  SUCCESS: \"success\",\n  ERROR: \"error\",\n  CANCEL: \"cancel\"\n};","map":{"version":3,"sources":["/Users/xhanhan/Desktop/CA Ecommerce/ecommerce_CA/client/src/components/PayPalMessage.js"],"names":["React","Component","Redirect","Link","axios","SERVER_HOST","PayPalMessage","constructor","props","state","redirectToDisplayAllShirts","buttonColour","cart","componentDidMount","match","params","messageType","SUCCESS","setState","heading","message","cartLocalStorage","JSON","parse","localStorage","getItem","forEach","item","index","shirtObject","stock","quantity","sold","put","shirtId","headers","token","then","res","console","log","removeItem","catch","err","error","CANCEL","ERROR","render","payPalPaymentID"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\"\nimport { Redirect, Link } from \"react-router-dom\"\nimport axios from \"axios\"\nimport { SERVER_HOST } from \"../config/global_constants\"\n\nexport default class PayPalMessage extends Component {\n    static messageType = {\n        SUCCESS: \"success\",\n        ERROR: \"error\",\n        CANCEL: \"cancel\"\n    }\n\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            redirectToDisplayAllShirts: false,\n            buttonColour: \"red-button\",\n            cart: []\n        }\n    }\n\n\n    componentDidMount() {\n        if (this.props.match.params.messageType === PayPalMessage.messageType.SUCCESS) {\n            this.setState({\n                heading: \"PayPal Transaction Confirmation\",\n                message: \"Your PayPal transaction was successful.\",\n                buttonColour: \"green-button\"\n            })\n            const cartLocalStorage = JSON.parse(localStorage.getItem(\"itemsInCart\") || \"[]\");\n            this.setState({ cart: cartLocalStorage }, () => {\n                this.state.cart.forEach((item, index) => {\n                    let shirtObject = {\n                        stock: item.stock - item.quantity\n                    };\n\n                    if (item.stock - item.quantity === 0) {\n                        shirtObject = {\n                            ...shirtObject,\n                            sold: true\n                        };\n                    }\n\n                    axios.put(`${SERVER_HOST}/shirts/sales/${item.shirtId}`, shirtObject, { headers: { \"authorization\": localStorage.token } })\n                        .then(res => {\n                            // Handle success if needed\n                            console.log(`Stock updated for shirt with ID: ${item.shirtId}`);\n                            localStorage.removeItem(\"itemsInCart\");\n                        })\n                        .catch(err => {\n                            // Handle error if needed\n                            console.error(`Error updating stock for shirt with ID: ${item.shirtId}`, err);\n                        });\n                });\n            });\n\n\n\n\n\n        }\n        else if (this.props.match.params.messageType === PayPalMessage.messageType.CANCEL) {\n            this.setState({\n                heading: \"PayPal Transaction Cancelled\",\n                message: \"You cancelled your PayPal transaction. Therefore, the transaction was not completed.\"\n            })\n        }\n        else if (this.props.match.params.messageType === PayPalMessage.messageType.ERROR) {\n            this.setState({\n                heading: \"PayPal Transaction Error\",\n                message: \"An error occured when trying to perform your PayPal transaction. The transaction was not completed. Please try to perform your transaction again.\"\n            })\n        }\n        else {\n            console.log(\"The 'messageType' prop that was passed into the PayPalMessage component is invalid. It must be one of the following: PayPalMessage.messageType.SUCCESS, PayPalMessage.messageType.CANCEL or PayPalMessage.messageType.ERROR\")\n        }\n    }\n\n\n    render() {\n        return (\n            <div className=\"payPalMessage\">\n\n                {this.state.redirectToDisplayAllShirts ? <Redirect to=\"/main\" /> : null}\n\n                <h3>{this.state.heading}</h3>\n                <p>{this.props.match.params.message}</p>\n                <p>{this.state.message}</p>\n\n                {this.props.match.params.messageType === PayPalMessage.messageType.SUCCESS ? <p>Your PayPal payment confirmation is <span id=\"payPalPaymentID\">{this.props.match.params.payPalPaymentID}</span></p> : null}\n\n                <p id=\"payPalPaymentIDButton\"><Link className={this.state.buttonColour} to={\"/Main\"}>Continue</Link></p>\n            </div>\n        )\n    }\n}"]},"metadata":{},"sourceType":"module"}