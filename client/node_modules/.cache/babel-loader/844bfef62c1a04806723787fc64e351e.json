{"ast":null,"code":"var _jsxFileName = \"C:\\\\ecommerce_CA\\\\client\\\\src\\\\components\\\\ShoppingCart.js\";\n// import React, { Component } from \"react\"\n// import Form from \"react-bootstrap/Form\"\n// import axios from \"axios\"\n// export default class ShoppingCart extends Component {\n//     constructor(props){\n//         this.state = {\n//             items: [], \n//             totalPrice: 0 \n//         };\n//     }\n//     addItemToCart = (item) => {\n//         const updatedItems = [...this.state.items, item];\n//         const totalPrice = this.state.totalPrice + (item.price * item.quantity);\n//         this.setState({ items: updatedItems, totalPrice });\n//     };\n//     render() {\n//         const { items, totalPrice } = this.state;\n//         const { itemsInCart } = this.props.location.state;\n//         return (\n//             <div>\n//                 <h2>Shopping Cart</h2>\n//                 <ul>\n//                     {items.map((item, index) => (\n//                         <li key={index}>\n//                             {item.name} - Quantity: {item.quantity} - Price: ${item.price * item.quantity}\n//                         </li>\n//                     ))}\n//                 </ul>\n//                 <p>Total Price: ${totalPrice}</p>\n//             </div>\n//         );\n//     }\n// }\n// import React, { Component } from \"react\";\n// import Form from \"react-bootstrap/Form\"\n// import NavigationBar from \"./NavigationBar\"\n// import { SERVER_HOST } from \"../config/global_constants\"\n// import axios from \"axios\"\n// export default class ShoppingCart extends Component {\n//     constructor(props) {\n//         super(props)\n//         this.state = {\n//             // userId:\"\",\n//             name: \"\",\n//             size: \"\",\n//             price: \"\",\n//             quantity: \"\",\n//             shirtPhotoFilename: null,\n//             // redirectToDisplayAllTShirtInCart: localStorage.accessLevel < ACCESS_LEVEL_ADMIN,\n//             wasSubmittedAtLeastOnce: false,\n//             cart:[],\n//             totalPrice:0\n//         }\n//     }\n//     componentDidMount() {\n//         // const { itemsInCart } = this.props.location.state || { itemsInCart: [] };\n//         axios.get(`${SERVER_HOST}/cart/`)\n//         .then(res => \n//         { \n//             this.setState({cart: res.data})                                         \n//         })\n//         .catch(err =>\n//         {\n//             // do nothing\n//         })\n//         axios.get(`${SERVER_HOST}/cart/${this.props.match.params.id}`, { headers: { \"authorization\": localStorage.token } })\n//         .then(res => {\n//             this.setState({\n//                 name: res.data.name,\n//                 // colour: res.data.colour,\n//                 size: res.data.size,\n//                 price: res.data.price,\n//                 quantity: res.data.quantity,\n//                 shirtPhotoFilename:res.data.shirtPhotoFilename\n//             })\n//         })\n//         .catch(err => {\n//             // do nothing\n//         })\n//         // Update cart state with itemsInCart\n//         // this.setState({ cart: itemsInCart });\n//         // Calculate total price\n//         let totalPrice = 0;\n//         // itemsInCart.forEach(item => {\n//         //     totalPrice += item.price * item.quantity;\n//         // });\n//         this.state.cart.forEach(item => {\n//             totalPrice += item.price * item.quantity;\n//         })\n//         // Update totalPrice state\n//         this.setState({ totalPrice: totalPrice });\n//         // Load shirt photos\n//         this.state.cart.forEach(cartItem => {\n//             cartItem.shirtPhotoFilename.forEach(photo => {\n//                 axios.get(`${SERVER_HOST}/shirts/photo/${photo.filename}`)\n//                     .then(res => {\n//                         // Update shirt photo in DOM\n//                         document.getElementById(photo._id).src = `data:;base64,${res.data.image}`;\n//                     })\n//                     .catch(err => {\n//                         // Handle error\n//                     });\n//             });\n//         });\n//     }\n//     // componentDidMount(){\n//     //     const { itemsInCart } = this.props.location.state || { itemsInCart: [] };\n//     //     this.setState({ cart: itemsInCart });\n//     //     let totalPrice = 0;\n//     //     itemsInCart.forEach(item => {\n//     //         totalPrice += item.price * item.quantity;\n//     //     });\n//     //     this.setState({ totalPrice: totalPrice });\n//     //     this.state.cart.shirtPhotoFilename.map(photo => {\n//     //         return axios.get(`${SERVER_HOST}/shirts/photo/${photo.filename}`)\n//     //             .then(res => {\n//     //                 document.getElementById(photo._id).src = `data:;base64,${res.data.image}`\n//     //             })\n//     //             .catch(err => {\n//     //                 // do nothing\n//     //             })\n//     //     })\n//         // let formData = new FormData()\n//         // formData.append(\"userId\", this.state.stock)\n//         // formData.append(\"name\", this.state.name)\n//         // // formData.append(\"colour\", this.state.colour)\n//         // formData.append(\"size\", this.state.size)\n//         // formData.append(\"price\", this.state.price)\n//         // formData.append(\"quantity\", this.state.quantity)\n//         // if (this.state.cart.shirtPhotoFilename) {\n//         //     for (let i = 0; i < this.state.cart.shirtPhotoFilename.length; i++) {\n//         //         formData.append(\"cartPhotos\", this.state.cart.shirtPhotoFilename[i])\n//         //     }\n//         // }\n//         // axios.post(`${SERVER_HOST}/cart`, formData, { headers: { \"authorization\": localStorage.token, \"Content-type\": \"multipart/form-data\" } })\n//         //     .then(res => {\n//         //         this.setState({ redirectToDisplayAllTShirtInCart: true })\n//         //     })\n//         //     .catch(err => {\n//         //         this.setState({ wasSubmittedAtLeastOnce: true })\n//         //     })\n//     //}\n//     render() {\n// console.log(this.state.cart)\n//         return (\n//             <div>\n//                 <NavigationBar />\n//                 <h2>Shopping Cart</h2>\n//                 {/* <div>\n//                     {this.state.cart.shirtPhotoFilename === null ? null : <div className=\"shirtPhotos\">{this.state.cart.shirtPhotoFilename.map(photo => <img key={photo._id} id={photo._id} alt=\"\" />)}</div>}\n//                 </div> */}\n//                 {/* <ul>\n//                     {this.state.cart.map((item, index) => (\n//                         <li key={index}>\n//                             {item.name} - Quantity: {item.quantity} - Price: €{item.price * item.quantity}\n//                         </li>\n//                     ))}\n//                 </ul> */}\n//                 <p>Total Price: €{this.state.totalPrice}</p>\n//             </div>\n//         );\n//     }\n// }\nimport React, { Component } from \"react\";\nimport NavigationBar from \"./NavigationBar\";\nimport { SERVER_HOST } from \"../config/global_constants\";\nimport axios from \"axios\";\nexport default class ShoppingCart extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleChange = (groupName, itemIndex, field, value) => {\n      const updatedCart = [...this.state.cart];\n      const groupIndex = updatedCart.findIndex(group => group.name === groupName); // Ensure that the groupIndex is valid\n\n      if (groupIndex !== -1 && updatedCart[groupIndex].items[itemIndex]) {\n        updatedCart[groupIndex].items[itemIndex][field] = value;\n        this.setState({\n          cart: updatedCart\n        }, () => {\n          localStorage.setItem(\"itemsInCart\", JSON.stringify(updatedCart)); // Recalculate total price after updating state\n\n          this.calculateTotalPrice();\n        });\n      } else {\n        console.error(\"Group \".concat(groupName, \" or item at index \").concat(itemIndex, \" not found.\"));\n      }\n    };\n\n    this.handleDelete = (name, size) => {\n      const updatedCart = this.state.cart.filter(item => !(item.name === name && item.size === size));\n      this.setState({\n        cart: updatedCart\n      });\n      localStorage.setItem(\"itemsInCart\", JSON.stringify(updatedCart));\n    };\n\n    this.state = {\n      // name:\"\",\n      // price:\"\",\n      // quantity:\"\",\n      // size:\"\",\n      cart: [],\n      totalPrice: 0\n    };\n  }\n\n  componentDidMount() {\n    // Fetch cart data from the server\n    const cartLocalStorage = JSON.parse(localStorage.getItem(\"itemsInCart\") || \"[]\");\n    console.log(localStorage.getItem(\"itemsInCart\"));\n    this.setState({\n      cart: JSON.parse(localStorage.getItem(\"itemsInCart\"))\n    });\n    this.setState({\n      cart: cartLocalStorage\n    }, () => {\n      // Calculate total price after updating state\n      this.calculateTotalPrice();\n    }); // console.log(this.state.cart[0])\n    //         let totalPrice = 0;\n    //         this.state.cart.map(item => {\n    //             console.log(item)\n    //                         totalPrice += item.price * item.quantity;\n    //                     });\n    //                     // Update totalPrice state\n    //                     this.setState({ totalPrice: totalPrice });\n    // axios.get(`${SERVER_HOST}/cart`, { headers: { \"authorization\": localStorage.token } })\n    //     .then(res => {\n    //         // Update state with fetched cart data\n    //         this.setState({ cart: res.data }, () => {\n    //             // Calculate total price after updating state\n    //             this.calculateTotalPrice();\n    //             // Load shirt photos after updating state\n    //             // this.loadShirtPhotos();\n    //         });\n    //     })\n    //     .catch(err => {\n    //         // Handle error\n    //         console.error(\"Error fetching cart data:\", err);\n    //     });\n  }\n\n  calculateTotalPrice() {\n    let totalPrice = 0; // Calculate total price based on cart items\n    // this.state.cart.forEach(item => {\n    //     const carItem=item.cartItems[0];\n    //     totalPrice += carItem.price * carItem.quantity;\n    // });\n    // // Update totalPrice state\n    // this.setState({ totalPrice: totalPrice });\n\n    this.state.cart.map(item => {\n      console.log(item);\n      totalPrice += item.price * item.quantity;\n    }); // Update totalPrice state\n    // this.setState({ totalPrice: totalPrice });\n\n    return totalPrice;\n  } // handleChange = (index, field, value) => {\n  //     const updatedCart = [...this.state.cart];\n  //     updatedCart[index][field] = value;\n  //     this.setState({ cart: updatedCart });\n  //     localStorage.setItem(\"itemsInCart\", JSON.stringify(updatedCart));\n  // };\n  // handleChange = (groupName, itemIndex, field, value) => {\n  //     const updatedCart = [...this.state.cart];\n  //     const groupIndex = updatedCart.findIndex(group => group.name === groupName);\n  //     updatedCart[groupIndex].items[itemIndex][field] = value;\n  //     this.setState({ cart: updatedCart }, () => {\n  //         localStorage.setItem(\"itemsInCart\", JSON.stringify(updatedCart));\n  //         // Recalculate total price after updating state\n  //         this.calculateTotalPrice();\n  //     });\n  // };\n\n\n  // loadShirtPhotos() {\n  //     // Loop through each cart item and load its shirt photos\n  //     this.state.cart.forEach(item => {\n  //         item.cartItems[0].shirtPhotoFilename.forEach(photo => {\n  //             axios.get(`${SERVER_HOST}/shirts/photo/${photo.filename}`)\n  //                 .then(res => {\n  //                     // Update shirt photo in DOM\n  //                     document.getElementById(photo._id).src = `data:;base64,${res.data.image}`;\n  //                 })\n  //                 .catch(err => {\n  //                     // Handle error\n  //                     console.error(\"Error loading shirt photo:\", err);\n  //                 });\n  //         });\n  //     });\n  // }\n  render() {\n    console.log(this.state.cart[0]); // {this.state.cart !== undefined ? this.calculateTotalPrice() : null}\n    // console.log(this.state.cart.map((item,index) => (item.cartItems[0].name)));\n    // const groupedItems = this.state.cart.reduce((groups, item) => {\n    //     const group = groups.find(g => g.name === item.name);\n    //     if (group) {\n    //         group.quantity += item.quantity;\n    //         group.totalPrice += item.price * item.quantity;\n    //     } else {\n    //         groups.push({\n    //             name: item.name,\n    //             size: item.size,\n    //             quantity: item.quantity,\n    //             price: item.price,\n    //             totalPrice: item.price * item.quantity\n    //         });\n    //     }\n    //     return groups;\n    // }, []);\n\n    const groupedItems = this.state.cart.reduce((groups, item) => {\n      const group = groups.find(g => g.name === item.name);\n\n      if (group) {\n        group.quantity += item.quantity;\n        group.totalPrice += item.price * item.quantity;\n      } else {\n        groups.push({\n          name: item.name,\n          items: [item],\n          totalPrice: item.price * item.quantity\n        });\n      }\n\n      return groups;\n    }, []);\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 364\n      },\n      __self: this\n    }, React.createElement(NavigationBar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 365\n      },\n      __self: this\n    }), React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 366\n      },\n      __self: this\n    }, \"Shopping Cart\"), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 367\n      },\n      __self: this\n    }, groupedItems.map((group, index) => React.createElement(\"div\", {\n      key: index,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 369\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 370\n      },\n      __self: this\n    }, group.name), group.items.map((item, itemIndex) => React.createElement(\"div\", {\n      key: itemIndex,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 372\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 373\n      },\n      __self: this\n    }, \"Size:\"), React.createElement(\"input\", {\n      type: \"text\",\n      value: item.size // onChange={e => this.handleChange(itemIndex, 'size', e.target.value)}\n      ,\n      onChange: e => this.handleChange(group.name, itemIndex, 'size', e.target.value),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 374\n      },\n      __self: this\n    }), React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 381\n      },\n      __self: this\n    }, \"Quantity:\"), React.createElement(\"input\", {\n      type: \"text\",\n      value: item.quantity // onChange={e => this.handleChange(itemIndex, 'quantity', e.target.value)}\n      ,\n      onChange: e => this.handleChange(group.name, itemIndex, 'quantity', e.target.value),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 382\n      },\n      __self: this\n    }), React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 388\n      },\n      __self: this\n    }, \"Price: \", item.price), React.createElement(\"button\", {\n      onClick: () => this.handleDelete(item.name, item.size),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 389\n      },\n      __self: this\n    }, \"Delete\"))), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 392\n      },\n      __self: this\n    }, \"Total Price: \\u20AC\", group.totalPrice)))), this.state.cart !== undefined ? React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 397\n      },\n      __self: this\n    }, \"Total Price: \", this.calculateTotalPrice()) : null);\n  }\n\n}","map":{"version":3,"sources":["C:\\ecommerce_CA\\client\\src\\components\\ShoppingCart.js"],"names":["React","Component","NavigationBar","SERVER_HOST","axios","ShoppingCart","constructor","props","handleChange","groupName","itemIndex","field","value","updatedCart","state","cart","groupIndex","findIndex","group","name","items","setState","localStorage","setItem","JSON","stringify","calculateTotalPrice","console","error","handleDelete","size","filter","item","totalPrice","componentDidMount","cartLocalStorage","parse","getItem","log","map","price","quantity","render","groupedItems","reduce","groups","find","g","push","index","e","target","undefined"],"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","sourcesContent":["// import React, { Component } from \"react\"\r\n// import Form from \"react-bootstrap/Form\"\r\n\r\n// import axios from \"axios\"\r\n\r\n// export default class ShoppingCart extends Component {\r\n//     constructor(props){\r\n//         this.state = {\r\n//             items: [], \r\n//             totalPrice: 0 \r\n//         };\r\n//     }\r\n\r\n//     addItemToCart = (item) => {\r\n//         const updatedItems = [...this.state.items, item];\r\n//         const totalPrice = this.state.totalPrice + (item.price * item.quantity);\r\n//         this.setState({ items: updatedItems, totalPrice });\r\n//     };\r\n\r\n//     render() {\r\n//         const { items, totalPrice } = this.state;\r\n//         const { itemsInCart } = this.props.location.state;\r\n\r\n//         return (\r\n//             <div>\r\n//                 <h2>Shopping Cart</h2>\r\n//                 <ul>\r\n//                     {items.map((item, index) => (\r\n//                         <li key={index}>\r\n//                             {item.name} - Quantity: {item.quantity} - Price: ${item.price * item.quantity}\r\n//                         </li>\r\n//                     ))}\r\n//                 </ul>\r\n//                 <p>Total Price: ${totalPrice}</p>\r\n//             </div>\r\n//         );\r\n//     }\r\n// }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// import React, { Component } from \"react\";\r\n// import Form from \"react-bootstrap/Form\"\r\n// import NavigationBar from \"./NavigationBar\"\r\n// import { SERVER_HOST } from \"../config/global_constants\"\r\n\r\n// import axios from \"axios\"\r\n\r\n// export default class ShoppingCart extends Component {\r\n//     constructor(props) {\r\n//         super(props)\r\n\r\n//         this.state = {\r\n//             // userId:\"\",\r\n//             name: \"\",\r\n//             size: \"\",\r\n//             price: \"\",\r\n//             quantity: \"\",\r\n//             shirtPhotoFilename: null,\r\n//             // redirectToDisplayAllTShirtInCart: localStorage.accessLevel < ACCESS_LEVEL_ADMIN,\r\n//             wasSubmittedAtLeastOnce: false,\r\n//             cart:[],\r\n//             totalPrice:0\r\n//         }\r\n//     }\r\n//     componentDidMount() {\r\n//         // const { itemsInCart } = this.props.location.state || { itemsInCart: [] };\r\n//         axios.get(`${SERVER_HOST}/cart/`)\r\n//         .then(res => \r\n//         { \r\n//             this.setState({cart: res.data})                                         \r\n//         })\r\n//         .catch(err =>\r\n//         {\r\n//             // do nothing\r\n//         })\r\n\r\n\r\n//         axios.get(`${SERVER_HOST}/cart/${this.props.match.params.id}`, { headers: { \"authorization\": localStorage.token } })\r\n//         .then(res => {\r\n//             this.setState({\r\n//                 name: res.data.name,\r\n//                 // colour: res.data.colour,\r\n//                 size: res.data.size,\r\n//                 price: res.data.price,\r\n//                 quantity: res.data.quantity,\r\n//                 shirtPhotoFilename:res.data.shirtPhotoFilename\r\n//             })\r\n//         })\r\n//         .catch(err => {\r\n//             // do nothing\r\n//         })\r\n\r\n\r\n//         // Update cart state with itemsInCart\r\n//         // this.setState({ cart: itemsInCart });\r\n\r\n//         // Calculate total price\r\n//         let totalPrice = 0;\r\n//         // itemsInCart.forEach(item => {\r\n//         //     totalPrice += item.price * item.quantity;\r\n//         // });\r\n//         this.state.cart.forEach(item => {\r\n//             totalPrice += item.price * item.quantity;\r\n//         })\r\n\r\n//         // Update totalPrice state\r\n//         this.setState({ totalPrice: totalPrice });\r\n\r\n//         // Load shirt photos\r\n//         this.state.cart.forEach(cartItem => {\r\n//             cartItem.shirtPhotoFilename.forEach(photo => {\r\n//                 axios.get(`${SERVER_HOST}/shirts/photo/${photo.filename}`)\r\n//                     .then(res => {\r\n//                         // Update shirt photo in DOM\r\n//                         document.getElementById(photo._id).src = `data:;base64,${res.data.image}`;\r\n//                     })\r\n//                     .catch(err => {\r\n//                         // Handle error\r\n//                     });\r\n//             });\r\n//         });\r\n//     }\r\n\r\n//     // componentDidMount(){\r\n//     //     const { itemsInCart } = this.props.location.state || { itemsInCart: [] };\r\n//     //     this.setState({ cart: itemsInCart });\r\n//     //     let totalPrice = 0;\r\n//     //     itemsInCart.forEach(item => {\r\n//     //         totalPrice += item.price * item.quantity;\r\n//     //     });\r\n//     //     this.setState({ totalPrice: totalPrice });\r\n//     //     this.state.cart.shirtPhotoFilename.map(photo => {\r\n//     //         return axios.get(`${SERVER_HOST}/shirts/photo/${photo.filename}`)\r\n//     //             .then(res => {\r\n//     //                 document.getElementById(photo._id).src = `data:;base64,${res.data.image}`\r\n//     //             })\r\n//     //             .catch(err => {\r\n//     //                 // do nothing\r\n//     //             })\r\n//     //     })\r\n//         // let formData = new FormData()\r\n//         // formData.append(\"userId\", this.state.stock)\r\n//         // formData.append(\"name\", this.state.name)\r\n//         // // formData.append(\"colour\", this.state.colour)\r\n//         // formData.append(\"size\", this.state.size)\r\n//         // formData.append(\"price\", this.state.price)\r\n//         // formData.append(\"quantity\", this.state.quantity)\r\n\r\n\r\n//         // if (this.state.cart.shirtPhotoFilename) {\r\n//         //     for (let i = 0; i < this.state.cart.shirtPhotoFilename.length; i++) {\r\n//         //         formData.append(\"cartPhotos\", this.state.cart.shirtPhotoFilename[i])\r\n//         //     }\r\n//         // }\r\n\r\n//         // axios.post(`${SERVER_HOST}/cart`, formData, { headers: { \"authorization\": localStorage.token, \"Content-type\": \"multipart/form-data\" } })\r\n//         //     .then(res => {\r\n//         //         this.setState({ redirectToDisplayAllTShirtInCart: true })\r\n//         //     })\r\n//         //     .catch(err => {\r\n//         //         this.setState({ wasSubmittedAtLeastOnce: true })\r\n//         //     })\r\n//     //}\r\n//     render() {\r\n// console.log(this.state.cart)\r\n//         return (\r\n//             <div>\r\n//                 <NavigationBar />\r\n//                 <h2>Shopping Cart</h2>\r\n//                 {/* <div>\r\n//                     {this.state.cart.shirtPhotoFilename === null ? null : <div className=\"shirtPhotos\">{this.state.cart.shirtPhotoFilename.map(photo => <img key={photo._id} id={photo._id} alt=\"\" />)}</div>}\r\n//                 </div> */}\r\n//                 {/* <ul>\r\n//                     {this.state.cart.map((item, index) => (\r\n//                         <li key={index}>\r\n//                             {item.name} - Quantity: {item.quantity} - Price: €{item.price * item.quantity}\r\n//                         </li>\r\n//                     ))}\r\n//                 </ul> */}\r\n//                 <p>Total Price: €{this.state.totalPrice}</p>\r\n//             </div>\r\n//         );\r\n//     }\r\n// }\r\n\r\n\r\n\r\n\r\n\r\nimport React, { Component } from \"react\";\r\nimport NavigationBar from \"./NavigationBar\";\r\nimport { SERVER_HOST } from \"../config/global_constants\";\r\nimport axios from \"axios\";\r\n\r\nexport default class ShoppingCart extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            // name:\"\",\r\n            // price:\"\",\r\n            // quantity:\"\",\r\n            // size:\"\",\r\n            cart: [],\r\n            totalPrice: 0\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        // Fetch cart data from the server\r\n        const cartLocalStorage = JSON.parse(localStorage.getItem(\"itemsInCart\") || \"[]\");\r\n\r\n        console.log(localStorage.getItem(\"itemsInCart\"))\r\n\r\n        this.setState({ cart: JSON.parse(localStorage.getItem(\"itemsInCart\")) })\r\n\r\n        this.setState({ cart: cartLocalStorage }, () => {\r\n            // Calculate total price after updating state\r\n            this.calculateTotalPrice();\r\n        });\r\n\r\n        // console.log(this.state.cart[0])\r\n        //         let totalPrice = 0;\r\n        //         this.state.cart.map(item => {\r\n        //             console.log(item)\r\n        //                         totalPrice += item.price * item.quantity;\r\n        //                     });\r\n        //                     // Update totalPrice state\r\n        //                     this.setState({ totalPrice: totalPrice });\r\n        // axios.get(`${SERVER_HOST}/cart`, { headers: { \"authorization\": localStorage.token } })\r\n        //     .then(res => {\r\n        //         // Update state with fetched cart data\r\n        //         this.setState({ cart: res.data }, () => {\r\n        //             // Calculate total price after updating state\r\n        //             this.calculateTotalPrice();\r\n        //             // Load shirt photos after updating state\r\n        //             // this.loadShirtPhotos();\r\n        //         });\r\n        //     })\r\n        //     .catch(err => {\r\n        //         // Handle error\r\n        //         console.error(\"Error fetching cart data:\", err);\r\n        //     });\r\n    }\r\n\r\n    calculateTotalPrice() {\r\n        let totalPrice = 0;\r\n        // Calculate total price based on cart items\r\n        // this.state.cart.forEach(item => {\r\n        //     const carItem=item.cartItems[0];\r\n        //     totalPrice += carItem.price * carItem.quantity;\r\n        // });\r\n        // // Update totalPrice state\r\n        // this.setState({ totalPrice: totalPrice });\r\n        this.state.cart.map(item => {\r\n            console.log(item)\r\n            totalPrice += item.price * item.quantity;\r\n        });\r\n        // Update totalPrice state\r\n        // this.setState({ totalPrice: totalPrice });\r\n        return totalPrice;\r\n    }\r\n    // handleChange = (index, field, value) => {\r\n    //     const updatedCart = [...this.state.cart];\r\n    //     updatedCart[index][field] = value;\r\n    //     this.setState({ cart: updatedCart });\r\n    //     localStorage.setItem(\"itemsInCart\", JSON.stringify(updatedCart));\r\n    // };\r\n    // handleChange = (groupName, itemIndex, field, value) => {\r\n    //     const updatedCart = [...this.state.cart];\r\n    //     const groupIndex = updatedCart.findIndex(group => group.name === groupName);\r\n    //     updatedCart[groupIndex].items[itemIndex][field] = value;\r\n    //     this.setState({ cart: updatedCart }, () => {\r\n    //         localStorage.setItem(\"itemsInCart\", JSON.stringify(updatedCart));\r\n    //         // Recalculate total price after updating state\r\n    //         this.calculateTotalPrice();\r\n    //     });\r\n    // };\r\n    handleChange = (groupName, itemIndex, field, value) => {\r\n        const updatedCart = [...this.state.cart];\r\n        const groupIndex = updatedCart.findIndex(group => group.name === groupName);\r\n        \r\n        // Ensure that the groupIndex is valid\r\n        if (groupIndex !== -1 && updatedCart[groupIndex].items[itemIndex]) {\r\n            updatedCart[groupIndex].items[itemIndex][field] = value;\r\n            this.setState({ cart: updatedCart }, () => {\r\n                localStorage.setItem(\"itemsInCart\", JSON.stringify(updatedCart));\r\n                // Recalculate total price after updating state\r\n                this.calculateTotalPrice();\r\n            });\r\n        } else {\r\n            console.error(`Group ${groupName} or item at index ${itemIndex} not found.`);\r\n        }\r\n    };\r\n    \r\n\r\n    handleDelete = (name, size) => {\r\n        const updatedCart = this.state.cart.filter(item => !(item.name === name && item.size === size));\r\n        this.setState({ cart: updatedCart });\r\n        localStorage.setItem(\"itemsInCart\", JSON.stringify(updatedCart));\r\n    };\r\n\r\n    // loadShirtPhotos() {\r\n    //     // Loop through each cart item and load its shirt photos\r\n\r\n    //     this.state.cart.forEach(item => {\r\n    //         item.cartItems[0].shirtPhotoFilename.forEach(photo => {\r\n    //             axios.get(`${SERVER_HOST}/shirts/photo/${photo.filename}`)\r\n    //                 .then(res => {\r\n    //                     // Update shirt photo in DOM\r\n    //                     document.getElementById(photo._id).src = `data:;base64,${res.data.image}`;\r\n    //                 })\r\n    //                 .catch(err => {\r\n    //                     // Handle error\r\n    //                     console.error(\"Error loading shirt photo:\", err);\r\n    //                 });\r\n    //         });\r\n    //     });\r\n    // }\r\n\r\n    render() {\r\n        console.log(this.state.cart[0])\r\n        // {this.state.cart !== undefined ? this.calculateTotalPrice() : null}\r\n\r\n        // console.log(this.state.cart.map((item,index) => (item.cartItems[0].name)));\r\n        // const groupedItems = this.state.cart.reduce((groups, item) => {\r\n        //     const group = groups.find(g => g.name === item.name);\r\n        //     if (group) {\r\n        //         group.quantity += item.quantity;\r\n        //         group.totalPrice += item.price * item.quantity;\r\n        //     } else {\r\n        //         groups.push({\r\n        //             name: item.name,\r\n        //             size: item.size,\r\n        //             quantity: item.quantity,\r\n        //             price: item.price,\r\n        //             totalPrice: item.price * item.quantity\r\n        //         });\r\n        //     }\r\n        //     return groups;\r\n        // }, []);\r\n        const groupedItems = this.state.cart.reduce((groups, item) => {\r\n            const group = groups.find(g => g.name === item.name);\r\n            if (group) {\r\n                group.quantity += item.quantity;\r\n                group.totalPrice += item.price * item.quantity;\r\n            } else {\r\n                groups.push({\r\n                    name: item.name,\r\n                    items: [item],\r\n                    totalPrice: item.price * item.quantity\r\n                });\r\n            }\r\n            return groups;\r\n        }, []);\r\n        return (\r\n            <div>\r\n                <NavigationBar />\r\n                <h2>Shopping Cart</h2>\r\n                <div>\r\n                    {groupedItems.map((group, index) => (\r\n                        <div key={index}>\r\n                            <h3>{group.name}</h3>\r\n                            {group.items.map((item, itemIndex) => (\r\n                                <div key={itemIndex}>\r\n                                    <span>Size:</span>\r\n                                    <input\r\n                                        type=\"text\"\r\n                                        value={item.size}\r\n                                        // onChange={e => this.handleChange(itemIndex, 'size', e.target.value)}\r\n                                        onChange={e => this.handleChange(group.name, itemIndex, 'size', e.target.value)}\r\n\r\n                                    />\r\n                                    <span>Quantity:</span>\r\n                                    <input\r\n                                        type=\"text\"\r\n                                        value={item.quantity}\r\n                                        // onChange={e => this.handleChange(itemIndex, 'quantity', e.target.value)}\r\n                                        onChange={e => this.handleChange(group.name, itemIndex, 'quantity', e.target.value)}\r\n                                    />\r\n                                    <span>Price: {item.price}</span>\r\n                                    <button onClick={() => this.handleDelete(item.name, item.size)}>Delete</button>\r\n                                </div>\r\n                            ))}\r\n                            <p>Total Price: €{group.totalPrice}</p>\r\n                        </div>\r\n                    ))}\r\n                </div>\r\n                {/* <p>Total Price: €{this.state.totalPrice}</p> */}\r\n                {this.state.cart !== undefined ? <p>Total Price: {this.calculateTotalPrice()}</p> : null}\r\n\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}