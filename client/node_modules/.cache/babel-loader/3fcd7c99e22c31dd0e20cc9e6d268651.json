{"ast":null,"code":"import _defineProperty from \"/Users/xhanhan/Desktop/CA Ecommerce/ecommerce_CA/client/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/xhanhan/Desktop/CA Ecommerce/ecommerce_CA/client/src/components/ViewPurchaseHistory.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n// import React, { Component } from \"react\"\n// import { Redirect, Link } from \"react-router-dom\"\n// import axios from \"axios\"\n// import NavigationBar from \"./NavigationBar\"\n// import { ACCESS_LEVEL_GUEST, ACCESS_LEVEL_ADMIN, ACCESS_LEVEL_NORMAL_USER, SERVER_HOST } from \"../config/global_constants\"\n// export default class ViewAllUsers extends Component {\n//     constructor(props) {\n//         super(props)\n//         this.state = {\n//             purchaseHistory: [],\n//             eachItemsInOrder: [],\n//             allOrders: [],\n//             searchQuery: \"\",\n//             sortFunction: \"name\",\n//             sizeFilter: \"\"\n//         }\n//     }\n//     // componentDidMount() {\n//     //     if (localStorage.accessLevel > ACCESS_LEVEL_GUEST) {\n//     //         let userEmail = JSON.parse(localStorage.getItem(\"userEmail\"));\n//     //         axios.get(`${SERVER_HOST}/sales/email?email=${userEmail}`)\n//     //         .then(res => {\n//     //             // Update purchaseHistory state\n//     //             this.setState({ purchaseHistory: res.data }, () => {\n//     //                 // Iterate over each item in purchase history and fetch shirt details\n//     //                 this.state.purchaseHistory.forEach(itemsInArray => {\n//     //                     itemsInArray.items.forEach(item => { // Changed from map to forEach\n//     //                         axios.get(`${SERVER_HOST}/shirts/${item.shirtID}`, { headers: { \"authorization\": localStorage.token } })\n//     //                         .then(res => {\n//     //                             const updatedItem = { ...res.data, quantity: item.quantity }; // Add quantity property\n//     //                             // Update eachItemsInOrder state by appending new items\n//     //                             this.setState(prevState => ({\n//     //                                 eachItemsInOrder: [...prevState.eachItemsInOrder, updatedItem]\n//     //                             }));\n//     //                         })\n//     //                         .catch(err => {\n//     //                             console.error(\"Error fetching shirt data:\", err);\n//     //                         });\n//     //                     });\n//     //                 });\n//     //             });\n//     //         })\n//     //         .catch(err => {\n//     //             console.error(\"Error fetching user data:\", err);\n//     //         });\n//     //     }\n//     // }\n//     // componentDidMount() {\n//     //     if (localStorage.accessLevel > ACCESS_LEVEL_GUEST) {\n//     //         let userEmail = JSON.parse(localStorage.getItem(\"userEmail\"));\n//     //         axios.get(`${SERVER_HOST}/sales/email?email=${userEmail}`)\n//     //         .then(res => {\n//     //             // Update purchaseHistory state\n//     //             this.setState({ purchaseHistory: res.data }, () => {\n//     //                 // Iterate over each item in purchase history\n//     //                 this.state.purchaseHistory.forEach((itemsInArray, index) => {\n//     //                     // Store each itemsInOrder array in a separate array\n//     //                     let eachItemsInOrder = [];\n//     //                     itemsInArray.items.forEach(item => {\n//     //                         axios.get(`${SERVER_HOST}/shirts/${item.shirtID}`, { headers: { \"authorization\": localStorage.token } })\n//     //                         .then(res => {\n//     //                             const updatedItem = { ...res.data, quantity: item.quantity }; // Add quantity property\n//     //                             eachItemsInOrder.push(updatedItem);\n//     //                         })\n//     //                         .catch(err => {\n//     //                             console.error(\"Error fetching shirt data:\", err);\n//     //                         });\n//     //                     });\n//     //                     // Push eachItemsInOrder array into allOrders array\n//     //                     this.setState(prevState => ({\n//     //                         allOrders: [\n//     //                             ...prevState.allOrders,\n//     //                             {\n//     //                                 orderId: itemsInArray._id, // Store item._id into allOrders\n//     //                                 eachItemsInOrder: eachItemsInOrder\n//     //                             }\n//     //                         ]\n//     //                     }));\n//     //                 });\n//     //             });\n//     //         })\n//     //         .catch(err => {\n//     //             console.error(\"Error fetching user data:\", err);\n//     //         });\n//     //     }\n//     // }\n//     componentDidMount() {\n//         if (localStorage.accessLevel > ACCESS_LEVEL_GUEST) {\n//             //             let userEmail;\n//             //             // const currentUrl = window.location.pathname;\n//             //             if(localStorage.accessLevel === ACCESS_LEVEL_NORMAL_USER){\n//             //             userEmail = JSON.parse(localStorage.getItem(\"userEmail\"));\n//             //             console.log(userEmail)\n//             //             }else if(localStorage.accessLevel ===ACCESS_LEVEL_ADMIN){\n//             //                 userEmail = this.props.match.params.email;\n//             //                 console.log(userEmail)\n//             //             }\n//             // console.log(userEmail)\n//             let userEmail = '';\n//             if (localStorage.accessLevel > ACCESS_LEVEL_NORMAL_USER) {\n//                 userEmail = this.props.match.params.email;\n//             }\n//             else {\n//                 userEmail = JSON.parse(localStorage.getItem(\"userEmail\"));\n//             }\n//             console.log(\"User Email: \", userEmail);\n//             axios.get(`${SERVER_HOST}/sales/email?email=${userEmail}`)\n//                 .then(res => {\n//                     // Update purchase history state\n//                     this.setState({ purchaseHistory: res.data }, () => {\n//                         // Iterate over each purchase history item\n//                         this.state.purchaseHistory.forEach((itemsInArray, index) => {\n//                             let eachItemsInOrder = [];\n//                             let totalPrice = 0; // Initialize total price for the order\n//                             itemsInArray.items.forEach(item => {\n//                                 // Fetch shirt details and calculate total price for each item\n//                                 axios.get(`${SERVER_HOST}/shirts/${item.shirtID}`, { headers: { \"authorization\": localStorage.token } })\n//                                     .then(res => {\n//                                         const updatedItem = { ...res.data, quantity: item.quantity };\n//                                         eachItemsInOrder.push(updatedItem);\n//                                         // Check if all items are fetched\n//                                         if (eachItemsInOrder.length === itemsInArray.items.length) {\n//                                             // Add the price of the item to the total price\n//                                             eachItemsInOrder.map(item => totalPrice += item.price * item.quantity)\n//                                             // Update state after all items are fetched\n//                                             this.setState(prevState => ({\n//                                                 allOrders: [\n//                                                     ...prevState.allOrders,\n//                                                     {\n//                                                         orderId: itemsInArray._id,\n//                                                         refunded: itemsInArray.refunded,\n//                                                         eachItemsInOrder: eachItemsInOrder,\n//                                                         totalPrice: totalPrice\n//                                                     }\n//                                                 ]\n//                                             }), () => {\n//                                                 // Call loadShirtPhotos() after updating state\n//                                                 this.loadShirtPhotos();\n//                                             });\n//                                         }\n//                                     })\n//                                     .catch(err => {\n//                                         console.error(\"Error fetching shirt data:\", err);\n//                                     });\n//                             });\n//                         });\n//                     });\n//                 })\n//                 .catch(err => {\n//                     console.error(\"Error fetching user data:\", err);\n//                 });\n//         }\n//     }\n//     loadShirtPhotos() {\n//         this.state.allOrders.forEach(order => {\n//             order.eachItemsInOrder.forEach(item => {\n//                 item.shirtPhotoFilename.forEach(photo => {\n//                     axios.get(`${SERVER_HOST}/shirts/photo/${photo.filename}`)\n//                         .then(res => {\n//                             // Update shirt photo in DOM\n//                             const elements = document.getElementsByClassName(photo._id);\n//                             Array.from(elements).forEach(element => {\n//                                 element.src = `data:;base64,${res.data.image}`;\n//                             });\n//                         })\n//                         .catch(err => {\n//                             // Handle error\n//                             console.error(\"Error loading shirt photo:\", err);\n//                         });\n//                 });\n//             });\n//         });\n//     }\n//     handleDelete = (orderId, itemId, stockBeforeReturn, itemQuantity, refundMoney, refundedMoney, totalPrice) => {\n//         let newItems = [];\n//         let saleObject;\n//         // Map through purchase history to find the order with the given orderId\n//         const updatedPurchaseHistory = this.state.purchaseHistory.map(order => {\n//             if (order._id === orderId) {\n//                 // Iterate over the items in the order\n//                 order.items.forEach(item => {\n//                     if (item.shirtID === itemId) {\n//                         // If the item matches the itemId, subtract the returned quantity from the item's quantity\n//                         item.quantity -= itemQuantity;\n//                         // If the updated quantity is zero or less, don't add it to newItems\n//                         if (item.quantity > 0) {\n//                             newItems.push(item); // Add the updated item to newItems\n//                         }\n//                     } else {\n//                         newItems.push(item); // Add unchanged items to newItems\n//                     }\n//                 });\n//                 // Create the saleObject with updated refund and price\n//                 saleObject = {\n//                     refunded: refundedMoney + refundMoney,\n//                     price: totalPrice - refundMoney,\n//                     items: newItems // Set the newItems array\n//                 };\n//             }\n//             return order;\n//         });\n//         // Update the purchase history in the state\n//         this.setState({ purchaseHistory: updatedPurchaseHistory }, () => {\n//             this.updateAllOrders(updatedPurchaseHistory);\n//         });\n//         axios.put(`${SERVER_HOST}/sales/${orderId}`, saleObject, { headers: { \"authorization\": localStorage.token } })\n//             .then(res => {\n//                 // Handle success if needed\n//                 console.log(`Updated Sales with ID: ${orderId}`);\n//                 localStorage.removeItem(\"itemsInCart\");\n//             })\n//             .catch(err => {\n//                 // Handle error if needed\n//                 console.error(`Error updating Sales with ID: ${orderId}`, err);\n//             });\n//         let shirtObject = {\n//             stock: stockBeforeReturn + itemQuantity,\n//             sold: false\n//         };\n//         axios.put(`${SERVER_HOST}/shirts/${itemId}`, shirtObject, { headers: { \"authorization\": localStorage.token } })\n//             .then(res => {\n//                 // Handle success if needed\n//                 console.log(`Stock updated for shirt with ID: ${itemId}`);\n//                 localStorage.removeItem(\"itemsInCart\");\n//             })\n//             .catch(err => {\n//                 // Handle error if needed\n//                 console.error(`Error updating stock for shirt with ID: ${itemId}`, err);\n//             });\n//     }\n//     updateAllOrders = (purchaseHistory) => {\n//         let allOrders = [];\n//         purchaseHistory.forEach((itemsInArray, index) => {\n//             let eachItemsInOrder = [];\n//             let totalPrice = 0; // Initialize total price for the order\n//             itemsInArray.items.forEach(item => {\n//                 // Fetch shirt details and calculate total price for each item\n//                 axios.get(`${SERVER_HOST}/shirts/${item.shirtID}`, { headers: { \"authorization\": localStorage.token } })\n//                     .then(res => {\n//                         const updatedItem = { ...res.data, quantity: item.quantity };\n//                         eachItemsInOrder.push(updatedItem);\n//                         // Check if all items are fetched\n//                         if (eachItemsInOrder.length === itemsInArray.items.length) {\n//                             // Add the price of the item to the total price\n//                             eachItemsInOrder.forEach(item => totalPrice += item.price * item.quantity);\n//                             // Push the order details to the allOrders array\n//                             allOrders.push({\n//                                 orderId: itemsInArray._id,\n//                                 refunded: itemsInArray.refunded,\n//                                 eachItemsInOrder: eachItemsInOrder,\n//                                 totalPrice: totalPrice\n//                             });\n//                             // Update state after all items are fetched\n//                             this.setState({ allOrders: allOrders }, () => {\n//                                 // Call loadShirtPhotos() after updating state\n//                                 this.loadShirtPhotos();\n//                             });\n//                         }\n//                     })\n//                     .catch(err => {\n//                         console.error(\"Error fetching shirt data:\", err);\n//                     });\n//             });\n//         });\n//     }\n//     handleSearchChange = (event) => {\n//         // Update search query state\n//         this.setState({ searchQuery: event.target.value });\n//         // if (event.target.value === \"\") {\n//         // Reload shirt photos when the search query is cleared\n//         this.loadShirtPhotos();\n//         // }\n//     };\n//     handleSortByTotalPrice = () => {\n//         this.setState({ sortFunction: \"totalPrice\" });\n//     };\n//     handleSortByDefault = () => {\n//         this.setState({ sortFunction: \"name\" }); // Set the default sorting option\n//     };\n//     handleSizeFilterChange = (event) => {\n//         this.setState({ sizeFilter: event.target.value });\n//         this.loadShirtPhotos();\n//     };\n//     render() {\n//         const { allOrders, searchQuery, sortFunction, sizeFilter } = this.state;\n//         console.log(searchQuery)\n//         console.log(\"Alloders: \", allOrders)\n//         let filteredOrders = allOrders.filter(order =>\n//             order.eachItemsInOrder.some(item => item.name.toLowerCase().includes(searchQuery.toLowerCase()))\n//         );\n//         if (sizeFilter !== \"\") {\n//             filteredOrders = filteredOrders.filter(order =>\n//                 order.eachItemsInOrder.some(item => item.size.toLowerCase() === sizeFilter.toLowerCase())\n//             );\n//         }\n//         let sortedOrders = [...filteredOrders];\n//         if (sortFunction === \"totalPrice\") {\n//             sortedOrders.sort((a, b) => a.totalPrice - b.totalPrice);\n//         } else if (sortFunction === \"name\") {\n//             sortedOrders = filteredOrders;\n//         }\n//         return (\n//             <>\n//                 {localStorage.accessLevel > ACCESS_LEVEL_GUEST ? (\n//                     <div>\n//                         <NavigationBar />\n//                         <h2>Ordered Items</h2>\n//                         <input\n//                             type=\"text\"\n//                             placeholder=\"Search...\"\n//                             value={searchQuery}\n//                             onChange={this.handleSearchChange}\n//                         />\n//                         <div className=\"sortInViewPurchaseHistory\">\n//                             <select value={sortFunction} onChange={(e) => {\n//                                 if (e.target.value === 'totalPrice') {\n//                                     this.handleSortByTotalPrice();\n//                                 } else if (e.target.value === 'name') {\n//                                     this.handleSortByDefault(); // Handle default sorting option\n//                                 }\n//                             }}>\n//                                 <option value=\"name\">Default Sorting</option>\n//                                 <option value=\"totalPrice\">Sort by Total Price</option>\n//                             </select>\n//                         </div>\n//                         <div>\n//                             {/* <h2>Filter by Size:</h2> */}\n//                             <select value={sizeFilter} onChange={this.handleSizeFilterChange}>\n//                                 <option value=\"\">All Sizes</option>\n//                                 <option value=\"XS\">XS</option>\n//                                 <option value=\"S\">S</option>\n//                                 <option value=\"M\">M</option>\n//                                 <option value=\"L\">L</option>\n//                                 <option value=\"XL\">XL</option>\n//                             </select>\n//                         </div>\n//                         {this.state.allOrders.length === 0 ? <h4>The User didn't purchase anything yet</h4>\n//                             :\n//                             <div>\n//                                 {sortedOrders.map(order => (\n//                                     <div key={order.orderId}>\n//                                         <h3>Order ID: {order.orderId}</h3>\n//                                         <table>\n//                                             <thead>\n//                                                 <tr>\n//                                                     <th>Photo</th>\n//                                                     <th>Photo</th>\n//                                                     <th>Name</th>\n//                                                     <th>Price</th>\n//                                                     <th>Size</th>\n//                                                     <th>Quantity</th>\n//                                                     <th>Total Price for this t-shirt</th>\n//                                                     <th>Return</th>\n//                                                     <th>Return</th>\n//                                                 </tr>\n//                                             </thead>\n//                                             <tbody>\n//                                                 {order.eachItemsInOrder.map(item => (\n//                                                     <tr>\n//                                                         <td>{item.shirtPhotoFilename.map(photo => (\n//                                                             <img key={photo._id} className={photo._id} alt=\"\" src={`data:;base64,${photo.image}`} />\n//                                                         ))}\n//                                                         </td>\n//                                                         <td>{item.name}</td>\n//                                                         <td>{item.price}</td>\n//                                                         <td>{item.size}</td>\n//                                                         <td>{item.quantity}</td>\n//                                                         <td>{item.price * item.quantity}</td>\n//                                                         <td>\n//                                                             <button onClick={() => this.handleDelete(order.orderId, item._id, item.stock, item.quantity, item.price * item.quantity, order.refunded, order.totalPrice)}>Return Product</button>\n//                                                         </td>\n//                                                     </tr>\n//                                                 ))}\n//                                                 <tr>\n//                                                     <td >Total Of The Order Price:</td>\n//                                                     <td>{order.totalPrice}</td>\n//                                                 </tr>\n//                                             </tbody>\n//                                         </table>\n//                                     </div>\n//                                 ))}\n//                             </div>\n//                         }\n//                     </div>\n//                 ) : (\n//                     <Redirect to={\"/main\"} />\n//                 )}\n//             </>\n//         );\n//     }\n// }\nimport React, { Component } from \"react\";\nimport { Redirect, Link } from \"react-router-dom\";\nimport axios from \"axios\";\nimport NavigationBar from \"./NavigationBar\";\nimport { ACCESS_LEVEL_GUEST, ACCESS_LEVEL_ADMIN, ACCESS_LEVEL_NORMAL_USER, SERVER_HOST } from \"../config/global_constants\";\nexport default class ViewAllUsers extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleDelete = (orderId, itemId, stockBeforeReturn, itemQuantity, refundMoney, refundedMoney, totalPrice) => {\n      let newItems = [];\n      let saleObject; // Map through purchase history to find the order with the given orderId\n\n      const updatedPurchaseHistory = this.state.purchaseHistory.map(order => {\n        if (order._id === orderId) {\n          // Iterate over the items in the order\n          order.items.forEach(item => {\n            if (item.shirtID === itemId) {\n              // If the item matches the itemId, subtract the returned quantity from the item's quantity\n              item.quantity -= itemQuantity; // If the updated quantity is zero or less, don't add it to newItems\n\n              if (item.quantity > 0) {\n                newItems.push(item); // Add the updated item to newItems\n              }\n            } else {\n              newItems.push(item); // Add unchanged items to newItems\n            }\n          }); // Create the saleObject with updated refund and price\n\n          saleObject = {\n            refunded: refundedMoney + refundMoney,\n            price: totalPrice - refundMoney,\n            items: newItems // Set the newItems array\n\n          };\n        }\n\n        return order;\n      }); // Update the purchase history in the state\n\n      this.setState({\n        purchaseHistory: updatedPurchaseHistory\n      }, () => {\n        this.updateAllOrders(updatedPurchaseHistory);\n      });\n      axios.put(\"\".concat(SERVER_HOST, \"/sales/\").concat(orderId), saleObject, {\n        headers: {\n          \"authorization\": localStorage.token\n        }\n      }).then(res => {\n        // Handle success if needed\n        console.log(\"Updated Sales with ID: \".concat(orderId));\n        localStorage.removeItem(\"itemsInCart\");\n      }).catch(err => {\n        // Handle error if needed\n        console.error(\"Error updating Sales with ID: \".concat(orderId), err);\n      });\n      let shirtObject = {\n        stock: stockBeforeReturn + itemQuantity,\n        sold: false\n      };\n      axios.put(\"\".concat(SERVER_HOST, \"/shirts/\").concat(itemId), shirtObject, {\n        headers: {\n          \"authorization\": localStorage.token\n        }\n      }).then(res => {\n        // Handle success if needed\n        console.log(\"Stock updated for shirt with ID: \".concat(itemId));\n        localStorage.removeItem(\"itemsInCart\");\n      }).catch(err => {\n        // Handle error if needed\n        console.error(\"Error updating stock for shirt with ID: \".concat(itemId), err);\n      });\n    };\n\n    this.updateAllOrders = purchaseHistory => {\n      let allOrders = [];\n      purchaseHistory.forEach((itemsInArray, index) => {\n        let eachItemsInOrder = [];\n        let totalPrice = 0; // Initialize total price for the order\n\n        itemsInArray.items.forEach(item => {\n          // Fetch shirt details and calculate total price for each item\n          axios.get(\"\".concat(SERVER_HOST, \"/shirts/\").concat(item.shirtID), {\n            headers: {\n              \"authorization\": localStorage.token\n            }\n          }).then(res => {\n            const updatedItem = _objectSpread({}, res.data, {\n              quantity: item.quantity\n            });\n\n            eachItemsInOrder.push(updatedItem); // Check if all items are fetched\n\n            if (eachItemsInOrder.length === itemsInArray.items.length) {\n              // Add the price of the item to the total price\n              eachItemsInOrder.forEach(item => totalPrice += item.price * item.quantity); // Push the order details to the allOrders array\n\n              allOrders.push({\n                orderId: itemsInArray._id,\n                refunded: itemsInArray.refunded,\n                eachItemsInOrder: eachItemsInOrder,\n                totalPrice: totalPrice\n              }); // Update state after all items are fetched\n\n              this.setState({\n                allOrders: allOrders\n              }, () => {\n                // Call loadShirtPhotos() after updating state\n                this.loadShirtPhotos();\n              });\n            }\n          }).catch(err => {\n            console.error(\"Error fetching shirt data:\", err);\n          });\n        });\n      });\n    };\n\n    this.handleSearchChange = event => {\n      // Update search query state\n      this.setState({\n        searchQuery: event.target.value\n      }); // if (event.target.value === \"\") {\n      // Reload shirt photos when the search query is cleared\n\n      this.loadShirtPhotos(); // }\n    };\n\n    this.handleSortByTotalPrice = () => {\n      this.setState({\n        sortFunction: \"totalPrice\"\n      });\n    };\n\n    this.handleSortByDefault = () => {\n      this.setState({\n        sortFunction: \"name\"\n      }); // Set the default sorting option\n    };\n\n    this.handleSizeFilterChange = event => {\n      this.setState({\n        sizeFilter: event.target.value\n      });\n      this.loadShirtPhotos();\n    };\n\n    this.state = {\n      purchaseHistory: [],\n      eachItemsInOrder: [],\n      allOrders: [],\n      searchQuery: \"\",\n      sortFunction: \"name\",\n      sizeFilter: \"\"\n    };\n  } // componentDidMount() {\n  //     if (localStorage.accessLevel > ACCESS_LEVEL_GUEST) {\n  //         let userEmail = JSON.parse(localStorage.getItem(\"userEmail\"));\n  //         axios.get(`${SERVER_HOST}/sales/email?email=${userEmail}`)\n  //         .then(res => {\n  //             // Update purchaseHistory state\n  //             this.setState({ purchaseHistory: res.data }, () => {\n  //                 // Iterate over each item in purchase history and fetch shirt details\n  //                 this.state.purchaseHistory.forEach(itemsInArray => {\n  //                     itemsInArray.items.forEach(item => { // Changed from map to forEach\n  //                         axios.get(`${SERVER_HOST}/shirts/${item.shirtID}`, { headers: { \"authorization\": localStorage.token } })\n  //                         .then(res => {\n  //                             const updatedItem = { ...res.data, quantity: item.quantity }; // Add quantity property\n  //                             // Update eachItemsInOrder state by appending new items\n  //                             this.setState(prevState => ({\n  //                                 eachItemsInOrder: [...prevState.eachItemsInOrder, updatedItem]\n  //                             }));\n  //                         })\n  //                         .catch(err => {\n  //                             console.error(\"Error fetching shirt data:\", err);\n  //                         });\n  //                     });\n  //                 });\n  //             });\n  //         })\n  //         .catch(err => {\n  //             console.error(\"Error fetching user data:\", err);\n  //         });\n  //     }\n  // }\n  // componentDidMount() {\n  //     if (localStorage.accessLevel > ACCESS_LEVEL_GUEST) {\n  //         let userEmail = JSON.parse(localStorage.getItem(\"userEmail\"));\n  //         axios.get(`${SERVER_HOST}/sales/email?email=${userEmail}`)\n  //         .then(res => {\n  //             // Update purchaseHistory state\n  //             this.setState({ purchaseHistory: res.data }, () => {\n  //                 // Iterate over each item in purchase history\n  //                 this.state.purchaseHistory.forEach((itemsInArray, index) => {\n  //                     // Store each itemsInOrder array in a separate array\n  //                     let eachItemsInOrder = [];\n  //                     itemsInArray.items.forEach(item => {\n  //                         axios.get(`${SERVER_HOST}/shirts/${item.shirtID}`, { headers: { \"authorization\": localStorage.token } })\n  //                         .then(res => {\n  //                             const updatedItem = { ...res.data, quantity: item.quantity }; // Add quantity property\n  //                             eachItemsInOrder.push(updatedItem);\n  //                         })\n  //                         .catch(err => {\n  //                             console.error(\"Error fetching shirt data:\", err);\n  //                         });\n  //                     });\n  //                     // Push eachItemsInOrder array into allOrders array\n  //                     this.setState(prevState => ({\n  //                         allOrders: [\n  //                             ...prevState.allOrders,\n  //                             {\n  //                                 orderId: itemsInArray._id, // Store item._id into allOrders\n  //                                 eachItemsInOrder: eachItemsInOrder\n  //                             }\n  //                         ]\n  //                     }));\n  //                 });\n  //             });\n  //         })\n  //         .catch(err => {\n  //             console.error(\"Error fetching user data:\", err);\n  //         });\n  //     }\n  // }\n\n\n  componentDidMount() {\n    if (localStorage.accessLevel > ACCESS_LEVEL_GUEST) {\n      //             let userEmail;\n      //             // const currentUrl = window.location.pathname;\n      //             if(localStorage.accessLevel === ACCESS_LEVEL_NORMAL_USER){\n      //             userEmail = JSON.parse(localStorage.getItem(\"userEmail\"));\n      //             console.log(userEmail)\n      //             }else if(localStorage.accessLevel ===ACCESS_LEVEL_ADMIN){\n      //                 userEmail = this.props.match.params.email;\n      //                 console.log(userEmail)\n      //             }\n      // console.log(userEmail)\n      let userEmail = '';\n\n      if (localStorage.accessLevel > ACCESS_LEVEL_NORMAL_USER) {\n        userEmail = this.props.match.params.email;\n      } else {\n        userEmail = JSON.parse(localStorage.getItem(\"userEmail\"));\n      }\n\n      console.log(userEmail);\n      axios.get(\"\".concat(SERVER_HOST, \"/sales/email?email=\").concat(userEmail)).then(res => {\n        // Update purchase history state\n        this.setState({\n          purchaseHistory: res.data\n        }, () => {\n          // Iterate over each purchase history item\n          this.state.purchaseHistory.forEach((itemsInArray, index) => {\n            let eachItemsInOrder = [];\n            let totalPrice = 0; // Initialize total price for the order\n\n            itemsInArray.items.forEach(item => {\n              // Fetch shirt details and calculate total price for each item\n              axios.get(\"\".concat(SERVER_HOST, \"/shirts/\").concat(item.shirtID), {\n                headers: {\n                  \"authorization\": localStorage.token\n                }\n              }).then(res => {\n                const updatedItem = _objectSpread({}, res.data, {\n                  quantity: item.quantity\n                });\n\n                eachItemsInOrder.push(updatedItem); // Check if all items are fetched\n\n                if (eachItemsInOrder.length === itemsInArray.items.length) {\n                  // Add the price of the item to the total price\n                  eachItemsInOrder.map(item => totalPrice += item.price * item.quantity); // Update state after all items are fetched\n\n                  this.setState(prevState => ({\n                    allOrders: [...prevState.allOrders, {\n                      orderId: itemsInArray._id,\n                      refunded: itemsInArray.refunded,\n                      eachItemsInOrder: eachItemsInOrder,\n                      totalPrice: totalPrice\n                    }]\n                  }), () => {\n                    // Call loadShirtPhotos() after updating state\n                    this.loadShirtPhotos();\n                  });\n                }\n              }).catch(err => {\n                console.error(\"Error fetching shirt data:\", err);\n              });\n            });\n          });\n        });\n      }).catch(err => {\n        console.error(\"Error fetching user data:\", err);\n      });\n    }\n  }\n\n  loadShirtPhotos() {\n    this.state.allOrders.forEach(order => {\n      order.eachItemsInOrder.forEach(item => {\n        item.shirtPhotoFilename.forEach(photo => {\n          axios.get(\"\".concat(SERVER_HOST, \"/shirts/photo/\").concat(photo.filename)).then(res => {\n            // Update shirt photo in DOM\n            const elements = document.getElementsByClassName(photo._id);\n            Array.from(elements).forEach(element => {\n              element.src = \"data:;base64,\".concat(res.data.image);\n            });\n          }).catch(err => {\n            // Handle error\n            console.error(\"Error loading shirt photo:\", err);\n          });\n        });\n      });\n    });\n  }\n\n  render() {\n    const _this$state = this.state,\n          allOrders = _this$state.allOrders,\n          searchQuery = _this$state.searchQuery,\n          sortFunction = _this$state.sortFunction,\n          sizeFilter = _this$state.sizeFilter;\n    console.log(searchQuery);\n    let filteredOrders = allOrders.filter(order => order.eachItemsInOrder.some(item => item.name.toLowerCase().includes(searchQuery.toLowerCase())));\n\n    if (sizeFilter !== \"\") {\n      filteredOrders = filteredOrders.filter(order => order.eachItemsInOrder.some(item => item.size.toLowerCase() === sizeFilter.toLowerCase()));\n    }\n\n    let sortedOrders = [...filteredOrders];\n\n    if (sortFunction === \"totalPrice\") {\n      sortedOrders.sort((a, b) => a.totalPrice - b.totalPrice);\n    } else if (sortFunction === \"name\") {\n      sortedOrders = filteredOrders;\n    }\n\n    return React.createElement(React.Fragment, null, localStorage.accessLevel > ACCESS_LEVEL_GUEST ? React.createElement(\"div\", {\n      className: \"PurchaseHistoryPage\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 772\n      },\n      __self: this\n    }, React.createElement(NavigationBar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 773\n      },\n      __self: this\n    }), React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 774\n      },\n      __self: this\n    }, \"Ordered Items\"), React.createElement(\"div\", {\n      className: \"purchaseFunctionAndTableContainer\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 775\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"HistoryPageFunction\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 776\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"text\",\n      placeholder: \"Search...\",\n      value: searchQuery,\n      onChange: this.handleSearchChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 778\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"Historpagesortandfilter\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 784\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"sortInViewPurchaseHistory\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 785\n      },\n      __self: this\n    }, React.createElement(\"select\", {\n      value: sortFunction,\n      onChange: e => {\n        if (e.target.value === 'totalPrice') {\n          this.handleSortByTotalPrice();\n        } else if (e.target.value === 'name') {\n          this.handleSortByDefault(); // Handle default sorting option\n        }\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 786\n      },\n      __self: this\n    }, React.createElement(\"option\", {\n      value: \"name\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 793\n      },\n      __self: this\n    }, \"Default Sorting\"), React.createElement(\"option\", {\n      value: \"totalPrice\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 794\n      },\n      __self: this\n    }, \"Sort by Total Price\"))), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 798\n      },\n      __self: this\n    }, React.createElement(\"select\", {\n      value: sizeFilter,\n      onChange: this.handleSizeFilterChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 800\n      },\n      __self: this\n    }, React.createElement(\"option\", {\n      value: \"\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 801\n      },\n      __self: this\n    }, \"All Sizes\"), React.createElement(\"option\", {\n      value: \"XS\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 802\n      },\n      __self: this\n    }, \"XS\"), React.createElement(\"option\", {\n      value: \"S\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 803\n      },\n      __self: this\n    }, \"S\"), React.createElement(\"option\", {\n      value: \"M\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 804\n      },\n      __self: this\n    }, \"M\"), React.createElement(\"option\", {\n      value: \"L\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 805\n      },\n      __self: this\n    }, \"L\"), React.createElement(\"option\", {\n      value: \"XL\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 806\n      },\n      __self: this\n    }, \"XL\"))))), this.state.allOrders.length === 0 ? React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 812\n      },\n      __self: this\n    }, \"The User didn't purchase anything yet\") : React.createElement(\"div\", {\n      className: \"orderContainer\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 815\n      },\n      __self: this\n    }, sortedOrders.map(order => React.createElement(\"div\", {\n      key: order.orderId,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 817\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      className: \"OrderId\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 818\n      },\n      __self: this\n    }, \"Order ID- \", order.orderId), React.createElement(\"table\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 819\n      },\n      __self: this\n    }, React.createElement(\"thead\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 820\n      },\n      __self: this\n    }, React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 821\n      },\n      __self: this\n    }, React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 822\n      },\n      __self: this\n    }, \"Photo\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 823\n      },\n      __self: this\n    }, \"Name\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 824\n      },\n      __self: this\n    }, \"Price\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 825\n      },\n      __self: this\n    }, \"Size\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 826\n      },\n      __self: this\n    }, \"Quantity\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 827\n      },\n      __self: this\n    }, \"Total Price for this t-shirt\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 828\n      },\n      __self: this\n    }, \"Return\"))), React.createElement(\"tbody\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 831\n      },\n      __self: this\n    }, order.eachItemsInOrder.map(item => React.createElement(\"tr\", {\n      key: item._id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 833\n      },\n      __self: this\n    }, React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 834\n      },\n      __self: this\n    }, item.shirtPhotoFilename.map(photo => React.createElement(\"img\", {\n      key: photo._id,\n      className: photo._id,\n      alt: \"\",\n      src: \"data:;base64,\".concat(photo.image),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 835\n      },\n      __self: this\n    }))), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 838\n      },\n      __self: this\n    }, item.name), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 839\n      },\n      __self: this\n    }, item.price), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 840\n      },\n      __self: this\n    }, item.size), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 841\n      },\n      __self: this\n    }, item.quantity), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 842\n      },\n      __self: this\n    }, item.price * item.quantity), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 843\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      className: \"returnButton\",\n      onClick: () => this.handleDelete(order.orderId, item._id, item.stock, item.quantity, item.price * item.quantity, order.refunded, order.totalPrice),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 844\n      },\n      __self: this\n    }, \"Return Product\")))), React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 848\n      },\n      __self: this\n    }, React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 849\n      },\n      __self: this\n    }, \"Total Of The Order Price:\"), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 850\n      },\n      __self: this\n    }, \"\\u20AC:\", order.totalPrice))))))))) : React.createElement(Redirect, {\n      to: \"/main\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 862\n      },\n      __self: this\n    }));\n  }\n\n}","map":{"version":3,"sources":["/Users/xhanhan/Desktop/CA Ecommerce/ecommerce_CA/client/src/components/ViewPurchaseHistory.js"],"names":["React","Component","Redirect","Link","axios","NavigationBar","ACCESS_LEVEL_GUEST","ACCESS_LEVEL_ADMIN","ACCESS_LEVEL_NORMAL_USER","SERVER_HOST","ViewAllUsers","constructor","props","handleDelete","orderId","itemId","stockBeforeReturn","itemQuantity","refundMoney","refundedMoney","totalPrice","newItems","saleObject","updatedPurchaseHistory","state","purchaseHistory","map","order","_id","items","forEach","item","shirtID","quantity","push","refunded","price","setState","updateAllOrders","put","headers","localStorage","token","then","res","console","log","removeItem","catch","err","error","shirtObject","stock","sold","allOrders","itemsInArray","index","eachItemsInOrder","get","updatedItem","data","length","loadShirtPhotos","handleSearchChange","event","searchQuery","target","value","handleSortByTotalPrice","sortFunction","handleSortByDefault","handleSizeFilterChange","sizeFilter","componentDidMount","accessLevel","userEmail","match","params","email","JSON","parse","getItem","prevState","shirtPhotoFilename","photo","filename","elements","document","getElementsByClassName","Array","from","element","src","image","render","filteredOrders","filter","some","name","toLowerCase","includes","size","sortedOrders","sort","a","b","e"],"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","sourcesContent":["// import React, { Component } from \"react\"\n// import { Redirect, Link } from \"react-router-dom\"\n\n// import axios from \"axios\"\n\n// import NavigationBar from \"./NavigationBar\"\n\n// import { ACCESS_LEVEL_GUEST, ACCESS_LEVEL_ADMIN, ACCESS_LEVEL_NORMAL_USER, SERVER_HOST } from \"../config/global_constants\"\n\n\n// export default class ViewAllUsers extends Component {\n//     constructor(props) {\n//         super(props)\n\n//         this.state = {\n//             purchaseHistory: [],\n//             eachItemsInOrder: [],\n//             allOrders: [],\n//             searchQuery: \"\",\n//             sortFunction: \"name\",\n//             sizeFilter: \"\"\n//         }\n//     }\n\n\n//     // componentDidMount() {\n//     //     if (localStorage.accessLevel > ACCESS_LEVEL_GUEST) {\n//     //         let userEmail = JSON.parse(localStorage.getItem(\"userEmail\"));\n//     //         axios.get(`${SERVER_HOST}/sales/email?email=${userEmail}`)\n//     //         .then(res => {\n//     //             // Update purchaseHistory state\n//     //             this.setState({ purchaseHistory: res.data }, () => {\n//     //                 // Iterate over each item in purchase history and fetch shirt details\n//     //                 this.state.purchaseHistory.forEach(itemsInArray => {\n//     //                     itemsInArray.items.forEach(item => { // Changed from map to forEach\n//     //                         axios.get(`${SERVER_HOST}/shirts/${item.shirtID}`, { headers: { \"authorization\": localStorage.token } })\n//     //                         .then(res => {\n//     //                             const updatedItem = { ...res.data, quantity: item.quantity }; // Add quantity property\n//     //                             // Update eachItemsInOrder state by appending new items\n//     //                             this.setState(prevState => ({\n//     //                                 eachItemsInOrder: [...prevState.eachItemsInOrder, updatedItem]\n//     //                             }));\n//     //                         })\n//     //                         .catch(err => {\n//     //                             console.error(\"Error fetching shirt data:\", err);\n//     //                         });\n//     //                     });\n//     //                 });\n//     //             });\n//     //         })\n//     //         .catch(err => {\n//     //             console.error(\"Error fetching user data:\", err);\n//     //         });\n//     //     }\n//     // }\n//     // componentDidMount() {\n//     //     if (localStorage.accessLevel > ACCESS_LEVEL_GUEST) {\n//     //         let userEmail = JSON.parse(localStorage.getItem(\"userEmail\"));\n//     //         axios.get(`${SERVER_HOST}/sales/email?email=${userEmail}`)\n//     //         .then(res => {\n//     //             // Update purchaseHistory state\n//     //             this.setState({ purchaseHistory: res.data }, () => {\n//     //                 // Iterate over each item in purchase history\n//     //                 this.state.purchaseHistory.forEach((itemsInArray, index) => {\n//     //                     // Store each itemsInOrder array in a separate array\n//     //                     let eachItemsInOrder = [];\n//     //                     itemsInArray.items.forEach(item => {\n//     //                         axios.get(`${SERVER_HOST}/shirts/${item.shirtID}`, { headers: { \"authorization\": localStorage.token } })\n//     //                         .then(res => {\n//     //                             const updatedItem = { ...res.data, quantity: item.quantity }; // Add quantity property\n//     //                             eachItemsInOrder.push(updatedItem);\n//     //                         })\n//     //                         .catch(err => {\n//     //                             console.error(\"Error fetching shirt data:\", err);\n//     //                         });\n//     //                     });\n//     //                     // Push eachItemsInOrder array into allOrders array\n//     //                     this.setState(prevState => ({\n//     //                         allOrders: [\n//     //                             ...prevState.allOrders,\n//     //                             {\n//     //                                 orderId: itemsInArray._id, // Store item._id into allOrders\n//     //                                 eachItemsInOrder: eachItemsInOrder\n//     //                             }\n//     //                         ]\n//     //                     }));\n//     //                 });\n//     //             });\n//     //         })\n//     //         .catch(err => {\n//     //             console.error(\"Error fetching user data:\", err);\n//     //         });\n//     //     }\n//     // }\n\n\n//     componentDidMount() {\n//         if (localStorage.accessLevel > ACCESS_LEVEL_GUEST) {\n//             //             let userEmail;\n//             //             // const currentUrl = window.location.pathname;\n//             //             if(localStorage.accessLevel === ACCESS_LEVEL_NORMAL_USER){\n//             //             userEmail = JSON.parse(localStorage.getItem(\"userEmail\"));\n//             //             console.log(userEmail)\n//             //             }else if(localStorage.accessLevel ===ACCESS_LEVEL_ADMIN){\n//             //                 userEmail = this.props.match.params.email;\n//             //                 console.log(userEmail)\n//             //             }\n//             // console.log(userEmail)\n//             let userEmail = '';\n//             if (localStorage.accessLevel > ACCESS_LEVEL_NORMAL_USER) {\n//                 userEmail = this.props.match.params.email;\n//             }\n//             else {\n//                 userEmail = JSON.parse(localStorage.getItem(\"userEmail\"));\n//             }\n//             console.log(\"User Email: \", userEmail);\n\n//             axios.get(`${SERVER_HOST}/sales/email?email=${userEmail}`)\n//                 .then(res => {\n//                     // Update purchase history state\n//                     this.setState({ purchaseHistory: res.data }, () => {\n//                         // Iterate over each purchase history item\n//                         this.state.purchaseHistory.forEach((itemsInArray, index) => {\n//                             let eachItemsInOrder = [];\n//                             let totalPrice = 0; // Initialize total price for the order\n//                             itemsInArray.items.forEach(item => {\n//                                 // Fetch shirt details and calculate total price for each item\n//                                 axios.get(`${SERVER_HOST}/shirts/${item.shirtID}`, { headers: { \"authorization\": localStorage.token } })\n//                                     .then(res => {\n//                                         const updatedItem = { ...res.data, quantity: item.quantity };\n//                                         eachItemsInOrder.push(updatedItem);\n\n//                                         // Check if all items are fetched\n//                                         if (eachItemsInOrder.length === itemsInArray.items.length) {\n//                                             // Add the price of the item to the total price\n//                                             eachItemsInOrder.map(item => totalPrice += item.price * item.quantity)\n\n//                                             // Update state after all items are fetched\n//                                             this.setState(prevState => ({\n//                                                 allOrders: [\n//                                                     ...prevState.allOrders,\n//                                                     {\n//                                                         orderId: itemsInArray._id,\n//                                                         refunded: itemsInArray.refunded,\n//                                                         eachItemsInOrder: eachItemsInOrder,\n//                                                         totalPrice: totalPrice\n//                                                     }\n//                                                 ]\n//                                             }), () => {\n//                                                 // Call loadShirtPhotos() after updating state\n//                                                 this.loadShirtPhotos();\n//                                             });\n//                                         }\n//                                     })\n//                                     .catch(err => {\n//                                         console.error(\"Error fetching shirt data:\", err);\n//                                     });\n//                             });\n//                         });\n//                     });\n//                 })\n//                 .catch(err => {\n//                     console.error(\"Error fetching user data:\", err);\n//                 });\n//         }\n//     }\n\n//     loadShirtPhotos() {\n//         this.state.allOrders.forEach(order => {\n//             order.eachItemsInOrder.forEach(item => {\n//                 item.shirtPhotoFilename.forEach(photo => {\n//                     axios.get(`${SERVER_HOST}/shirts/photo/${photo.filename}`)\n//                         .then(res => {\n//                             // Update shirt photo in DOM\n//                             const elements = document.getElementsByClassName(photo._id);\n//                             Array.from(elements).forEach(element => {\n//                                 element.src = `data:;base64,${res.data.image}`;\n//                             });\n//                         })\n//                         .catch(err => {\n//                             // Handle error\n//                             console.error(\"Error loading shirt photo:\", err);\n//                         });\n\n//                 });\n//             });\n//         });\n//     }\n\n//     handleDelete = (orderId, itemId, stockBeforeReturn, itemQuantity, refundMoney, refundedMoney, totalPrice) => {\n//         let newItems = [];\n//         let saleObject;\n\n//         // Map through purchase history to find the order with the given orderId\n//         const updatedPurchaseHistory = this.state.purchaseHistory.map(order => {\n//             if (order._id === orderId) {\n//                 // Iterate over the items in the order\n//                 order.items.forEach(item => {\n//                     if (item.shirtID === itemId) {\n//                         // If the item matches the itemId, subtract the returned quantity from the item's quantity\n//                         item.quantity -= itemQuantity;\n\n//                         // If the updated quantity is zero or less, don't add it to newItems\n//                         if (item.quantity > 0) {\n//                             newItems.push(item); // Add the updated item to newItems\n//                         }\n//                     } else {\n//                         newItems.push(item); // Add unchanged items to newItems\n//                     }\n//                 });\n\n//                 // Create the saleObject with updated refund and price\n//                 saleObject = {\n//                     refunded: refundedMoney + refundMoney,\n//                     price: totalPrice - refundMoney,\n//                     items: newItems // Set the newItems array\n//                 };\n//             }\n//             return order;\n//         });\n\n//         // Update the purchase history in the state\n//         this.setState({ purchaseHistory: updatedPurchaseHistory }, () => {\n//             this.updateAllOrders(updatedPurchaseHistory);\n//         });\n\n//         axios.put(`${SERVER_HOST}/sales/${orderId}`, saleObject, { headers: { \"authorization\": localStorage.token } })\n//             .then(res => {\n//                 // Handle success if needed\n//                 console.log(`Updated Sales with ID: ${orderId}`);\n//                 localStorage.removeItem(\"itemsInCart\");\n//             })\n//             .catch(err => {\n//                 // Handle error if needed\n//                 console.error(`Error updating Sales with ID: ${orderId}`, err);\n//             });\n\n//         let shirtObject = {\n//             stock: stockBeforeReturn + itemQuantity,\n//             sold: false\n//         };\n//         axios.put(`${SERVER_HOST}/shirts/${itemId}`, shirtObject, { headers: { \"authorization\": localStorage.token } })\n//             .then(res => {\n//                 // Handle success if needed\n//                 console.log(`Stock updated for shirt with ID: ${itemId}`);\n//                 localStorage.removeItem(\"itemsInCart\");\n//             })\n//             .catch(err => {\n//                 // Handle error if needed\n//                 console.error(`Error updating stock for shirt with ID: ${itemId}`, err);\n//             });\n//     }\n\n\n//     updateAllOrders = (purchaseHistory) => {\n//         let allOrders = [];\n//         purchaseHistory.forEach((itemsInArray, index) => {\n//             let eachItemsInOrder = [];\n//             let totalPrice = 0; // Initialize total price for the order\n//             itemsInArray.items.forEach(item => {\n//                 // Fetch shirt details and calculate total price for each item\n//                 axios.get(`${SERVER_HOST}/shirts/${item.shirtID}`, { headers: { \"authorization\": localStorage.token } })\n//                     .then(res => {\n//                         const updatedItem = { ...res.data, quantity: item.quantity };\n//                         eachItemsInOrder.push(updatedItem);\n\n//                         // Check if all items are fetched\n//                         if (eachItemsInOrder.length === itemsInArray.items.length) {\n//                             // Add the price of the item to the total price\n//                             eachItemsInOrder.forEach(item => totalPrice += item.price * item.quantity);\n\n//                             // Push the order details to the allOrders array\n//                             allOrders.push({\n//                                 orderId: itemsInArray._id,\n//                                 refunded: itemsInArray.refunded,\n//                                 eachItemsInOrder: eachItemsInOrder,\n//                                 totalPrice: totalPrice\n//                             });\n\n//                             // Update state after all items are fetched\n//                             this.setState({ allOrders: allOrders }, () => {\n//                                 // Call loadShirtPhotos() after updating state\n//                                 this.loadShirtPhotos();\n//                             });\n//                         }\n//                     })\n//                     .catch(err => {\n//                         console.error(\"Error fetching shirt data:\", err);\n//                     });\n//             });\n//         });\n//     }\n//     handleSearchChange = (event) => {\n//         // Update search query state\n//         this.setState({ searchQuery: event.target.value });\n//         // if (event.target.value === \"\") {\n//         // Reload shirt photos when the search query is cleared\n//         this.loadShirtPhotos();\n//         // }\n//     };\n\n\n//     handleSortByTotalPrice = () => {\n//         this.setState({ sortFunction: \"totalPrice\" });\n\n//     };\n\n\n//     handleSortByDefault = () => {\n//         this.setState({ sortFunction: \"name\" }); // Set the default sorting option\n//     };\n\n//     handleSizeFilterChange = (event) => {\n//         this.setState({ sizeFilter: event.target.value });\n//         this.loadShirtPhotos();\n//     };\n\n//     render() {\n//         const { allOrders, searchQuery, sortFunction, sizeFilter } = this.state;\n//         console.log(searchQuery)\n//         console.log(\"Alloders: \", allOrders)\n//         let filteredOrders = allOrders.filter(order =>\n//             order.eachItemsInOrder.some(item => item.name.toLowerCase().includes(searchQuery.toLowerCase()))\n//         );\n\n//         if (sizeFilter !== \"\") {\n//             filteredOrders = filteredOrders.filter(order =>\n//                 order.eachItemsInOrder.some(item => item.size.toLowerCase() === sizeFilter.toLowerCase())\n//             );\n//         }\n\n//         let sortedOrders = [...filteredOrders];\n//         if (sortFunction === \"totalPrice\") {\n//             sortedOrders.sort((a, b) => a.totalPrice - b.totalPrice);\n//         } else if (sortFunction === \"name\") {\n//             sortedOrders = filteredOrders;\n//         }\n\n//         return (\n//             <>\n//                 {localStorage.accessLevel > ACCESS_LEVEL_GUEST ? (\n//                     <div>\n//                         <NavigationBar />\n//                         <h2>Ordered Items</h2>\n//                         <input\n//                             type=\"text\"\n//                             placeholder=\"Search...\"\n//                             value={searchQuery}\n//                             onChange={this.handleSearchChange}\n//                         />\n//                         <div className=\"sortInViewPurchaseHistory\">\n//                             <select value={sortFunction} onChange={(e) => {\n//                                 if (e.target.value === 'totalPrice') {\n//                                     this.handleSortByTotalPrice();\n//                                 } else if (e.target.value === 'name') {\n//                                     this.handleSortByDefault(); // Handle default sorting option\n//                                 }\n//                             }}>\n//                                 <option value=\"name\">Default Sorting</option>\n//                                 <option value=\"totalPrice\">Sort by Total Price</option>\n//                             </select>\n//                         </div>\n\n//                         <div>\n//                             {/* <h2>Filter by Size:</h2> */}\n//                             <select value={sizeFilter} onChange={this.handleSizeFilterChange}>\n//                                 <option value=\"\">All Sizes</option>\n//                                 <option value=\"XS\">XS</option>\n//                                 <option value=\"S\">S</option>\n//                                 <option value=\"M\">M</option>\n//                                 <option value=\"L\">L</option>\n//                                 <option value=\"XL\">XL</option>\n//                             </select>\n//                         </div>\n//                         {this.state.allOrders.length === 0 ? <h4>The User didn't purchase anything yet</h4>\n\n//                             :\n//                             <div>\n//                                 {sortedOrders.map(order => (\n//                                     <div key={order.orderId}>\n//                                         <h3>Order ID: {order.orderId}</h3>\n//                                         <table>\n//                                             <thead>\n//                                                 <tr>\n//                                                     <th>Photo</th>\n//                                                     <th>Photo</th>\n//                                                     <th>Name</th>\n//                                                     <th>Price</th>\n//                                                     <th>Size</th>\n//                                                     <th>Quantity</th>\n//                                                     <th>Total Price for this t-shirt</th>\n//                                                     <th>Return</th>\n//                                                     <th>Return</th>\n//                                                 </tr>\n//                                             </thead>\n//                                             <tbody>\n\n//                                                 {order.eachItemsInOrder.map(item => (\n//                                                     <tr>\n//                                                         <td>{item.shirtPhotoFilename.map(photo => (\n//                                                             <img key={photo._id} className={photo._id} alt=\"\" src={`data:;base64,${photo.image}`} />\n//                                                         ))}\n//                                                         </td>\n//                                                         <td>{item.name}</td>\n//                                                         <td>{item.price}</td>\n//                                                         <td>{item.size}</td>\n//                                                         <td>{item.quantity}</td>\n//                                                         <td>{item.price * item.quantity}</td>\n//                                                         <td>\n//                                                             <button onClick={() => this.handleDelete(order.orderId, item._id, item.stock, item.quantity, item.price * item.quantity, order.refunded, order.totalPrice)}>Return Product</button>\n//                                                         </td>\n//                                                     </tr>\n//                                                 ))}\n//                                                 <tr>\n//                                                     <td >Total Of The Order Price:</td>\n//                                                     <td>{order.totalPrice}</td>\n//                                                 </tr>\n//                                             </tbody>\n//                                         </table>\n//                                     </div>\n//                                 ))}\n//                             </div>\n\n//                         }\n//                     </div>\n//                 ) : (\n//                     <Redirect to={\"/main\"} />\n//                 )}\n//             </>\n//         );\n//     }\n// }\nimport React, { Component } from \"react\"\nimport { Redirect, Link } from \"react-router-dom\"\n\nimport axios from \"axios\"\n\nimport NavigationBar from \"./NavigationBar\"\n\nimport { ACCESS_LEVEL_GUEST, ACCESS_LEVEL_ADMIN, ACCESS_LEVEL_NORMAL_USER, SERVER_HOST } from \"../config/global_constants\"\n\n\nexport default class ViewAllUsers extends Component {\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            purchaseHistory: [],\n            eachItemsInOrder: [],\n            allOrders: [],\n            searchQuery: \"\",\n            sortFunction: \"name\",\n            sizeFilter: \"\"\n        }\n    }\n\n\n    // componentDidMount() {\n    //     if (localStorage.accessLevel > ACCESS_LEVEL_GUEST) {\n    //         let userEmail = JSON.parse(localStorage.getItem(\"userEmail\"));\n    //         axios.get(`${SERVER_HOST}/sales/email?email=${userEmail}`)\n    //         .then(res => {\n    //             // Update purchaseHistory state\n    //             this.setState({ purchaseHistory: res.data }, () => {\n    //                 // Iterate over each item in purchase history and fetch shirt details\n    //                 this.state.purchaseHistory.forEach(itemsInArray => {\n    //                     itemsInArray.items.forEach(item => { // Changed from map to forEach\n    //                         axios.get(`${SERVER_HOST}/shirts/${item.shirtID}`, { headers: { \"authorization\": localStorage.token } })\n    //                         .then(res => {\n    //                             const updatedItem = { ...res.data, quantity: item.quantity }; // Add quantity property\n    //                             // Update eachItemsInOrder state by appending new items\n    //                             this.setState(prevState => ({\n    //                                 eachItemsInOrder: [...prevState.eachItemsInOrder, updatedItem]\n    //                             }));\n    //                         })\n    //                         .catch(err => {\n    //                             console.error(\"Error fetching shirt data:\", err);\n    //                         });\n    //                     });\n    //                 });\n    //             });\n    //         })\n    //         .catch(err => {\n    //             console.error(\"Error fetching user data:\", err);\n    //         });\n    //     }\n    // }\n    // componentDidMount() {\n    //     if (localStorage.accessLevel > ACCESS_LEVEL_GUEST) {\n    //         let userEmail = JSON.parse(localStorage.getItem(\"userEmail\"));\n    //         axios.get(`${SERVER_HOST}/sales/email?email=${userEmail}`)\n    //         .then(res => {\n    //             // Update purchaseHistory state\n    //             this.setState({ purchaseHistory: res.data }, () => {\n    //                 // Iterate over each item in purchase history\n    //                 this.state.purchaseHistory.forEach((itemsInArray, index) => {\n    //                     // Store each itemsInOrder array in a separate array\n    //                     let eachItemsInOrder = [];\n    //                     itemsInArray.items.forEach(item => {\n    //                         axios.get(`${SERVER_HOST}/shirts/${item.shirtID}`, { headers: { \"authorization\": localStorage.token } })\n    //                         .then(res => {\n    //                             const updatedItem = { ...res.data, quantity: item.quantity }; // Add quantity property\n    //                             eachItemsInOrder.push(updatedItem);\n    //                         })\n    //                         .catch(err => {\n    //                             console.error(\"Error fetching shirt data:\", err);\n    //                         });\n    //                     });\n    //                     // Push eachItemsInOrder array into allOrders array\n    //                     this.setState(prevState => ({\n    //                         allOrders: [\n    //                             ...prevState.allOrders,\n    //                             {\n    //                                 orderId: itemsInArray._id, // Store item._id into allOrders\n    //                                 eachItemsInOrder: eachItemsInOrder\n    //                             }\n    //                         ]\n    //                     }));\n    //                 });\n    //             });\n    //         })\n    //         .catch(err => {\n    //             console.error(\"Error fetching user data:\", err);\n    //         });\n    //     }\n    // }\n\n\n    componentDidMount() {\n        if (localStorage.accessLevel > ACCESS_LEVEL_GUEST) {\n            //             let userEmail;\n            //             // const currentUrl = window.location.pathname;\n            //             if(localStorage.accessLevel === ACCESS_LEVEL_NORMAL_USER){\n            //             userEmail = JSON.parse(localStorage.getItem(\"userEmail\"));\n            //             console.log(userEmail)\n            //             }else if(localStorage.accessLevel ===ACCESS_LEVEL_ADMIN){\n            //                 userEmail = this.props.match.params.email;\n            //                 console.log(userEmail)\n            //             }\n            // console.log(userEmail)\n            let userEmail = '';\n            if (localStorage.accessLevel > ACCESS_LEVEL_NORMAL_USER) {\n                userEmail = this.props.match.params.email;\n            } else {\n                userEmail = JSON.parse(localStorage.getItem(\"userEmail\"));\n            }\n            console.log(userEmail);\n\n            axios.get(`${SERVER_HOST}/sales/email?email=${userEmail}`)\n                .then(res => {\n                    // Update purchase history state\n                    this.setState({ purchaseHistory: res.data }, () => {\n                        // Iterate over each purchase history item\n                        this.state.purchaseHistory.forEach((itemsInArray, index) => {\n                            let eachItemsInOrder = [];\n                            let totalPrice = 0; // Initialize total price for the order\n                            itemsInArray.items.forEach(item => {\n                                // Fetch shirt details and calculate total price for each item\n                                axios.get(`${SERVER_HOST}/shirts/${item.shirtID}`, { headers: { \"authorization\": localStorage.token } })\n                                    .then(res => {\n                                        const updatedItem = { ...res.data, quantity: item.quantity };\n                                        eachItemsInOrder.push(updatedItem);\n\n                                        // Check if all items are fetched\n                                        if (eachItemsInOrder.length === itemsInArray.items.length) {\n                                            // Add the price of the item to the total price\n                                            eachItemsInOrder.map(item => totalPrice += item.price * item.quantity)\n\n                                            // Update state after all items are fetched\n                                            this.setState(prevState => ({\n                                                allOrders: [\n                                                    ...prevState.allOrders,\n                                                    {\n                                                        orderId: itemsInArray._id,\n                                                        refunded: itemsInArray.refunded,\n                                                        eachItemsInOrder: eachItemsInOrder,\n                                                        totalPrice: totalPrice\n                                                    }\n                                                ]\n                                            }), () => {\n                                                // Call loadShirtPhotos() after updating state\n                                                this.loadShirtPhotos();\n                                            });\n                                        }\n                                    })\n                                    .catch(err => {\n                                        console.error(\"Error fetching shirt data:\", err);\n                                    });\n                            });\n                        });\n                    });\n                })\n                .catch(err => {\n                    console.error(\"Error fetching user data:\", err);\n                });\n        }\n    }\n\n    loadShirtPhotos() {\n        this.state.allOrders.forEach(order => {\n            order.eachItemsInOrder.forEach(item => {\n                item.shirtPhotoFilename.forEach(photo => {\n                    axios.get(`${SERVER_HOST}/shirts/photo/${photo.filename}`)\n                        .then(res => {\n                            // Update shirt photo in DOM\n                            const elements = document.getElementsByClassName(photo._id);\n                            Array.from(elements).forEach(element => {\n                                element.src = `data:;base64,${res.data.image}`;\n                            });\n                        })\n                        .catch(err => {\n                            // Handle error\n                            console.error(\"Error loading shirt photo:\", err);\n                        });\n\n                });\n            });\n        });\n    }\n\n    handleDelete = (orderId, itemId, stockBeforeReturn, itemQuantity, refundMoney, refundedMoney, totalPrice) => {\n        let newItems = [];\n        let saleObject;\n\n        // Map through purchase history to find the order with the given orderId\n        const updatedPurchaseHistory = this.state.purchaseHistory.map(order => {\n            if (order._id === orderId) {\n                // Iterate over the items in the order\n                order.items.forEach(item => {\n                    if (item.shirtID === itemId) {\n                        // If the item matches the itemId, subtract the returned quantity from the item's quantity\n                        item.quantity -= itemQuantity;\n\n                        // If the updated quantity is zero or less, don't add it to newItems\n                        if (item.quantity > 0) {\n                            newItems.push(item); // Add the updated item to newItems\n                        }\n                    } else {\n                        newItems.push(item); // Add unchanged items to newItems\n                    }\n                });\n\n                // Create the saleObject with updated refund and price\n                saleObject = {\n                    refunded: refundedMoney + refundMoney,\n                    price: totalPrice - refundMoney,\n                    items: newItems // Set the newItems array\n                };\n            }\n            return order;\n        });\n\n        // Update the purchase history in the state\n        this.setState({ purchaseHistory: updatedPurchaseHistory }, () => {\n            this.updateAllOrders(updatedPurchaseHistory);\n        });\n\n        axios.put(`${SERVER_HOST}/sales/${orderId}`, saleObject, { headers: { \"authorization\": localStorage.token } })\n            .then(res => {\n                // Handle success if needed\n                console.log(`Updated Sales with ID: ${orderId}`);\n                localStorage.removeItem(\"itemsInCart\");\n            })\n            .catch(err => {\n                // Handle error if needed\n                console.error(`Error updating Sales with ID: ${orderId}`, err);\n            });\n\n        let shirtObject = {\n            stock: stockBeforeReturn + itemQuantity,\n            sold: false\n        };\n        axios.put(`${SERVER_HOST}/shirts/${itemId}`, shirtObject, { headers: { \"authorization\": localStorage.token } })\n            .then(res => {\n                // Handle success if needed\n                console.log(`Stock updated for shirt with ID: ${itemId}`);\n                localStorage.removeItem(\"itemsInCart\");\n            })\n            .catch(err => {\n                // Handle error if needed\n                console.error(`Error updating stock for shirt with ID: ${itemId}`, err);\n            });\n    }\n\n\n    updateAllOrders = (purchaseHistory) => {\n        let allOrders = [];\n        purchaseHistory.forEach((itemsInArray, index) => {\n            let eachItemsInOrder = [];\n            let totalPrice = 0; // Initialize total price for the order\n            itemsInArray.items.forEach(item => {\n                // Fetch shirt details and calculate total price for each item\n                axios.get(`${SERVER_HOST}/shirts/${item.shirtID}`, { headers: { \"authorization\": localStorage.token } })\n                    .then(res => {\n                        const updatedItem = { ...res.data, quantity: item.quantity };\n                        eachItemsInOrder.push(updatedItem);\n\n                        // Check if all items are fetched\n                        if (eachItemsInOrder.length === itemsInArray.items.length) {\n                            // Add the price of the item to the total price\n                            eachItemsInOrder.forEach(item => totalPrice += item.price * item.quantity);\n\n                            // Push the order details to the allOrders array\n                            allOrders.push({\n                                orderId: itemsInArray._id,\n                                refunded: itemsInArray.refunded,\n                                eachItemsInOrder: eachItemsInOrder,\n                                totalPrice: totalPrice\n                            });\n\n                            // Update state after all items are fetched\n                            this.setState({ allOrders: allOrders }, () => {\n                                // Call loadShirtPhotos() after updating state\n                                this.loadShirtPhotos();\n                            });\n                        }\n                    })\n                    .catch(err => {\n                        console.error(\"Error fetching shirt data:\", err);\n                    });\n            });\n        });\n    }\n    handleSearchChange = (event) => {\n        // Update search query state\n        this.setState({ searchQuery: event.target.value });\n        // if (event.target.value === \"\") {\n        // Reload shirt photos when the search query is cleared\n        this.loadShirtPhotos();\n        // }\n    };\n\n\n    handleSortByTotalPrice = () => {\n        this.setState({ sortFunction: \"totalPrice\" });\n\n    };\n\n\n    handleSortByDefault = () => {\n        this.setState({ sortFunction: \"name\" }); // Set the default sorting option\n    };\n\n    handleSizeFilterChange = (event) => {\n        this.setState({ sizeFilter: event.target.value });\n        this.loadShirtPhotos();\n    };\n\n    render() {\n        const { allOrders, searchQuery, sortFunction, sizeFilter } = this.state;\n        console.log(searchQuery)\n        let filteredOrders = allOrders.filter(order =>\n            order.eachItemsInOrder.some(item => item.name.toLowerCase().includes(searchQuery.toLowerCase()))\n        );\n\n        if (sizeFilter !== \"\") {\n            filteredOrders = filteredOrders.filter(order =>\n                order.eachItemsInOrder.some(item => item.size.toLowerCase() === sizeFilter.toLowerCase())\n            );\n        }\n\n        let sortedOrders = [...filteredOrders];\n        if (sortFunction === \"totalPrice\") {\n            sortedOrders.sort((a, b) => a.totalPrice - b.totalPrice);\n        } else if (sortFunction === \"name\") {\n            sortedOrders = filteredOrders;\n        }\n\n        return (\n            <>\n                {localStorage.accessLevel > ACCESS_LEVEL_GUEST ? (\n                    <div className=\"PurchaseHistoryPage\">\n                        <NavigationBar />\n                        <h2>Ordered Items</h2>\n                        <div className=\"purchaseFunctionAndTableContainer\">\n                            <div className=\"HistoryPageFunction\">\n\n                                <input\n                                    type=\"text\"\n                                    placeholder=\"Search...\"\n                                    value={searchQuery}\n                                    onChange={this.handleSearchChange}\n                                />\n                                <div className=\"Historpagesortandfilter\">\n                                    <div className=\"sortInViewPurchaseHistory\">\n                                        <select value={sortFunction} onChange={(e) => {\n                                            if (e.target.value === 'totalPrice') {\n                                                this.handleSortByTotalPrice();\n                                            } else if (e.target.value === 'name') {\n                                                this.handleSortByDefault(); // Handle default sorting option\n                                            }\n                                        }}>\n                                            <option value=\"name\">Default Sorting</option>\n                                            <option value=\"totalPrice\">Sort by Total Price</option>\n                                        </select>\n                                    </div>\n\n                                    <div>\n                                        {/* <h2>Filter by Size:</h2> */}\n                                        <select value={sizeFilter} onChange={this.handleSizeFilterChange}>\n                                            <option value=\"\">All Sizes</option>\n                                            <option value=\"XS\">XS</option>\n                                            <option value=\"S\">S</option>\n                                            <option value=\"M\">M</option>\n                                            <option value=\"L\">L</option>\n                                            <option value=\"XL\">XL</option>\n                                        </select>\n                                    </div>\n                                </div>\n                            </div>\n\n                            {this.state.allOrders.length === 0 ? <h4>The User didn't purchase anything yet</h4>\n\n                                :\n                                <div className=\"orderContainer\">\n                                    {sortedOrders.map(order => (\n                                        <div key={order.orderId}>\n                                            <h3 className=\"OrderId\">Order ID- {order.orderId}</h3>\n                                            <table>\n                                                <thead>\n                                                    <tr>\n                                                        <th>Photo</th>\n                                                        <th>Name</th>\n                                                        <th>Price</th>\n                                                        <th>Size</th>\n                                                        <th>Quantity</th>\n                                                        <th>Total Price for this t-shirt</th>\n                                                        <th>Return</th>\n                                                    </tr>\n                                                </thead>\n                                                <tbody>\n                                                    {order.eachItemsInOrder.map(item => (\n                                                        <tr key={item._id}>\n                                                            <td>{item.shirtPhotoFilename.map(photo => (\n                                                                <img key={photo._id} className={photo._id} alt=\"\" src={`data:;base64,${photo.image}`} />\n                                                            ))}\n                                                            </td>\n                                                            <td>{item.name}</td>\n                                                            <td>{item.price}</td>\n                                                            <td>{item.size}</td>\n                                                            <td>{item.quantity}</td>\n                                                            <td>{item.price * item.quantity}</td>\n                                                            <td>\n                                                                <button className=\"returnButton\" onClick={() => this.handleDelete(order.orderId, item._id, item.stock, item.quantity, item.price * item.quantity, order.refunded, order.totalPrice)}>Return Product</button>\n                                                            </td>\n                                                        </tr>\n                                                    ))}\n                                                    <tr>\n                                                        <td>Total Of The Order Price:</td>\n                                                        <td>€:{order.totalPrice}</td>\n                                                    </tr>\n                                                </tbody>\n                                            </table>\n                                        </div>\n                                    ))}\n                                </div>\n\n                            }\n                        </div>\n                    </div>\n                ) : (\n                    <Redirect to={\"/main\"} />\n                )}\n            </>\n        );\n    }\n}"]},"metadata":{},"sourceType":"module"}