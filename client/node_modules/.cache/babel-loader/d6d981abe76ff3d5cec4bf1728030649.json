{"ast":null,"code":"var _jsxFileName = \"/Users/xhanhan/Desktop/CA Ecommerce/ecommerce_CA/client/src/components/ShoppingCart.js\";\n// import React, { Component } from \"react\"\n// import Form from \"react-bootstrap/Form\"\n// import axios from \"axios\"\n// export default class ShoppingCart extends Component {\n//     constructor(props){\n//         this.state = {\n//             items: [], \n//             totalPrice: 0 \n//         };\n//     }\n//     addItemToCart = (item) => {\n//         const updatedItems = [...this.state.items, item];\n//         const totalPrice = this.state.totalPrice + (item.price * item.quantity);\n//         this.setState({ items: updatedItems, totalPrice });\n//     };\n//     render() {\n//         const { items, totalPrice } = this.state;\n//         const { itemsInCart } = this.props.location.state;\n//         return (\n//             <div>\n//                 <h2>Shopping Cart</h2>\n//                 <ul>\n//                     {items.map((item, index) => (\n//                         <li key={index}>\n//                             {item.name} - Quantity: {item.quantity} - Price: ${item.price * item.quantity}\n//                         </li>\n//                     ))}\n//                 </ul>\n//                 <p>Total Price: ${totalPrice}</p>\n//             </div>\n//         );\n//     }\n// }\nimport React, { Component } from \"react\";\nimport Form from \"react-bootstrap/Form\";\nimport { Redirect } from \"react-router-dom\";\nimport { SANDBOX_CLIENT_ID, SERVER_HOST } from \"../config/global_constants\";\nimport PayPalMessage from \"./PayPalMessage\";\nimport { PayPalButtons, PayPalScriptProvider } from \"@paypal/react-paypal-js\";\nimport NavigationBar from \"./NavigationBar\";\nimport axios from \"axios\";\nexport default class ShoppingCart extends Component {\n  constructor(props) {\n    super(props);\n\n    this.createOrder = (data, actions) => {\n      return actions.order.create({\n        purchase_units: [{\n          amount: {\n            value: this.props.price\n          }\n        }]\n      });\n    };\n\n    this.onApprove = paymentData => {\n      axios.post(\"\".concat(SERVER_HOST, \"/sales/\").concat(paymentData.orderID, \"/\").concat(this.props.carID, \"/\").concat(this.props.price), {\n        headers: {\n          \"authorization\": localStorage.token,\n          \"Content-type\": \"multipart/form-data\"\n        }\n      }).then(res => {\n        this.setState({\n          payPalMessageType: PayPalMessage.messageType.SUCCESS,\n          payPalOrderID: paymentData.orderID,\n          redirectToPayPalMessage: true\n        });\n      }).catch(errorData => {\n        this.setState({\n          payPalMessageType: PayPalMessage.messageType.ERROR,\n          redirectToPayPalMessage: true\n        });\n      });\n    };\n\n    this.onError = errorData => {\n      this.setState({\n        payPalMessageType: PayPalMessage.messageType.ERROR,\n        redirectToPayPalMessage: true\n      });\n    };\n\n    this.onCancel = cancelData => {\n      // The user pressed the Paypal checkout popup window cancel button or closed the Paypal checkout popup window\n      this.setState({\n        payPalMessageType: PayPalMessage.messageType.CANCEL,\n        redirectToPayPalMessage: true\n      });\n    };\n\n    this.state = {\n      redirectToPayPalMessage: false,\n      payPalMessageType: null,\n      payPalOrderID: null\n    };\n  }\n\n  render() {\n    const _ref = this.props.location.state || {\n      itemsInCart: []\n    },\n          itemsInCart = _ref.itemsInCart;\n\n    let totalPrice = 0;\n    itemsInCart.forEach(item => {\n      totalPrice += item.price * item.quantity;\n    });\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    }, React.createElement(NavigationBar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    }), React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    }, \"Shopping Cart\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    }, itemsInCart.map((item, index) => React.createElement(\"li\", {\n      key: index,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }, item.name, \" - Quantity: \", item.quantity, \" - Price: \\u20AC\", item.price * item.quantity))), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    }, \"Total Price: \\u20AC\", totalPrice), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }, this.state.redirectToPayPalMessage ? React.createElement(Redirect, {\n      to: \"/PayPalMessage/\".concat(this.state.payPalMessageType, \"/\").concat(this.state.payPalOrderID),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    }) : null, React.createElement(PayPalScriptProvider, {\n      options: {\n        currency: \"EUR\",\n        \"client-id\": SANDBOX_CLIENT_ID\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    }, React.createElement(PayPalButtons, {\n      style: {\n        layout: \"horizontal\"\n      },\n      createOrder: this.createOrder,\n      onApprove: this.onApprove,\n      onError: this.onError,\n      onCancel: this.onCancel,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    }))));\n  }\n\n}","map":{"version":3,"sources":["/Users/xhanhan/Desktop/CA Ecommerce/ecommerce_CA/client/src/components/ShoppingCart.js"],"names":["React","Component","Form","Redirect","SANDBOX_CLIENT_ID","SERVER_HOST","PayPalMessage","PayPalButtons","PayPalScriptProvider","NavigationBar","axios","ShoppingCart","constructor","props","createOrder","data","actions","order","create","purchase_units","amount","value","price","onApprove","paymentData","post","orderID","carID","headers","localStorage","token","then","res","setState","payPalMessageType","messageType","SUCCESS","payPalOrderID","redirectToPayPalMessage","catch","errorData","ERROR","onError","onCancel","cancelData","CANCEL","state","render","location","itemsInCart","totalPrice","forEach","item","quantity","map","index","name","currency","layout"],"mappings":"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","sourcesContent":["// import React, { Component } from \"react\"\n// import Form from \"react-bootstrap/Form\"\n\n// import axios from \"axios\"\n\n// export default class ShoppingCart extends Component {\n//     constructor(props){\n//         this.state = {\n//             items: [], \n//             totalPrice: 0 \n//         };\n//     }\n\n//     addItemToCart = (item) => {\n//         const updatedItems = [...this.state.items, item];\n//         const totalPrice = this.state.totalPrice + (item.price * item.quantity);\n//         this.setState({ items: updatedItems, totalPrice });\n//     };\n\n//     render() {\n//         const { items, totalPrice } = this.state;\n//         const { itemsInCart } = this.props.location.state;\n\n//         return (\n//             <div>\n//                 <h2>Shopping Cart</h2>\n//                 <ul>\n//                     {items.map((item, index) => (\n//                         <li key={index}>\n//                             {item.name} - Quantity: {item.quantity} - Price: ${item.price * item.quantity}\n//                         </li>\n//                     ))}\n//                 </ul>\n//                 <p>Total Price: ${totalPrice}</p>\n//             </div>\n//         );\n//     }\n// }\n\nimport React, { Component } from \"react\";\nimport Form from \"react-bootstrap/Form\"\n\nimport { Redirect } from \"react-router-dom\"\nimport { SANDBOX_CLIENT_ID, SERVER_HOST } from \"../config/global_constants\"\nimport PayPalMessage from \"./PayPalMessage\"\nimport { PayPalButtons, PayPalScriptProvider } from \"@paypal/react-paypal-js\"\n\nimport NavigationBar from \"./NavigationBar\"\n\n\nimport axios from \"axios\"\n\nexport default class ShoppingCart extends Component {\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            redirectToPayPalMessage: false,\n            payPalMessageType: null,\n            payPalOrderID: null\n        }\n    }\n\n    createOrder = (data, actions) => {\n        return actions.order.create({ purchase_units: [{ amount: { value: this.props.price } }] })\n    }\n\n\n    onApprove = paymentData => {\n        axios.post(`${SERVER_HOST}/sales/${paymentData.orderID}/${this.props.carID}/${this.props.price}`, { headers: { \"authorization\": localStorage.token, \"Content-type\": \"multipart/form-data\" } })\n            .then(res => {\n                this.setState({\n                    payPalMessageType: PayPalMessage.messageType.SUCCESS,\n                    payPalOrderID: paymentData.orderID,\n                    redirectToPayPalMessage: true\n                })\n            })\n            .catch(errorData => {\n                this.setState({\n                    payPalMessageType: PayPalMessage.messageType.ERROR,\n                    redirectToPayPalMessage: true\n                })\n            })\n    }\n\n\n    onError = errorData => {\n        this.setState({\n            payPalMessageType: PayPalMessage.messageType.ERROR,\n            redirectToPayPalMessage: true\n        })\n    }\n\n\n    onCancel = cancelData => {\n        // The user pressed the Paypal checkout popup window cancel button or closed the Paypal checkout popup window\n        this.setState({\n            payPalMessageType: PayPalMessage.messageType.CANCEL,\n            redirectToPayPalMessage: true\n        })\n    }\n\n    render() {\n        const { itemsInCart } = this.props.location.state || { itemsInCart: [] };\n\n        let totalPrice = 0;\n        itemsInCart.forEach(item => {\n            totalPrice += item.price * item.quantity;\n        });\n\n        return (\n            <div>\n                <NavigationBar />\n                <h2>Shopping Cart</h2>\n                <ul>\n                    {itemsInCart.map((item, index) => (\n                        <li key={index}>\n                            {item.name} - Quantity: {item.quantity} - Price: €{item.price * item.quantity}\n                        </li>\n                    ))}\n                </ul>\n                <p>Total Price: €{totalPrice}</p>\n                <div>\n                    {this.state.redirectToPayPalMessage ? <Redirect to={`/PayPalMessage/${this.state.payPalMessageType}/${this.state.payPalOrderID}`} /> : null}\n\n                    <PayPalScriptProvider options={{ currency: \"EUR\", \"client-id\": SANDBOX_CLIENT_ID }}>\n                        <PayPalButtons style={{ layout: \"horizontal\" }} createOrder={this.createOrder} onApprove={this.onApprove} onError={this.onError} onCancel={this.onCancel} />\n                    </PayPalScriptProvider>\n                </div>\n            </div>\n\n\n        );\n    }\n}\n\n"]},"metadata":{},"sourceType":"module"}