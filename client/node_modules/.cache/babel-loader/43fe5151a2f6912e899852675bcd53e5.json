{"ast":null,"code":"import _defineProperty from \"C:\\\\ecommerce_CA\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"C:\\\\ecommerce_CA\\\\client\\\\src\\\\components\\\\ViewPurchaseHistory.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { Component } from \"react\";\nimport { Redirect, Link } from \"react-router-dom\";\nimport axios from \"axios\";\nimport NavigationBar from \"./NavigationBar\";\nimport { ACCESS_LEVEL_GUEST, ACCESS_LEVEL_ADMIN, ACCESS_LEVEL_NORMAL_USER, SERVER_HOST } from \"../config/global_constants\";\nexport default class ViewAllUsers extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleDelete = (orderId, itemId, stockBeforeReturn, itemQuantity, refundMoney, refundedMoney, totalPrice) => {\n      let newItems = [];\n      let saleObject; // Map through purchase history to find the order with the given orderId\n\n      const updatedPurchaseHistory = this.state.purchaseHistory.map(order => {\n        if (order._id === orderId) {\n          // Iterate over the items in the order\n          order.items.forEach(item => {\n            if (item.shirtID === itemId) {\n              // If the item matches the itemId, subtract the returned quantity from the item's quantity\n              item.quantity -= itemQuantity; // If the updated quantity is zero or less, don't add it to newItems\n\n              if (item.quantity > 0) {\n                newItems.push(item); // Add the updated item to newItems\n              }\n            } else {\n              newItems.push(item); // Add unchanged items to newItems\n            }\n          }); // Create the saleObject with updated refund and price\n\n          saleObject = {\n            refunded: refundedMoney + refundMoney,\n            price: totalPrice - refundMoney,\n            items: newItems // Set the newItems array\n\n          };\n        }\n\n        return order;\n      }); // Update the purchase history in the state\n\n      this.setState({\n        purchaseHistory: updatedPurchaseHistory\n      }, () => {\n        this.updateAllOrders(updatedPurchaseHistory);\n      });\n      axios.put(\"\".concat(SERVER_HOST, \"/sales/\").concat(orderId), saleObject, {\n        headers: {\n          \"authorization\": localStorage.token\n        }\n      }).then(res => {\n        // Handle success if needed\n        console.log(\"Updated Sales with ID: \".concat(orderId));\n        localStorage.removeItem(\"itemsInCart\");\n      }).catch(err => {\n        // Handle error if needed\n        console.error(\"Error updating Sales with ID: \".concat(orderId), err);\n      });\n      let shirtObject = {\n        stock: stockBeforeReturn + itemQuantity,\n        sold: false\n      };\n      axios.put(\"\".concat(SERVER_HOST, \"/shirts/\").concat(itemId), shirtObject, {\n        headers: {\n          \"authorization\": localStorage.token\n        }\n      }).then(res => {\n        // Handle success if needed\n        console.log(\"Stock updated for shirt with ID: \".concat(itemId));\n        localStorage.removeItem(\"itemsInCart\");\n      }).catch(err => {\n        // Handle error if needed\n        console.error(\"Error updating stock for shirt with ID: \".concat(itemId), err);\n      });\n    };\n\n    this.updateAllOrders = purchaseHistory => {\n      let allOrders = [];\n      purchaseHistory.forEach((itemsInArray, index) => {\n        let eachItemsInOrder = [];\n        let totalPrice = 0; // Initialize total price for the order\n\n        itemsInArray.items.forEach(item => {\n          // Fetch shirt details and calculate total price for each item\n          axios.get(\"\".concat(SERVER_HOST, \"/shirts/\").concat(item.shirtID), {\n            headers: {\n              \"authorization\": localStorage.token\n            }\n          }).then(res => {\n            const updatedItem = _objectSpread({}, res.data, {\n              quantity: item.quantity\n            });\n\n            eachItemsInOrder.push(updatedItem); // Check if all items are fetched\n\n            if (eachItemsInOrder.length === itemsInArray.items.length) {\n              // Add the price of the item to the total price\n              eachItemsInOrder.forEach(item => totalPrice += item.price * item.quantity); // Push the order details to the allOrders array\n\n              allOrders.push({\n                orderId: itemsInArray._id,\n                refunded: itemsInArray.refunded,\n                eachItemsInOrder: eachItemsInOrder,\n                totalPrice: totalPrice\n              }); // Update state after all items are fetched\n\n              this.setState({\n                allOrders: allOrders\n              }, () => {\n                // Call loadShirtPhotos() after updating state\n                this.loadShirtPhotos();\n              });\n            }\n          }).catch(err => {\n            console.error(\"Error fetching shirt data:\", err);\n          });\n        });\n      });\n    };\n\n    this.state = {\n      purchaseHistory: [],\n      eachItemsInOrder: [],\n      allOrders: [],\n      searchQuery: \"\",\n      sortFunction: \"name\",\n      sizeFilter: \"\"\n    };\n  } // componentDidMount() {\n  //     if (localStorage.accessLevel > ACCESS_LEVEL_GUEST) {\n  //         let userEmail = JSON.parse(localStorage.getItem(\"userEmail\"));\n  //         axios.get(`${SERVER_HOST}/sales/email?email=${userEmail}`)\n  //         .then(res => {\n  //             // Update purchaseHistory state\n  //             this.setState({ purchaseHistory: res.data }, () => {\n  //                 // Iterate over each item in purchase history and fetch shirt details\n  //                 this.state.purchaseHistory.forEach(itemsInArray => {\n  //                     itemsInArray.items.forEach(item => { // Changed from map to forEach\n  //                         axios.get(`${SERVER_HOST}/shirts/${item.shirtID}`, { headers: { \"authorization\": localStorage.token } })\n  //                         .then(res => {\n  //                             const updatedItem = { ...res.data, quantity: item.quantity }; // Add quantity property\n  //                             // Update eachItemsInOrder state by appending new items\n  //                             this.setState(prevState => ({\n  //                                 eachItemsInOrder: [...prevState.eachItemsInOrder, updatedItem]\n  //                             }));\n  //                         })\n  //                         .catch(err => {\n  //                             console.error(\"Error fetching shirt data:\", err);\n  //                         });\n  //                     });\n  //                 });\n  //             });\n  //         })\n  //         .catch(err => {\n  //             console.error(\"Error fetching user data:\", err);\n  //         });\n  //     }\n  // }\n  // componentDidMount() {\n  //     if (localStorage.accessLevel > ACCESS_LEVEL_GUEST) {\n  //         let userEmail = JSON.parse(localStorage.getItem(\"userEmail\"));\n  //         axios.get(`${SERVER_HOST}/sales/email?email=${userEmail}`)\n  //         .then(res => {\n  //             // Update purchaseHistory state\n  //             this.setState({ purchaseHistory: res.data }, () => {\n  //                 // Iterate over each item in purchase history\n  //                 this.state.purchaseHistory.forEach((itemsInArray, index) => {\n  //                     // Store each itemsInOrder array in a separate array\n  //                     let eachItemsInOrder = [];\n  //                     itemsInArray.items.forEach(item => {\n  //                         axios.get(`${SERVER_HOST}/shirts/${item.shirtID}`, { headers: { \"authorization\": localStorage.token } })\n  //                         .then(res => {\n  //                             const updatedItem = { ...res.data, quantity: item.quantity }; // Add quantity property\n  //                             eachItemsInOrder.push(updatedItem);\n  //                         })\n  //                         .catch(err => {\n  //                             console.error(\"Error fetching shirt data:\", err);\n  //                         });\n  //                     });\n  //                     // Push eachItemsInOrder array into allOrders array\n  //                     this.setState(prevState => ({\n  //                         allOrders: [\n  //                             ...prevState.allOrders,\n  //                             {\n  //                                 orderId: itemsInArray._id, // Store item._id into allOrders\n  //                                 eachItemsInOrder: eachItemsInOrder\n  //                             }\n  //                         ]\n  //                     }));\n  //                 });\n  //             });\n  //         })\n  //         .catch(err => {\n  //             console.error(\"Error fetching user data:\", err);\n  //         });\n  //     }\n  // }\n\n\n  componentDidMount() {\n    if (localStorage.accessLevel > ACCESS_LEVEL_GUEST) {\n      //             let userEmail;\n      //             // const currentUrl = window.location.pathname;\n      //             if(localStorage.accessLevel === ACCESS_LEVEL_NORMAL_USER){\n      //             userEmail = JSON.parse(localStorage.getItem(\"userEmail\"));\n      //             console.log(userEmail)\n      //             }else if(localStorage.accessLevel ===ACCESS_LEVEL_ADMIN){\n      //                 userEmail = this.props.match.params.email;\n      //                 console.log(userEmail)\n      //             }\n      // console.log(userEmail)\n      let userEmail = '';\n\n      if (localStorage.accessLevel > ACCESS_LEVEL_NORMAL_USER) {\n        userEmail = this.props.match.params.email;\n      } // else {\n      //     userEmail = JSON.parse(localStorage.getItem(\"userEmail\"));\n      // }\n      // console.log(userEmail);\n      else if (localStorage.accessLevel == ACCESS_LEVEL_ADMIN) {\n          // if (currentUrl === \"/ViewPurchaseHistory\") {\n          //     userEmail = JSON.parse(localStorage.getItem(\"userEmail\"));\n          // } else if (currentUrl.startsWith(\"/ViewPurchaseHistory/\")) {\n          //     userEmail = this.props.match.params.email;\n          // }\n          userEmail = this.props.match.params.email;\n        }\n\n      axios.get(\"\".concat(SERVER_HOST, \"/sales/email?email=\").concat(userEmail)).then(res => {\n        // Update purchase history state\n        this.setState({\n          purchaseHistory: res.data\n        }, () => {\n          // Iterate over each purchase history item\n          this.state.purchaseHistory.forEach((itemsInArray, index) => {\n            let eachItemsInOrder = [];\n            let totalPrice = 0; // Initialize total price for the order\n\n            itemsInArray.items.forEach(item => {\n              // Fetch shirt details and calculate total price for each item\n              axios.get(\"\".concat(SERVER_HOST, \"/shirts/\").concat(item.shirtID), {\n                headers: {\n                  \"authorization\": localStorage.token\n                }\n              }).then(res => {\n                const updatedItem = _objectSpread({}, res.data, {\n                  quantity: item.quantity\n                });\n\n                eachItemsInOrder.push(updatedItem); // Check if all items are fetched\n\n                if (eachItemsInOrder.length === itemsInArray.items.length) {\n                  // Add the price of the item to the total price\n                  eachItemsInOrder.map(item => totalPrice += item.price * item.quantity); // Update state after all items are fetched\n\n                  this.setState(prevState => ({\n                    allOrders: [...prevState.allOrders, {\n                      orderId: itemsInArray._id,\n                      refunded: itemsInArray.refunded,\n                      eachItemsInOrder: eachItemsInOrder,\n                      totalPrice: totalPrice\n                    }]\n                  }), () => {\n                    // Call loadShirtPhotos() after updating state\n                    this.loadShirtPhotos();\n                  });\n                }\n              }).catch(err => {\n                console.error(\"Error fetching shirt data:\", err);\n              });\n            });\n          });\n        });\n      }).catch(err => {\n        console.error(\"Error fetching user data:\", err);\n      });\n    }\n  }\n\n  loadShirtPhotos() {\n    this.state.allOrders.forEach(order => {\n      order.eachItemsInOrder.forEach(item => {\n        item.shirtPhotoFilename.forEach(photo => {\n          axios.get(\"\".concat(SERVER_HOST, \"/shirts/photo/\").concat(photo.filename)).then(res => {\n            // Update shirt photo in DOM\n            const elements = document.getElementsByClassName(photo._id);\n            Array.from(elements).forEach(element => {\n              element.src = \"data:;base64,\".concat(res.data.image);\n            });\n          }).catch(err => {\n            // Handle error\n            console.error(\"Error loading shirt photo:\", err);\n          });\n        });\n      });\n    });\n  }\n\n  render() {\n    const _this$state = this.state,\n          allOrders = _this$state.allOrders,\n          searchQuery = _this$state.searchQuery,\n          sortFunction = _this$state.sortFunction,\n          sizeFilter = _this$state.sizeFilter;\n    let filteredOrders = allOrders.filter(order => order.eachItemsInOrder.some(item => item.name.toLowerCase().includes(searchQuery.toLowerCase())));\n\n    if (sizeFilter !== \"\") {\n      filteredOrders = filteredOrders.filter(order => order.eachItemsInOrder.some(item => item.size.toLowerCase() === sizeFilter.toLowerCase()));\n    }\n\n    let sortedOrders = [...filteredOrders];\n\n    if (sortFunction === \"totalPrice\") {\n      sortedOrders.sort((a, b) => a.totalPrice - b.totalPrice);\n    } else if (sortFunction === \"name\") {\n      sortedOrders = filteredOrders;\n    }\n\n    return React.createElement(React.Fragment, null, localStorage.accessLevel > ACCESS_LEVEL_GUEST ? React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 329\n      },\n      __self: this\n    }, React.createElement(NavigationBar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 330\n      },\n      __self: this\n    }), React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 331\n      },\n      __self: this\n    }, \"Ordered Items\"), React.createElement(\"input\", {\n      type: \"text\",\n      placeholder: \"Search...\",\n      value: searchQuery,\n      onChange: this.handleSearchChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 332\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"sortInViewPurchaseHistory\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 338\n      },\n      __self: this\n    }, React.createElement(\"select\", {\n      value: sortFunction,\n      onChange: e => {\n        if (e.target.value === 'totalPrice') {\n          this.handleSortByTotalPrice();\n        } else if (e.target.value === 'name') {\n          this.handleSortByDefault(); // Handle default sorting option\n        }\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 339\n      },\n      __self: this\n    }, React.createElement(\"option\", {\n      value: \"name\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 346\n      },\n      __self: this\n    }, \"Default Sorting\"), React.createElement(\"option\", {\n      value: \"totalPrice\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 347\n      },\n      __self: this\n    }, \"Sort by Total Price\"))), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 351\n      },\n      __self: this\n    }, React.createElement(\"select\", {\n      value: sizeFilter,\n      onChange: this.handleSizeFilterChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 353\n      },\n      __self: this\n    }, React.createElement(\"option\", {\n      value: \"\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 354\n      },\n      __self: this\n    }, \"All Sizes\"), React.createElement(\"option\", {\n      value: \"XS\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 355\n      },\n      __self: this\n    }, \"XS\"), React.createElement(\"option\", {\n      value: \"S\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 356\n      },\n      __self: this\n    }, \"S\"), React.createElement(\"option\", {\n      value: \"M\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 357\n      },\n      __self: this\n    }, \"M\"), React.createElement(\"option\", {\n      value: \"L\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 358\n      },\n      __self: this\n    }, \"L\"), React.createElement(\"option\", {\n      value: \"XL\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 359\n      },\n      __self: this\n    }, \"XL\"))), this.state.allOrders.length === 0 ? React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 362\n      },\n      __self: this\n    }, \"The User didn't purchase anything yet\") : React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 365\n      },\n      __self: this\n    }, sortedOrders.map(order => React.createElement(\"div\", {\n      key: order.orderId,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 367\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 368\n      },\n      __self: this\n    }, \"Order ID: \", order.orderId), React.createElement(\"table\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 369\n      },\n      __self: this\n    }, React.createElement(\"thead\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 370\n      },\n      __self: this\n    }, React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 371\n      },\n      __self: this\n    }, React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 372\n      },\n      __self: this\n    }, \"Photo\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 373\n      },\n      __self: this\n    }, \"Name\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 374\n      },\n      __self: this\n    }, \"Price\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 375\n      },\n      __self: this\n    }, \"Size\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 376\n      },\n      __self: this\n    }, \"Quantity\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 377\n      },\n      __self: this\n    }, \"Total Price for this t-shirt\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 378\n      },\n      __self: this\n    }, \"Return\"))), React.createElement(\"tbody\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 381\n      },\n      __self: this\n    }, order.eachItemsInOrder.map(item => React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 384\n      },\n      __self: this\n    }, React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 385\n      },\n      __self: this\n    }, item.shirtPhotoFilename.map(photo => React.createElement(\"img\", {\n      key: photo._id,\n      className: photo._id,\n      alt: \"\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 386\n      },\n      __self: this\n    }))), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 389\n      },\n      __self: this\n    }, item.name), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 390\n      },\n      __self: this\n    }, item.price), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 391\n      },\n      __self: this\n    }, item.size), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 392\n      },\n      __self: this\n    }, item.quantity), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 393\n      },\n      __self: this\n    }, item.price * item.quantity), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 394\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      onClick: () => this.handleDelete(order.orderId, item._id, item.stock, item.quantity, item.price * item.quantity, order.refunded, order.totalPrice),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 395\n      },\n      __self: this\n    }, \"Return Product\")))), React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 399\n      },\n      __self: this\n    }, React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 400\n      },\n      __self: this\n    }, \"Total Of The Order Price:\"), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 401\n      },\n      __self: this\n    }, order.totalPrice)))))))) : React.createElement(Redirect, {\n      to: \"/main\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 412\n      },\n      __self: this\n    }));\n  }\n\n}","map":{"version":3,"sources":["C:\\ecommerce_CA\\client\\src\\components\\ViewPurchaseHistory.js"],"names":["React","Component","Redirect","Link","axios","NavigationBar","ACCESS_LEVEL_GUEST","ACCESS_LEVEL_ADMIN","ACCESS_LEVEL_NORMAL_USER","SERVER_HOST","ViewAllUsers","constructor","props","handleDelete","orderId","itemId","stockBeforeReturn","itemQuantity","refundMoney","refundedMoney","totalPrice","newItems","saleObject","updatedPurchaseHistory","state","purchaseHistory","map","order","_id","items","forEach","item","shirtID","quantity","push","refunded","price","setState","updateAllOrders","put","headers","localStorage","token","then","res","console","log","removeItem","catch","err","error","shirtObject","stock","sold","allOrders","itemsInArray","index","eachItemsInOrder","get","updatedItem","data","length","loadShirtPhotos","searchQuery","sortFunction","sizeFilter","componentDidMount","accessLevel","userEmail","match","params","email","prevState","shirtPhotoFilename","photo","filename","elements","document","getElementsByClassName","Array","from","element","src","image","render","filteredOrders","filter","some","name","toLowerCase","includes","size","sortedOrders","sort","a","b","handleSearchChange","e","target","value","handleSortByTotalPrice","handleSortByDefault","handleSizeFilterChange"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\"\r\nimport { Redirect, Link } from \"react-router-dom\"\r\n\r\nimport axios from \"axios\"\r\n\r\nimport NavigationBar from \"./NavigationBar\"\r\n\r\nimport { ACCESS_LEVEL_GUEST, ACCESS_LEVEL_ADMIN, ACCESS_LEVEL_NORMAL_USER, SERVER_HOST } from \"../config/global_constants\"\r\n\r\n\r\nexport default class ViewAllUsers extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            purchaseHistory: [],\r\n            eachItemsInOrder: [],\r\n            allOrders: [],\r\n            searchQuery: \"\",\r\n            sortFunction: \"name\",\r\n            sizeFilter: \"\"\r\n        }\r\n    }\r\n\r\n\r\n    // componentDidMount() {\r\n    //     if (localStorage.accessLevel > ACCESS_LEVEL_GUEST) {\r\n    //         let userEmail = JSON.parse(localStorage.getItem(\"userEmail\"));\r\n    //         axios.get(`${SERVER_HOST}/sales/email?email=${userEmail}`)\r\n    //         .then(res => {\r\n    //             // Update purchaseHistory state\r\n    //             this.setState({ purchaseHistory: res.data }, () => {\r\n    //                 // Iterate over each item in purchase history and fetch shirt details\r\n    //                 this.state.purchaseHistory.forEach(itemsInArray => {\r\n    //                     itemsInArray.items.forEach(item => { // Changed from map to forEach\r\n    //                         axios.get(`${SERVER_HOST}/shirts/${item.shirtID}`, { headers: { \"authorization\": localStorage.token } })\r\n    //                         .then(res => {\r\n    //                             const updatedItem = { ...res.data, quantity: item.quantity }; // Add quantity property\r\n    //                             // Update eachItemsInOrder state by appending new items\r\n    //                             this.setState(prevState => ({\r\n    //                                 eachItemsInOrder: [...prevState.eachItemsInOrder, updatedItem]\r\n    //                             }));\r\n    //                         })\r\n    //                         .catch(err => {\r\n    //                             console.error(\"Error fetching shirt data:\", err);\r\n    //                         });\r\n    //                     });\r\n    //                 });\r\n    //             });\r\n    //         })\r\n    //         .catch(err => {\r\n    //             console.error(\"Error fetching user data:\", err);\r\n    //         });\r\n    //     }\r\n    // }\r\n    // componentDidMount() {\r\n    //     if (localStorage.accessLevel > ACCESS_LEVEL_GUEST) {\r\n    //         let userEmail = JSON.parse(localStorage.getItem(\"userEmail\"));\r\n    //         axios.get(`${SERVER_HOST}/sales/email?email=${userEmail}`)\r\n    //         .then(res => {\r\n    //             // Update purchaseHistory state\r\n    //             this.setState({ purchaseHistory: res.data }, () => {\r\n    //                 // Iterate over each item in purchase history\r\n    //                 this.state.purchaseHistory.forEach((itemsInArray, index) => {\r\n    //                     // Store each itemsInOrder array in a separate array\r\n    //                     let eachItemsInOrder = [];\r\n    //                     itemsInArray.items.forEach(item => {\r\n    //                         axios.get(`${SERVER_HOST}/shirts/${item.shirtID}`, { headers: { \"authorization\": localStorage.token } })\r\n    //                         .then(res => {\r\n    //                             const updatedItem = { ...res.data, quantity: item.quantity }; // Add quantity property\r\n    //                             eachItemsInOrder.push(updatedItem);\r\n    //                         })\r\n    //                         .catch(err => {\r\n    //                             console.error(\"Error fetching shirt data:\", err);\r\n    //                         });\r\n    //                     });\r\n    //                     // Push eachItemsInOrder array into allOrders array\r\n    //                     this.setState(prevState => ({\r\n    //                         allOrders: [\r\n    //                             ...prevState.allOrders,\r\n    //                             {\r\n    //                                 orderId: itemsInArray._id, // Store item._id into allOrders\r\n    //                                 eachItemsInOrder: eachItemsInOrder\r\n    //                             }\r\n    //                         ]\r\n    //                     }));\r\n    //                 });\r\n    //             });\r\n    //         })\r\n    //         .catch(err => {\r\n    //             console.error(\"Error fetching user data:\", err);\r\n    //         });\r\n    //     }\r\n    // }\r\n\r\n\r\n    componentDidMount() {\r\n        if (localStorage.accessLevel > ACCESS_LEVEL_GUEST) {\r\n            //             let userEmail;\r\n            //             // const currentUrl = window.location.pathname;\r\n            //             if(localStorage.accessLevel === ACCESS_LEVEL_NORMAL_USER){\r\n            //             userEmail = JSON.parse(localStorage.getItem(\"userEmail\"));\r\n            //             console.log(userEmail)\r\n            //             }else if(localStorage.accessLevel ===ACCESS_LEVEL_ADMIN){\r\n            //                 userEmail = this.props.match.params.email;\r\n            //                 console.log(userEmail)\r\n            //             }\r\n            // console.log(userEmail)\r\n            let userEmail = '';\r\n            if (localStorage.accessLevel > ACCESS_LEVEL_NORMAL_USER) {\r\n                userEmail = this.props.match.params.email;\r\n            }\r\n            // else {\r\n            //     userEmail = JSON.parse(localStorage.getItem(\"userEmail\"));\r\n            // }\r\n            // console.log(userEmail);\r\n            else if (localStorage.accessLevel == ACCESS_LEVEL_ADMIN) {\r\n                // if (currentUrl === \"/ViewPurchaseHistory\") {\r\n                //     userEmail = JSON.parse(localStorage.getItem(\"userEmail\"));\r\n                // } else if (currentUrl.startsWith(\"/ViewPurchaseHistory/\")) {\r\n                //     userEmail = this.props.match.params.email;\r\n                // }\r\n                userEmail = this.props.match.params.email;\r\n            }\r\n\r\n            axios.get(`${SERVER_HOST}/sales/email?email=${userEmail}`)\r\n                .then(res => {\r\n                    // Update purchase history state\r\n                    this.setState({ purchaseHistory: res.data }, () => {\r\n                        // Iterate over each purchase history item\r\n                        this.state.purchaseHistory.forEach((itemsInArray, index) => {\r\n                            let eachItemsInOrder = [];\r\n                            let totalPrice = 0; // Initialize total price for the order\r\n                            itemsInArray.items.forEach(item => {\r\n                                // Fetch shirt details and calculate total price for each item\r\n                                axios.get(`${SERVER_HOST}/shirts/${item.shirtID}`, { headers: { \"authorization\": localStorage.token } })\r\n                                    .then(res => {\r\n                                        const updatedItem = { ...res.data, quantity: item.quantity };\r\n                                        eachItemsInOrder.push(updatedItem);\r\n\r\n                                        // Check if all items are fetched\r\n                                        if (eachItemsInOrder.length === itemsInArray.items.length) {\r\n                                            // Add the price of the item to the total price\r\n                                            eachItemsInOrder.map(item => totalPrice += item.price * item.quantity)\r\n\r\n                                            // Update state after all items are fetched\r\n                                            this.setState(prevState => ({\r\n                                                allOrders: [\r\n                                                    ...prevState.allOrders,\r\n                                                    {\r\n                                                        orderId: itemsInArray._id,\r\n                                                        refunded: itemsInArray.refunded,\r\n                                                        eachItemsInOrder: eachItemsInOrder,\r\n                                                        totalPrice: totalPrice\r\n                                                    }\r\n                                                ]\r\n                                            }), () => {\r\n                                                // Call loadShirtPhotos() after updating state\r\n                                                this.loadShirtPhotos();\r\n                                            });\r\n                                        }\r\n                                    })\r\n                                    .catch(err => {\r\n                                        console.error(\"Error fetching shirt data:\", err);\r\n                                    });\r\n                            });\r\n                        });\r\n                    });\r\n                })\r\n                .catch(err => {\r\n                    console.error(\"Error fetching user data:\", err);\r\n                });\r\n        }\r\n    }\r\n\r\n    loadShirtPhotos() {\r\n        this.state.allOrders.forEach(order => {\r\n            order.eachItemsInOrder.forEach(item => {\r\n                item.shirtPhotoFilename.forEach(photo => {\r\n                    axios.get(`${SERVER_HOST}/shirts/photo/${photo.filename}`)\r\n                        .then(res => {\r\n                            // Update shirt photo in DOM\r\n                            const elements = document.getElementsByClassName(photo._id);\r\n                            Array.from(elements).forEach(element => {\r\n                                element.src = `data:;base64,${res.data.image}`;\r\n                            });\r\n                        })\r\n                        .catch(err => {\r\n                            // Handle error\r\n                            console.error(\"Error loading shirt photo:\", err);\r\n                        });\r\n\r\n                });\r\n            });\r\n        });\r\n    }\r\n\r\n    handleDelete = (orderId, itemId, stockBeforeReturn, itemQuantity, refundMoney, refundedMoney, totalPrice) => {\r\n        let newItems = [];\r\n        let saleObject;\r\n\r\n        // Map through purchase history to find the order with the given orderId\r\n        const updatedPurchaseHistory = this.state.purchaseHistory.map(order => {\r\n            if (order._id === orderId) {\r\n                // Iterate over the items in the order\r\n                order.items.forEach(item => {\r\n                    if (item.shirtID === itemId) {\r\n                        // If the item matches the itemId, subtract the returned quantity from the item's quantity\r\n                        item.quantity -= itemQuantity;\r\n\r\n                        // If the updated quantity is zero or less, don't add it to newItems\r\n                        if (item.quantity > 0) {\r\n                            newItems.push(item); // Add the updated item to newItems\r\n                        }\r\n                    } else {\r\n                        newItems.push(item); // Add unchanged items to newItems\r\n                    }\r\n                });\r\n\r\n                // Create the saleObject with updated refund and price\r\n                saleObject = {\r\n                    refunded: refundedMoney + refundMoney,\r\n                    price: totalPrice - refundMoney,\r\n                    items: newItems // Set the newItems array\r\n                };\r\n            }\r\n            return order;\r\n        });\r\n\r\n        // Update the purchase history in the state\r\n        this.setState({ purchaseHistory: updatedPurchaseHistory }, () => {\r\n            this.updateAllOrders(updatedPurchaseHistory);\r\n        });\r\n\r\n        axios.put(`${SERVER_HOST}/sales/${orderId}`, saleObject, { headers: { \"authorization\": localStorage.token } })\r\n            .then(res => {\r\n                // Handle success if needed\r\n                console.log(`Updated Sales with ID: ${orderId}`);\r\n                localStorage.removeItem(\"itemsInCart\");\r\n            })\r\n            .catch(err => {\r\n                // Handle error if needed\r\n                console.error(`Error updating Sales with ID: ${orderId}`, err);\r\n            });\r\n\r\n        let shirtObject = {\r\n            stock: stockBeforeReturn + itemQuantity,\r\n            sold: false\r\n        };\r\n        axios.put(`${SERVER_HOST}/shirts/${itemId}`, shirtObject, { headers: { \"authorization\": localStorage.token } })\r\n            .then(res => {\r\n                // Handle success if needed\r\n                console.log(`Stock updated for shirt with ID: ${itemId}`);\r\n                localStorage.removeItem(\"itemsInCart\");\r\n            })\r\n            .catch(err => {\r\n                // Handle error if needed\r\n                console.error(`Error updating stock for shirt with ID: ${itemId}`, err);\r\n            });\r\n    }\r\n\r\n\r\n    updateAllOrders = (purchaseHistory) => {\r\n        let allOrders = [];\r\n        purchaseHistory.forEach((itemsInArray, index) => {\r\n            let eachItemsInOrder = [];\r\n            let totalPrice = 0; // Initialize total price for the order\r\n            itemsInArray.items.forEach(item => {\r\n                // Fetch shirt details and calculate total price for each item\r\n                axios.get(`${SERVER_HOST}/shirts/${item.shirtID}`, { headers: { \"authorization\": localStorage.token } })\r\n                    .then(res => {\r\n                        const updatedItem = { ...res.data, quantity: item.quantity };\r\n                        eachItemsInOrder.push(updatedItem);\r\n\r\n                        // Check if all items are fetched\r\n                        if (eachItemsInOrder.length === itemsInArray.items.length) {\r\n                            // Add the price of the item to the total price\r\n                            eachItemsInOrder.forEach(item => totalPrice += item.price * item.quantity);\r\n\r\n                            // Push the order details to the allOrders array\r\n                            allOrders.push({\r\n                                orderId: itemsInArray._id,\r\n                                refunded: itemsInArray.refunded,\r\n                                eachItemsInOrder: eachItemsInOrder,\r\n                                totalPrice: totalPrice\r\n                            });\r\n\r\n                            // Update state after all items are fetched\r\n                            this.setState({ allOrders: allOrders }, () => {\r\n                                // Call loadShirtPhotos() after updating state\r\n                                this.loadShirtPhotos();\r\n                            });\r\n                        }\r\n                    })\r\n                    .catch(err => {\r\n                        console.error(\"Error fetching shirt data:\", err);\r\n                    });\r\n            });\r\n        });\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    render() {\r\n        const { allOrders, searchQuery, sortFunction, sizeFilter } = this.state;\r\n\r\n        let filteredOrders = allOrders.filter(order =>\r\n            order.eachItemsInOrder.some(item => item.name.toLowerCase().includes(searchQuery.toLowerCase()))\r\n        );\r\n\r\n        if (sizeFilter !== \"\") {\r\n            filteredOrders = filteredOrders.filter(order =>\r\n                order.eachItemsInOrder.some(item => item.size.toLowerCase() === sizeFilter.toLowerCase())\r\n            );\r\n        }\r\n\r\n        let sortedOrders = [...filteredOrders];\r\n        if (sortFunction === \"totalPrice\") {\r\n            sortedOrders.sort((a, b) => a.totalPrice - b.totalPrice);\r\n        } else if (sortFunction === \"name\") {\r\n            sortedOrders = filteredOrders;\r\n        }\r\n\r\n        return (\r\n            <>\r\n                {localStorage.accessLevel > ACCESS_LEVEL_GUEST ? (\r\n                    <div>\r\n                        <NavigationBar />\r\n                        <h2>Ordered Items</h2>\r\n                        <input\r\n                            type=\"text\"\r\n                            placeholder=\"Search...\"\r\n                            value={searchQuery}\r\n                            onChange={this.handleSearchChange}\r\n                        />\r\n                        <div className=\"sortInViewPurchaseHistory\">\r\n                            <select value={sortFunction} onChange={(e) => {\r\n                                if (e.target.value === 'totalPrice') {\r\n                                    this.handleSortByTotalPrice();\r\n                                } else if (e.target.value === 'name') {\r\n                                    this.handleSortByDefault(); // Handle default sorting option\r\n                                }\r\n                            }}>\r\n                                <option value=\"name\">Default Sorting</option>\r\n                                <option value=\"totalPrice\">Sort by Total Price</option>\r\n                            </select>\r\n                        </div>\r\n\r\n                        <div>\r\n                            {/* <h2>Filter by Size:</h2> */}\r\n                            <select value={sizeFilter} onChange={this.handleSizeFilterChange}>\r\n                                <option value=\"\">All Sizes</option>\r\n                                <option value=\"XS\">XS</option>\r\n                                <option value=\"S\">S</option>\r\n                                <option value=\"M\">M</option>\r\n                                <option value=\"L\">L</option>\r\n                                <option value=\"XL\">XL</option>\r\n                            </select>\r\n                        </div>\r\n                        {this.state.allOrders.length === 0 ? <h4>The User didn't purchase anything yet</h4>\r\n\r\n                            :\r\n                            <div>\r\n                                {sortedOrders.map(order => (\r\n                                    <div key={order.orderId}>\r\n                                        <h3>Order ID: {order.orderId}</h3>\r\n                                        <table>\r\n                                            <thead>\r\n                                                <tr>\r\n                                                    <th>Photo</th>\r\n                                                    <th>Name</th>\r\n                                                    <th>Price</th>\r\n                                                    <th>Size</th>\r\n                                                    <th>Quantity</th>\r\n                                                    <th>Total Price for this t-shirt</th>\r\n                                                    <th>Return</th>\r\n                                                </tr>\r\n                                            </thead>\r\n                                            <tbody>\r\n\r\n                                                {order.eachItemsInOrder.map(item => (\r\n                                                    <tr>\r\n                                                        <td>{item.shirtPhotoFilename.map(photo => (\r\n                                                            <img key={photo._id} className={photo._id} alt=\"\" />\r\n                                                        ))}\r\n                                                        </td>\r\n                                                        <td>{item.name}</td>\r\n                                                        <td>{item.price}</td>\r\n                                                        <td>{item.size}</td>\r\n                                                        <td>{item.quantity}</td>\r\n                                                        <td>{item.price * item.quantity}</td>\r\n                                                        <td>\r\n                                                            <button onClick={() => this.handleDelete(order.orderId, item._id, item.stock, item.quantity, item.price * item.quantity, order.refunded, order.totalPrice)}>Return Product</button>\r\n                                                        </td>\r\n                                                    </tr>\r\n                                                ))}\r\n                                                <tr>\r\n                                                    <td >Total Of The Order Price:</td>\r\n                                                    <td>{order.totalPrice}</td>\r\n                                                </tr>\r\n                                            </tbody>\r\n                                        </table>\r\n                                    </div>\r\n                                ))}\r\n                            </div>\r\n\r\n                        }\r\n                    </div>\r\n                ) : (\r\n                    <Redirect to={\"/main\"} />\r\n                )}\r\n            </>\r\n        );\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}