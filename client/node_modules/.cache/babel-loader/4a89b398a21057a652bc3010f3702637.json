{"ast":null,"code":"var _jsxFileName = \"/Users/xhanhan/Desktop/CA Ecommerce/ecommerce_CA/client/src/components/ShoppingCart.js\";\nimport React, { Component } from \"react\";\nimport Form from \"react-bootstrap/Form\";\nimport { Redirect } from \"react-router-dom\";\nimport { SANDBOX_CLIENT_ID, SERVER_HOST } from \"../config/global_constants\";\nimport PayPalMessage from \"./PayPalMessage\";\nimport { PayPalButtons, PayPalScriptProvider } from \"@paypal/react-paypal-js\";\nimport NavigationBar from \"./NavigationBar\";\nimport axios from \"axios\";\nexport default class ShoppingCart extends Component {\n  constructor(props) {\n    super(props);\n\n    this.createOrder = (data, actions) => {\n      return actions.order.create({\n        purchase_units: [{\n          amount: {\n            value: this.props.price\n          }\n        }]\n      });\n    };\n\n    this.onApprove = paymentData => {\n      axios.post(\"\".concat(SERVER_HOST, \"/sales/\").concat(paymentData.orderID, \"/\").concat(this.props.shirtID, \"/\").concat(this.props.price), {\n        headers: {\n          \"authorization\": localStorage.token,\n          \"Content-type\": \"multipart/form-data\"\n        }\n      }).then(res => {\n        this.setState({\n          payPalMessageType: PayPalMessage.messageType.SUCCESS,\n          payPalOrderID: paymentData.orderID,\n          redirectToPayPalMessage: true\n        });\n      }).catch(errorData => {\n        this.setState({\n          payPalMessageType: PayPalMessage.messageType.ERROR,\n          redirectToPayPalMessage: true\n        });\n      });\n    };\n\n    this.onError = errorData => {\n      this.setState({\n        payPalMessageType: PayPalMessage.messageType.ERROR,\n        redirectToPayPalMessage: true\n      });\n    };\n\n    this.onCancel = cancelData => {\n      // The user pressed the Paypal checkout popup window cancel button or closed the Paypal checkout popup window\n      this.setState({\n        payPalMessageType: PayPalMessage.messageType.CANCEL,\n        redirectToPayPalMessage: true\n      });\n    };\n\n    this.state = {\n      redirectToPayPalMessage: false,\n      payPalMessageType: null,\n      payPalOrderID: null,\n      totalPrice: 0\n    };\n  }\n\n  componentDidMount() {\n    const _ref = this.props.location.state || {\n      itemsInCart: []\n    },\n          itemsInCart = _ref.itemsInCart;\n\n    let totalPrice = 0;\n    itemsInCart.forEach(item => {\n      totalPrice += item.price * item.quantity;\n    });\n    this.setState({\n      totalPrice\n    }); // Update totalPrice in state\n  } //   createOrder = (data, actions) => {\n  //     // Return an object with the correct amount based on the total price\n  //     return actions.order.create({\n  //       purchase_units: [\n  //         {\n  //           amount: {\n  //             value: this.state.totalPrice, // Use the total price from state\n  //             currency_code: \"EUR\",\n  //           },\n  //         },\n  //       ],\n  //     });\n  //   };\n\n\n  render() {\n    const _ref2 = this.props.location.state || {\n      itemsInCart: []\n    },\n          itemsInCart = _ref2.itemsInCart; // let totalPrice = 0;\n    // itemsInCart.forEach(item => {\n    //     totalPrice += item.price * item.quantity;\n    // });\n\n\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }, React.createElement(NavigationBar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }), React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }, \"Shopping Cart\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }, itemsInCart.map((item, index) => React.createElement(\"li\", {\n      key: index,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }, item.name, \" - Quantity: \", item.quantity, \" - Price: \\u20AC\", item.price * item.quantity))), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }, \"Total Price: \\u20AC\", this.state.totalPrice), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }, this.state.redirectToPayPalMessage ? React.createElement(Redirect, {\n      to: \"/PayPalMessage/\".concat(this.state.payPalMessageType, \"/\").concat(this.state.payPalOrderID),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    }) : null, React.createElement(PayPalScriptProvider, {\n      options: {\n        currency: \"EUR\",\n        \"client-id\": SANDBOX_CLIENT_ID\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    }, React.createElement(PayPalButtons, {\n      style: {\n        layout: \"horizontal\"\n      },\n      createOrder: this.createOrder,\n      onApprove: this.onApprove,\n      onError: this.onError,\n      onCancel: this.onCancel,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    }))));\n  }\n\n}","map":{"version":3,"sources":["/Users/xhanhan/Desktop/CA Ecommerce/ecommerce_CA/client/src/components/ShoppingCart.js"],"names":["React","Component","Form","Redirect","SANDBOX_CLIENT_ID","SERVER_HOST","PayPalMessage","PayPalButtons","PayPalScriptProvider","NavigationBar","axios","ShoppingCart","constructor","props","createOrder","data","actions","order","create","purchase_units","amount","value","price","onApprove","paymentData","post","orderID","shirtID","headers","localStorage","token","then","res","setState","payPalMessageType","messageType","SUCCESS","payPalOrderID","redirectToPayPalMessage","catch","errorData","ERROR","onError","onCancel","cancelData","CANCEL","state","totalPrice","componentDidMount","location","itemsInCart","forEach","item","quantity","render","map","index","name","currency","layout"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport Form from \"react-bootstrap/Form\"\n\nimport { Redirect } from \"react-router-dom\"\nimport { SANDBOX_CLIENT_ID, SERVER_HOST } from \"../config/global_constants\"\nimport PayPalMessage from \"./PayPalMessage\"\nimport { PayPalButtons, PayPalScriptProvider } from \"@paypal/react-paypal-js\"\n\nimport NavigationBar from \"./NavigationBar\"\n\n\nimport axios from \"axios\"\n\nexport default class ShoppingCart extends Component {\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            redirectToPayPalMessage: false,\n            payPalMessageType: null,\n            payPalOrderID: null,\n            totalPrice: 0\n        }\n    }\n\n    componentDidMount() {\n        const { itemsInCart } = this.props.location.state || { itemsInCart: [] };\n        let totalPrice = 0;\n        itemsInCart.forEach((item) => {\n          totalPrice += item.price * item.quantity;\n        });\n        this.setState({ totalPrice }); // Update totalPrice in state\n      }\n\n    //   createOrder = (data, actions) => {\n    //     // Return an object with the correct amount based on the total price\n    //     return actions.order.create({\n    //       purchase_units: [\n    //         {\n    //           amount: {\n    //             value: this.state.totalPrice, // Use the total price from state\n    //             currency_code: \"EUR\",\n    //           },\n    //         },\n    //       ],\n    //     });\n    //   };\n\n      createOrder = (data, actions) => \n      {\n          return actions.order.create({purchase_units:[{amount:{value:this.props.price}}]})\n      }\n      \n      \n      onApprove = paymentData =>\n      {      \n          axios.post(`${SERVER_HOST}/sales/${paymentData.orderID}/${this.props.shirtID}/${this.props.price}`, {headers:{\"authorization\":localStorage.token, \"Content-type\": \"multipart/form-data\"}})\n          .then(res => \n          {                   \n              this.setState({payPalMessageType:PayPalMessage.messageType.SUCCESS, \n                             payPalOrderID:paymentData.orderID, \n                             redirectToPayPalMessage:true}) \n          })\n          .catch(errorData =>\n          {           \n              this.setState({payPalMessageType:PayPalMessage.messageType.ERROR, \n                             redirectToPayPalMessage:true}) \n          })\n      }\n   \n          \n      onError = errorData => \n      {\n          this.setState({payPalMessageType:PayPalMessage.messageType.ERROR, \n                         redirectToPayPalMessage:true})         \n      }\n      \n      \n      onCancel = cancelData => \n      {\n          // The user pressed the Paypal checkout popup window cancel button or closed the Paypal checkout popup window\n          this.setState({payPalMessageType:PayPalMessage.messageType.CANCEL, \n                         redirectToPayPalMessage:true})       \n      }\n\n\n    render() {\n        const { itemsInCart } = this.props.location.state || { itemsInCart: [] };\n\n        // let totalPrice = 0;\n        // itemsInCart.forEach(item => {\n        //     totalPrice += item.price * item.quantity;\n        // });\n\n\n\n        return (\n            <div>\n                <NavigationBar />\n                <h2>Shopping Cart</h2>\n                <ul>\n                    {itemsInCart.map((item, index) => (\n                        <li key={index}>\n                            {item.name} - Quantity: {item.quantity} - Price: €{item.price * item.quantity}\n                        </li>\n                    ))}\n                </ul>\n                <p>Total Price: €{this.state.totalPrice}</p>\n                <div>\n                    {this.state.redirectToPayPalMessage ? <Redirect to={`/PayPalMessage/${this.state.payPalMessageType}/${this.state.payPalOrderID}`} /> : null}\n\n                    <PayPalScriptProvider options={{ currency: \"EUR\", \"client-id\": SANDBOX_CLIENT_ID }}>\n                        <PayPalButtons style={{ layout: \"horizontal\" }} createOrder={this.createOrder} onApprove={this.onApprove} onError={this.onError} onCancel={this.onCancel} />\n                    </PayPalScriptProvider>\n                </div>\n            </div>\n            \n        );\n    }\n}\n\n"]},"metadata":{},"sourceType":"module"}