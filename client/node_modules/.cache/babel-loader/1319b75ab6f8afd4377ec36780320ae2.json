{"ast":null,"code":"import _defineProperty from \"C:\\\\nodejs_projects\\\\ecommerce_CA\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"C:\\\\nodejs_projects\\\\ecommerce_CA\\\\client\\\\src\\\\components\\\\ViewPurchaseHistory.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { Component } from \"react\";\nimport { Redirect, Link } from \"react-router-dom\";\nimport axios from \"axios\";\nimport NavigationBar from \"./NavigationBar\";\nimport { ACCESS_LEVEL_GUEST, ACCESS_LEVEL_ADMIN, ACCESS_LEVEL_NORMAL_USER, SERVER_HOST } from \"../config/global_constants\";\nexport default class ViewAllUsers extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleDelete = (orderId, itemId, stockBeforeReturn, itemQuantity, refundMoney, refundedMoney, totalPrice) => {\n      let newItems = [];\n      let saleObject; // Map through purchase history to find the order with the given orderId\n\n      const updatedPurchaseHistory = this.state.purchaseHistory.map(order => {\n        if (order._id === orderId) {\n          // Iterate over the items in the order\n          order.items.forEach(item => {\n            if (item.shirtID === itemId) {\n              // If the item matches the itemId, subtract the returned quantity from the item's quantity\n              item.quantity -= itemQuantity; // If the updated quantity is zero or less, don't add it to newItems\n\n              if (item.quantity > 0) {\n                newItems.push(item); // Add the updated item to newItems\n              }\n            } else {\n              newItems.push(item); // Add unchanged items to newItems\n            }\n          }); // Create the saleObject with updated refund and price\n\n          saleObject = {\n            refunded: refundedMoney + refundMoney,\n            price: totalPrice - refundMoney,\n            items: newItems // Set the newItems array\n\n          };\n        }\n\n        return order;\n      }); // Update the purchase history in the state\n\n      this.setState({\n        purchaseHistory: updatedPurchaseHistory\n      }, () => {\n        this.updateAllOrders(updatedPurchaseHistory);\n      });\n      axios.put(\"\".concat(SERVER_HOST, \"/sales/\").concat(orderId), saleObject, {\n        headers: {\n          \"authorization\": localStorage.token\n        }\n      }).then(res => {\n        // Handle success if needed\n        console.log(\"Updated Sales with ID: \".concat(orderId));\n        localStorage.removeItem(\"itemsInCart\");\n      }).catch(err => {\n        // Handle error if needed\n        console.error(\"Error updating Sales with ID: \".concat(orderId), err);\n      });\n      let shirtObject = {\n        stock: stockBeforeReturn + itemQuantity,\n        sold: false\n      };\n      axios.put(\"\".concat(SERVER_HOST, \"/shirts/\").concat(itemId), shirtObject, {\n        headers: {\n          \"authorization\": localStorage.token\n        }\n      }).then(res => {\n        // Handle success if needed\n        console.log(\"Stock updated for shirt with ID: \".concat(itemId));\n        localStorage.removeItem(\"itemsInCart\");\n      }).catch(err => {\n        // Handle error if needed\n        console.error(\"Error updating stock for shirt with ID: \".concat(itemId), err);\n      });\n    };\n\n    this.updateAllOrders = purchaseHistory => {\n      let allOrders = [];\n      purchaseHistory.forEach((itemsInArray, index) => {\n        let eachItemsInOrder = [];\n        let totalPrice = 0; // Initialize total price for the order\n\n        itemsInArray.items.forEach(item => {\n          // Fetch shirt details and calculate total price for each item\n          axios.get(\"\".concat(SERVER_HOST, \"/shirts/\").concat(item.shirtID), {\n            headers: {\n              \"authorization\": localStorage.token\n            }\n          }).then(res => {\n            const updatedItem = _objectSpread({}, res.data, {\n              quantity: item.quantity\n            });\n\n            eachItemsInOrder.push(updatedItem); // Check if all items are fetched\n\n            if (eachItemsInOrder.length === itemsInArray.items.length) {\n              // Add the price of the item to the total price\n              eachItemsInOrder.forEach(item => totalPrice += item.price * item.quantity); // Push the order details to the allOrders array\n\n              allOrders.push({\n                orderId: itemsInArray._id,\n                refunded: itemsInArray.refunded,\n                eachItemsInOrder: eachItemsInOrder,\n                totalPrice: totalPrice\n              }); // Update state after all items are fetched\n\n              this.setState({\n                allOrders: allOrders\n              }, () => {// Call loadShirtPhotos() after updating state\n                // this.loadShirtPhotos();\n              });\n            }\n          }).catch(err => {\n            console.error(\"Error fetching shirt data:\", err);\n          });\n        });\n      });\n    };\n\n    this.state = {\n      purchaseHistory: [],\n      eachItemsInOrder: [],\n      allOrders: []\n    };\n  } // componentDidMount() {\n  //     if (localStorage.accessLevel > ACCESS_LEVEL_GUEST) {\n  //         let userEmail = JSON.parse(localStorage.getItem(\"userEmail\"));\n  //         axios.get(`${SERVER_HOST}/sales/email?email=${userEmail}`)\n  //         .then(res => {\n  //             // Update purchaseHistory state\n  //             this.setState({ purchaseHistory: res.data }, () => {\n  //                 // Iterate over each item in purchase history and fetch shirt details\n  //                 this.state.purchaseHistory.forEach(itemsInArray => {\n  //                     itemsInArray.items.forEach(item => { // Changed from map to forEach\n  //                         axios.get(`${SERVER_HOST}/shirts/${item.shirtID}`, { headers: { \"authorization\": localStorage.token } })\n  //                         .then(res => {\n  //                             const updatedItem = { ...res.data, quantity: item.quantity }; // Add quantity property\n  //                             // Update eachItemsInOrder state by appending new items\n  //                             this.setState(prevState => ({\n  //                                 eachItemsInOrder: [...prevState.eachItemsInOrder, updatedItem]\n  //                             }));\n  //                         })\n  //                         .catch(err => {\n  //                             console.error(\"Error fetching shirt data:\", err);\n  //                         });\n  //                     });\n  //                 });\n  //             });\n  //         })\n  //         .catch(err => {\n  //             console.error(\"Error fetching user data:\", err);\n  //         });\n  //     }\n  // }\n  // componentDidMount() {\n  //     if (localStorage.accessLevel > ACCESS_LEVEL_GUEST) {\n  //         let userEmail = JSON.parse(localStorage.getItem(\"userEmail\"));\n  //         axios.get(`${SERVER_HOST}/sales/email?email=${userEmail}`)\n  //         .then(res => {\n  //             // Update purchaseHistory state\n  //             this.setState({ purchaseHistory: res.data }, () => {\n  //                 // Iterate over each item in purchase history\n  //                 this.state.purchaseHistory.forEach((itemsInArray, index) => {\n  //                     // Store each itemsInOrder array in a separate array\n  //                     let eachItemsInOrder = [];\n  //                     itemsInArray.items.forEach(item => {\n  //                         axios.get(`${SERVER_HOST}/shirts/${item.shirtID}`, { headers: { \"authorization\": localStorage.token } })\n  //                         .then(res => {\n  //                             const updatedItem = { ...res.data, quantity: item.quantity }; // Add quantity property\n  //                             eachItemsInOrder.push(updatedItem);\n  //                         })\n  //                         .catch(err => {\n  //                             console.error(\"Error fetching shirt data:\", err);\n  //                         });\n  //                     });\n  //                     // Push eachItemsInOrder array into allOrders array\n  //                     this.setState(prevState => ({\n  //                         allOrders: [\n  //                             ...prevState.allOrders,\n  //                             {\n  //                                 orderId: itemsInArray._id, // Store item._id into allOrders\n  //                                 eachItemsInOrder: eachItemsInOrder\n  //                             }\n  //                         ]\n  //                     }));\n  //                 });\n  //             });\n  //         })\n  //         .catch(err => {\n  //             console.error(\"Error fetching user data:\", err);\n  //         });\n  //     }\n  // }\n\n\n  componentDidMount() {\n    if (localStorage.accessLevel > ACCESS_LEVEL_GUEST) {\n      let userEmail; // const currentUrl = window.location.pathname;\n\n      if (localStorage.accessLevel == ACCESS_LEVEL_NORMAL_USER) {\n        userEmail = JSON.parse(localStorage.getItem(\"userEmail\"));\n      } else if (localStorage.accessLevel == ACCESS_LEVEL_ADMIN) {\n        // if (currentUrl === \"/ViewPurchaseHistory\") {\n        //     userEmail = JSON.parse(localStorage.getItem(\"userEmail\"));\n        // } else if (currentUrl.startsWith(\"/ViewPurchaseHistory/\")) {\n        //     userEmail = this.props.match.params.email;\n        // }\n        userEmail = this.props.match.params.email;\n      }\n\n      axios.get(\"\".concat(SERVER_HOST, \"/sales/email?email=\").concat(userEmail)).then(res => {\n        // Update purchase history state\n        this.setState({\n          purchaseHistory: res.data\n        }, () => {\n          // this.updateAllOrders(this.state.purchaseHistory);\n          // Iterate over each purchase history item\n          this.state.purchaseHistory.forEach((itemsInArray, index) => {\n            let eachItemsInOrder = [];\n            let totalPrice = 0; // Initialize total price for the order\n\n            itemsInArray.items.forEach(item => {\n              // Fetch shirt details and calculate total price for each item\n              axios.get(\"\".concat(SERVER_HOST, \"/shirts/\").concat(item.shirtID), {\n                headers: {\n                  \"authorization\": localStorage.token\n                }\n              }).then(res => {\n                const updatedItem = _objectSpread({}, res.data, {\n                  quantity: item.quantity\n                });\n\n                eachItemsInOrder.push(updatedItem); // Check if all items are fetched\n\n                if (eachItemsInOrder.length === itemsInArray.items.length) {\n                  // Add the price of the item to the total price\n                  eachItemsInOrder.map(item => totalPrice += item.price * item.quantity); // Update state after all items are fetched\n\n                  this.setState(prevState => ({\n                    allOrders: [...prevState.allOrders, {\n                      orderId: itemsInArray._id,\n                      refunded: itemsInArray.refunded,\n                      eachItemsInOrder: eachItemsInOrder,\n                      totalPrice: totalPrice\n                    }]\n                  }), () => {\n                    // Call loadShirtPhotos() after updating state\n                    this.loadShirtPhotos();\n                  });\n                }\n              }).catch(err => {\n                console.error(\"Error fetching shirt data:\", err);\n              });\n            });\n          });\n        });\n      }).catch(err => {\n        console.error(\"Error fetching user data:\", err);\n      });\n    }\n  } // loadShirtPhotos() {\n  //     this.state.allOrders.forEach(order => {\n  //         order.eachItemsInOrder.forEach(item => {\n  //             item.shirtPhotoFilename.forEach(photo => {\n  //                 axios.get(`${SERVER_HOST}/shirts/photo/${photo.filename}`)\n  //                     .then(res => {\n  //                         // Update shirt photo in DOM\n  //                         const elements = document.getElementsByClassName(photo._id);\n  //                         Array.from(elements).forEach(element => {\n  //                             element.src = `data:;base64,${res.data.image}`;\n  //                         });\n  //                     })\n  //                     .catch(err => {\n  //                         // Handle error\n  //                         console.error(\"Error loading shirt photo:\", err);\n  //                     });\n  //             });\n  //         });\n  //     });\n  // }\n\n\n  render() {\n    console.log(this.state.purchaseHistory);\n    console.log(this.state.eachItemsInOrder);\n    console.log(this.state.allOrders);\n    this.updateAllOrders(this.state.purchaseHistory); // console.log(this.state.allOrders.map(order => order.eachItemsInOrder.map(item => item.name)));\n\n    return React.createElement(React.Fragment, null, localStorage.accessLevel > ACCESS_LEVEL_GUEST ? React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 301\n      },\n      __self: this\n    }, React.createElement(NavigationBar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 302\n      },\n      __self: this\n    }), React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 303\n      },\n      __self: this\n    }, \"Ordered Items\"), this.state.allOrders.length === 0 ? React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 304\n      },\n      __self: this\n    }, \"The User didn't purchase anything yet\") : React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 307\n      },\n      __self: this\n    }, this.state.allOrders.map(order => React.createElement(\"div\", {\n      key: order.orderId,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 309\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 310\n      },\n      __self: this\n    }, \"Order ID: \", order.orderId), React.createElement(\"table\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 311\n      },\n      __self: this\n    }, React.createElement(\"thead\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 312\n      },\n      __self: this\n    }, React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 313\n      },\n      __self: this\n    }, React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 314\n      },\n      __self: this\n    }, \"Photo\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 315\n      },\n      __self: this\n    }, \"Name\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 316\n      },\n      __self: this\n    }, \"Price\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 317\n      },\n      __self: this\n    }, \"Size\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 318\n      },\n      __self: this\n    }, \"Quantity\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 319\n      },\n      __self: this\n    }, \"Total Price for this t-shirt\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 320\n      },\n      __self: this\n    }, \"Return\"))), React.createElement(\"tbody\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 323\n      },\n      __self: this\n    }, order.eachItemsInOrder.map(item => React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 326\n      },\n      __self: this\n    }, React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 328\n      },\n      __self: this\n    }, item.name), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 329\n      },\n      __self: this\n    }, item.price), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 330\n      },\n      __self: this\n    }, item.size), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 331\n      },\n      __self: this\n    }, item.quantity), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 332\n      },\n      __self: this\n    }, item.price * item.quantity), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 333\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      onClick: () => this.handleDelete(order.orderId, item._id, item.stock, item.quantity, item.price * item.quantity, order.refunded, order.totalPrice),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 334\n      },\n      __self: this\n    }, \"Return Product\")))), React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 338\n      },\n      __self: this\n    }, React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 339\n      },\n      __self: this\n    }, \"Total Of The Order Price:\"), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 340\n      },\n      __self: this\n    }, order.totalPrice)))))))) : React.createElement(Redirect, {\n      to: \"/main\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 351\n      },\n      __self: this\n    }));\n  }\n\n}","map":{"version":3,"sources":["C:\\nodejs_projects\\ecommerce_CA\\client\\src\\components\\ViewPurchaseHistory.js"],"names":["React","Component","Redirect","Link","axios","NavigationBar","ACCESS_LEVEL_GUEST","ACCESS_LEVEL_ADMIN","ACCESS_LEVEL_NORMAL_USER","SERVER_HOST","ViewAllUsers","constructor","props","handleDelete","orderId","itemId","stockBeforeReturn","itemQuantity","refundMoney","refundedMoney","totalPrice","newItems","saleObject","updatedPurchaseHistory","state","purchaseHistory","map","order","_id","items","forEach","item","shirtID","quantity","push","refunded","price","setState","updateAllOrders","put","headers","localStorage","token","then","res","console","log","removeItem","catch","err","error","shirtObject","stock","sold","allOrders","itemsInArray","index","eachItemsInOrder","get","updatedItem","data","length","componentDidMount","accessLevel","userEmail","JSON","parse","getItem","match","params","email","prevState","loadShirtPhotos","render","name","size"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\"\r\nimport { Redirect, Link } from \"react-router-dom\"\r\n\r\nimport axios from \"axios\"\r\n\r\nimport NavigationBar from \"./NavigationBar\"\r\n\r\nimport { ACCESS_LEVEL_GUEST, ACCESS_LEVEL_ADMIN, ACCESS_LEVEL_NORMAL_USER, SERVER_HOST } from \"../config/global_constants\"\r\n\r\n\r\nexport default class ViewAllUsers extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            purchaseHistory: [],\r\n\r\n            eachItemsInOrder: [],\r\n            allOrders: []\r\n\r\n        }\r\n    }\r\n\r\n\r\n    // componentDidMount() {\r\n    //     if (localStorage.accessLevel > ACCESS_LEVEL_GUEST) {\r\n    //         let userEmail = JSON.parse(localStorage.getItem(\"userEmail\"));\r\n    //         axios.get(`${SERVER_HOST}/sales/email?email=${userEmail}`)\r\n    //         .then(res => {\r\n    //             // Update purchaseHistory state\r\n    //             this.setState({ purchaseHistory: res.data }, () => {\r\n    //                 // Iterate over each item in purchase history and fetch shirt details\r\n    //                 this.state.purchaseHistory.forEach(itemsInArray => {\r\n    //                     itemsInArray.items.forEach(item => { // Changed from map to forEach\r\n    //                         axios.get(`${SERVER_HOST}/shirts/${item.shirtID}`, { headers: { \"authorization\": localStorage.token } })\r\n    //                         .then(res => {\r\n    //                             const updatedItem = { ...res.data, quantity: item.quantity }; // Add quantity property\r\n    //                             // Update eachItemsInOrder state by appending new items\r\n    //                             this.setState(prevState => ({\r\n    //                                 eachItemsInOrder: [...prevState.eachItemsInOrder, updatedItem]\r\n    //                             }));\r\n    //                         })\r\n    //                         .catch(err => {\r\n    //                             console.error(\"Error fetching shirt data:\", err);\r\n    //                         });\r\n    //                     });\r\n    //                 });\r\n    //             });\r\n    //         })\r\n    //         .catch(err => {\r\n    //             console.error(\"Error fetching user data:\", err);\r\n    //         });\r\n    //     }\r\n    // }\r\n    // componentDidMount() {\r\n    //     if (localStorage.accessLevel > ACCESS_LEVEL_GUEST) {\r\n    //         let userEmail = JSON.parse(localStorage.getItem(\"userEmail\"));\r\n    //         axios.get(`${SERVER_HOST}/sales/email?email=${userEmail}`)\r\n    //         .then(res => {\r\n    //             // Update purchaseHistory state\r\n    //             this.setState({ purchaseHistory: res.data }, () => {\r\n    //                 // Iterate over each item in purchase history\r\n    //                 this.state.purchaseHistory.forEach((itemsInArray, index) => {\r\n    //                     // Store each itemsInOrder array in a separate array\r\n    //                     let eachItemsInOrder = [];\r\n    //                     itemsInArray.items.forEach(item => {\r\n    //                         axios.get(`${SERVER_HOST}/shirts/${item.shirtID}`, { headers: { \"authorization\": localStorage.token } })\r\n    //                         .then(res => {\r\n    //                             const updatedItem = { ...res.data, quantity: item.quantity }; // Add quantity property\r\n    //                             eachItemsInOrder.push(updatedItem);\r\n    //                         })\r\n    //                         .catch(err => {\r\n    //                             console.error(\"Error fetching shirt data:\", err);\r\n    //                         });\r\n    //                     });\r\n    //                     // Push eachItemsInOrder array into allOrders array\r\n    //                     this.setState(prevState => ({\r\n    //                         allOrders: [\r\n    //                             ...prevState.allOrders,\r\n    //                             {\r\n    //                                 orderId: itemsInArray._id, // Store item._id into allOrders\r\n    //                                 eachItemsInOrder: eachItemsInOrder\r\n    //                             }\r\n    //                         ]\r\n    //                     }));\r\n    //                 });\r\n    //             });\r\n    //         })\r\n    //         .catch(err => {\r\n    //             console.error(\"Error fetching user data:\", err);\r\n    //         });\r\n    //     }\r\n    // }\r\n\r\n\r\n    componentDidMount() {\r\n        if (localStorage.accessLevel > ACCESS_LEVEL_GUEST) {\r\n            let userEmail;\r\n            // const currentUrl = window.location.pathname;\r\n            if(localStorage.accessLevel == ACCESS_LEVEL_NORMAL_USER){\r\n            userEmail = JSON.parse(localStorage.getItem(\"userEmail\"));\r\n            }else if(localStorage.accessLevel ==ACCESS_LEVEL_ADMIN){\r\n                // if (currentUrl === \"/ViewPurchaseHistory\") {\r\n                //     userEmail = JSON.parse(localStorage.getItem(\"userEmail\"));\r\n                // } else if (currentUrl.startsWith(\"/ViewPurchaseHistory/\")) {\r\n                //     userEmail = this.props.match.params.email;\r\n                // }\r\n                userEmail = this.props.match.params.email;\r\n            }\r\n\r\n            axios.get(`${SERVER_HOST}/sales/email?email=${userEmail}`)\r\n            .then(res => {\r\n                // Update purchase history state\r\n                this.setState({ purchaseHistory: res.data }, () => {\r\n                    // this.updateAllOrders(this.state.purchaseHistory);\r\n                    // Iterate over each purchase history item\r\n                    this.state.purchaseHistory.forEach((itemsInArray, index) => {\r\n                        let eachItemsInOrder = [];\r\n                        let totalPrice = 0; // Initialize total price for the order\r\n                        itemsInArray.items.forEach(item => {\r\n                            // Fetch shirt details and calculate total price for each item\r\n                            axios.get(`${SERVER_HOST}/shirts/${item.shirtID}`, { headers: { \"authorization\": localStorage.token } })\r\n                                .then(res => {\r\n                                    const updatedItem = { ...res.data, quantity: item.quantity };\r\n                                    eachItemsInOrder.push(updatedItem);\r\n                                    \r\n                                    // Check if all items are fetched\r\n                                    if (eachItemsInOrder.length === itemsInArray.items.length) {\r\n                                        // Add the price of the item to the total price\r\n                                        eachItemsInOrder.map(item=>totalPrice += item.price * item.quantity)\r\n                                    \r\n                                        // Update state after all items are fetched\r\n                                        this.setState(prevState => ({\r\n                                            allOrders: [\r\n                                                ...prevState.allOrders,\r\n                                                {\r\n                                                    orderId: itemsInArray._id,\r\n                                                    refunded:itemsInArray.refunded,\r\n                                                    eachItemsInOrder: eachItemsInOrder,\r\n                                                    totalPrice: totalPrice \r\n                                                }\r\n                                            ]\r\n                                        }), () => {\r\n                                            // Call loadShirtPhotos() after updating state\r\n                                            this.loadShirtPhotos();\r\n                                        });\r\n                                    }\r\n                                })\r\n                                .catch(err => {\r\n                                    console.error(\"Error fetching shirt data:\", err);\r\n                                });\r\n                        });\r\n                    });\r\n\r\n                });\r\n            })\r\n            .catch(err => {\r\n                console.error(\"Error fetching user data:\", err);\r\n            });\r\n    }\r\n    }\r\n    // loadShirtPhotos() {\r\n    //     this.state.allOrders.forEach(order => {\r\n    //         order.eachItemsInOrder.forEach(item => {\r\n    //             item.shirtPhotoFilename.forEach(photo => {\r\n    //                 axios.get(`${SERVER_HOST}/shirts/photo/${photo.filename}`)\r\n    //                     .then(res => {\r\n    //                         // Update shirt photo in DOM\r\n    //                         const elements = document.getElementsByClassName(photo._id);\r\n    //                         Array.from(elements).forEach(element => {\r\n    //                             element.src = `data:;base64,${res.data.image}`;\r\n    //                         });\r\n    //                     })\r\n    //                     .catch(err => {\r\n    //                         // Handle error\r\n    //                         console.error(\"Error loading shirt photo:\", err);\r\n    //                     });\r\n\r\n    //             });\r\n    //         });\r\n    //     });\r\n    // }\r\n    \r\n    handleDelete = (orderId, itemId,stockBeforeReturn,itemQuantity,refundMoney,refundedMoney,totalPrice) => {\r\n        let newItems = [];\r\n        let saleObject;\r\n    \r\n        // Map through purchase history to find the order with the given orderId\r\n        const updatedPurchaseHistory = this.state.purchaseHistory.map(order => {\r\n            if (order._id === orderId) {\r\n                // Iterate over the items in the order\r\n                order.items.forEach(item => {\r\n                    if (item.shirtID === itemId) {\r\n                        // If the item matches the itemId, subtract the returned quantity from the item's quantity\r\n                        item.quantity -= itemQuantity;\r\n                        \r\n                        // If the updated quantity is zero or less, don't add it to newItems\r\n                        if (item.quantity > 0) {\r\n                            newItems.push(item); // Add the updated item to newItems\r\n                        }\r\n                    } else {\r\n                        newItems.push(item); // Add unchanged items to newItems\r\n                    }\r\n                });\r\n    \r\n                // Create the saleObject with updated refund and price\r\n                saleObject = {\r\n                    refunded: refundedMoney + refundMoney,\r\n                    price: totalPrice - refundMoney,\r\n                    items: newItems // Set the newItems array\r\n                };\r\n            }\r\n            return order;\r\n        });\r\n    \r\n        // Update the purchase history in the state\r\n        this.setState({ purchaseHistory: updatedPurchaseHistory }, () => {\r\n            this.updateAllOrders(updatedPurchaseHistory);\r\n        });\r\n\r\n        axios.put(`${SERVER_HOST}/sales/${orderId}`, saleObject, { headers: { \"authorization\": localStorage.token } })\r\n        .then(res => {\r\n            // Handle success if needed\r\n            console.log(`Updated Sales with ID: ${orderId}`);\r\n            localStorage.removeItem(\"itemsInCart\");\r\n        })\r\n        .catch(err => {\r\n            // Handle error if needed\r\n            console.error(`Error updating Sales with ID: ${orderId}`, err);\r\n        });\r\n\r\n        let shirtObject = {\r\n            stock: stockBeforeReturn +itemQuantity,\r\n            sold:false\r\n        };\r\n        axios.put(`${SERVER_HOST}/shirts/${itemId}`, shirtObject, { headers: { \"authorization\": localStorage.token } })\r\n        .then(res => {\r\n            // Handle success if needed\r\n            console.log(`Stock updated for shirt with ID: ${itemId}`);\r\n            localStorage.removeItem(\"itemsInCart\");\r\n        })\r\n        .catch(err => {\r\n            // Handle error if needed\r\n            console.error(`Error updating stock for shirt with ID: ${itemId}`, err);\r\n        });\r\n    }\r\n\r\n\r\n    updateAllOrders = (purchaseHistory) => {\r\n        let allOrders = [];\r\n        purchaseHistory.forEach((itemsInArray, index) => {\r\n            let eachItemsInOrder = [];\r\n            let totalPrice = 0; // Initialize total price for the order\r\n            itemsInArray.items.forEach(item => {\r\n                // Fetch shirt details and calculate total price for each item\r\n                axios.get(`${SERVER_HOST}/shirts/${item.shirtID}`, { headers: { \"authorization\": localStorage.token } })\r\n                    .then(res => {\r\n                        const updatedItem = { ...res.data, quantity: item.quantity };\r\n                        eachItemsInOrder.push(updatedItem);\r\n    \r\n                        // Check if all items are fetched\r\n                        if (eachItemsInOrder.length === itemsInArray.items.length) {\r\n                            // Add the price of the item to the total price\r\n                            eachItemsInOrder.forEach(item => totalPrice += item.price * item.quantity);\r\n    \r\n                            // Push the order details to the allOrders array\r\n                            allOrders.push({\r\n                                orderId: itemsInArray._id,\r\n                                refunded: itemsInArray.refunded,\r\n                                eachItemsInOrder: eachItemsInOrder,\r\n                                totalPrice: totalPrice\r\n                            });\r\n    \r\n                            // Update state after all items are fetched\r\n                            this.setState({ allOrders: allOrders }, () => {\r\n                                // Call loadShirtPhotos() after updating state\r\n                                // this.loadShirtPhotos();\r\n                            });\r\n                        }\r\n                    })\r\n                    .catch(err => {\r\n                        console.error(\"Error fetching shirt data:\", err);\r\n                    });\r\n            });\r\n        });\r\n    }\r\n    \r\n    \r\n\r\n\r\n\r\n    render() {\r\n        console.log(this.state.purchaseHistory)\r\n        console.log(this.state.eachItemsInOrder)\r\n        console.log(this.state.allOrders)\r\n        this.updateAllOrders(this.state.purchaseHistory);\r\n        // console.log(this.state.allOrders.map(order => order.eachItemsInOrder.map(item => item.name)));\r\n        return (\r\n            <>\r\n                {localStorage.accessLevel > ACCESS_LEVEL_GUEST ? (\r\n                    <div>\r\n                        <NavigationBar />\r\n                        <h2>Ordered Items</h2>\r\n{this.state.allOrders.length === 0 ? <h4>The User didn't purchase anything yet</h4>\r\n\r\n                       : \r\n                       <div>\r\n                       {this.state.allOrders.map(order => (\r\n                            <div key={order.orderId}>\r\n                                <h3>Order ID: {order.orderId}</h3>\r\n                                <table>\r\n                                    <thead>\r\n                                        <tr>\r\n                                        <th>Photo</th>\r\n                                            <th>Name</th>\r\n                                            <th>Price</th>\r\n                                            <th>Size</th>\r\n                                            <th>Quantity</th>\r\n                                            <th>Total Price for this t-shirt</th>\r\n                                            <th>Return</th>\r\n                                        </tr>\r\n                                    </thead>\r\n                                    <tbody>\r\n\r\n                                        {order.eachItemsInOrder.map(item => (\r\n                                            <tr>\r\n\r\n                                                <td>{item.name}</td>\r\n                                                <td>{item.price}</td>\r\n                                                <td>{item.size}</td>\r\n                                                <td>{item.quantity}</td>\r\n                                                <td>{item.price*item.quantity}</td>\r\n                                                <td>\r\n                                                    <button onClick={() => this.handleDelete(order.orderId, item._id,item.stock,item.quantity,item.price*item.quantity,order.refunded,order.totalPrice)}>Return Product</button>\r\n                                                </td>\r\n                                            </tr>\r\n                                        ))}\r\n                                        <tr>\r\n                                                <td >Total Of The Order Price:</td>\r\n                                                <td>{order.totalPrice}</td>\r\n                                            </tr>\r\n                                    </tbody>\r\n                                </table>\r\n                            </div>\r\n                        ))}\r\n                        </div>\r\n\r\n                                        }\r\n                    </div>\r\n                ) : (\r\n                    <Redirect to={\"/main\"} />\r\n                )}\r\n            </>\r\n        );\r\n    }\r\n\r\n\r\n\r\n}"]},"metadata":{},"sourceType":"module"}