{"ast":null,"code":"var _jsxFileName = \"/Users/xhanhan/Desktop/CA Ecommerce/ecommerce_CA/client/src/components/ShoppingCart.js\";\n// import React, { Component } from \"react\";\n// import Form from \"react-bootstrap/Form\"\n// import { Redirect } from \"react-router-dom\"\n// import { SANDBOX_CLIENT_ID, SERVER_HOST } from \"../config/global_constants\"\n// import PayPalMessage from \"./PayPalMessage\"\n// import { PayPalButtons, PayPalScriptProvider } from \"@paypal/react-paypal-js\"\n// import NavigationBar from \"./NavigationBar\"\n// import axios from \"axios\"\n// export default class ShoppingCart extends Component {\n//     constructor(props) {\n//         super(props)\n//         this.state = {\n//             redirectToPayPalMessage: false,\n//             payPalMessageType: null,\n//             payPalOrderID: null,\n//             totalPrice: 0\n//         }\n//     }\n//     componentDidMount() {\n//         const { itemsInCart } = this.props.location.state || { itemsInCart: [] };\n//         let totalPrice = 0;\n//         itemsInCart.forEach((item) => {\n//           totalPrice += item.price * item.quantity;\n//         });\n//         this.setState({ totalPrice }); // Update totalPrice in state\n//       }\n//     //   createOrder = (data, actions) => {\n//     //     // Return an object with the correct amount based on the total price\n//     //     return actions.order.create({\n//     //       purchase_units: [\n//     //         {\n//     //           amount: {\n//     //             value: this.state.totalPrice, // Use the total price from state\n//     //             currency_code: \"EUR\",\n//     //           },\n//     //         },\n//     //       ],\n//     //     });\n//     //   };\n//     //   createOrder = (data, actions) => \n//     //   {\n//     //       return actions.order.create({purchase_units:[{amount:{value:this.props.price}}]})\n//     //   }\n//     createOrder = (data, actions) => {\n//         const { itemsInCart } = this.props.location.state || { itemsInCart: [] };\n//         let totalPrice = 0;\n//         itemsInCart.forEach((item) => {\n//           totalPrice += item.price * item.quantity;\n//         });\n//         return actions.order.create({\n//           purchase_units: [\n//             {\n//               amount: {\n//                 value: totalPrice.toFixed(2), // Ensure total price is formatted properly\n//                 currency_code: \"EUR\",\n//               },\n//             },\n//           ],\n//         });\n//       };\n//       onApprove = paymentData =>\n//       {      \n//           axios.post(`${SERVER_HOST}/sales/${paymentData.orderID}/${this.props.shirtID}/${this.props.price}`, {headers:{\"authorization\":localStorage.token, \"Content-type\": \"multipart/form-data\"}})\n//           .then(res => \n//           {                   \n//               this.setState({payPalMessageType:PayPalMessage.messageType.SUCCESS, \n//                              payPalOrderID:paymentData.orderID, \n//                              redirectToPayPalMessage:true}) \n//           })\n//           .catch(errorData =>\n//           {           \n//               this.setState({payPalMessageType:PayPalMessage.messageType.ERROR, \n//                              redirectToPayPalMessage:true}) \n//           })\n//       }\n//       onError = errorData => \n//       {\n//           this.setState({payPalMessageType:PayPalMessage.messageType.ERROR, \n//                          redirectToPayPalMessage:true})         \n//       }\n//       onCancel = cancelData => \n//       {\n//           // The user pressed the Paypal checkout popup window cancel button or closed the Paypal checkout popup window\n//           this.setState({payPalMessageType:PayPalMessage.messageType.CANCEL, \n//                          redirectToPayPalMessage:true})       \n//       }\n//     render() {\n//         const { itemsInCart } = this.props.location.state || { itemsInCart: [] };\n//         // let totalPrice = 0;\n//         // itemsInCart.forEach(item => {\n//         //     totalPrice += item.price * item.quantity;\n//         // });\n//         return (\n//             <div>\n//                 <NavigationBar />\n//                 <h2>Shopping Cart</h2>\n//                 <ul>\n//                     {itemsInCart.map((item, index) => (\n//                         <li key={index}>\n//                             {item.name} - Quantity: {item.quantity} - Price: €{item.price * item.quantity}\n//                         </li>\n//                     ))}\n//                 </ul>\n//                 <p>Total Price: €{this.state.totalPrice}</p>\n//                 <div>\n//                     {this.state.redirectToPayPalMessage ? <Redirect to={`/PayPalMessage/${this.state.payPalMessageType}/${this.state.payPalOrderID}`} /> : null}\n//                     <PayPalScriptProvider options={{ currency: \"EUR\", \"client-id\": SANDBOX_CLIENT_ID }}>\n//                         <PayPalButtons style={{ layout: \"horizontal\" }} createOrder={this.createOrder} onApprove={this.onApprove} onError={this.onError} onCancel={this.onCancel} />\n//                     </PayPalScriptProvider>\n//                 </div>\n//             </div>\n//         );\n//     }\n// }\nimport React, { Component } from \"react\";\nimport axios from \"axios\";\nimport { Redirect } from \"react-router-dom\";\nimport { SANDBOX_CLIENT_ID, SERVER_HOST } from \"../config/global_constants\";\nimport PayPalMessage from \"./PayPalMessage\";\nimport { PayPalButtons, PayPalScriptProvider } from \"@paypal/react-paypal-js\";\nimport NavigationBar from \"./NavigationBar\";\nexport default class ShoppingCart extends Component {\n  constructor(props) {\n    super(props);\n\n    this.createOrder = (data, actions) => {\n      return actions.order.create({\n        purchase_units: [{\n          amount: {\n            value: this.state.totalPrice.toFixed(2),\n            // Ensure total price is formatted properly\n            currency_code: \"EUR\"\n          }\n        }]\n      });\n    };\n\n    this.onApprove = paymentData => {\n      const itemsInCart = this.state.itemsInCart;\n      console.log(\"Items in cart:\", itemsInCart);\n      console.log(\"Payment data:\", paymentData);\n      console.log(\"Data sent to server:\", {\n        orderID: paymentData.orderID,\n        items: itemsInCart.map(item => ({\n          shirtID: item.id,\n          price: item.price\n        }))\n      });\n      axios.post(\"\".concat(SERVER_HOST, \"/shirtsales\"), {\n        orderID: paymentData.orderID,\n        items: itemsInCart.map(item => ({\n          shirtID: item.id,\n          price: item.price\n        }))\n      }, {\n        headers: {\n          authorization: localStorage.token\n        }\n      }).then(res => {\n        this.setState({\n          payPalMessageType: PayPalMessage.messageType.SUCCESS,\n          payPalOrderID: paymentData.orderID,\n          redirectToPayPalMessage: true\n        });\n      }).catch(errorData => {\n        this.setState({\n          payPalMessageType: PayPalMessage.messageType.ERROR,\n          redirectToPayPalMessage: true\n        });\n      });\n    };\n\n    this.onError = errorData => {\n      this.setState({\n        payPalMessageType: PayPalMessage.messageType.ERROR,\n        redirectToPayPalMessage: true\n      });\n    };\n\n    this.onCancel = cancelData => {\n      this.setState({\n        payPalMessageType: PayPalMessage.messageType.CANCEL,\n        redirectToPayPalMessage: true\n      });\n    };\n\n    this.state = {\n      redirectToPayPalMessage: false,\n      payPalMessageType: null,\n      payPalOrderID: null,\n      totalPrice: 0,\n      itemsInCart: []\n    };\n  }\n\n  componentDidMount() {\n    const _ref = this.props.location.state || {\n      itemsInCart: []\n    },\n          itemsInCart = _ref.itemsInCart;\n\n    let totalPrice = 0;\n    itemsInCart.forEach(item => {\n      totalPrice += item.price * item.quantity;\n    });\n    this.setState({\n      itemsInCart,\n      totalPrice\n    }); // Update itemsInCart and totalPrice in state\n  }\n\n  render() {\n    const itemsInCart = this.state.itemsInCart;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 240\n      },\n      __self: this\n    }, React.createElement(NavigationBar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 241\n      },\n      __self: this\n    }), React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 242\n      },\n      __self: this\n    }, \"Shopping Cart\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 243\n      },\n      __self: this\n    }, itemsInCart.map((item, index) => React.createElement(\"li\", {\n      key: index,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 245\n      },\n      __self: this\n    }, item.name, \" - Quantity: \", item.quantity, \" - Price: \\u20AC\", item.price * item.quantity, \"- ID:\", item.id))), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 250\n      },\n      __self: this\n    }, \"Total Price: \\u20AC\", this.state.totalPrice), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 251\n      },\n      __self: this\n    }, this.state.redirectToPayPalMessage ? React.createElement(Redirect, {\n      to: \"/PayPalMessage/\".concat(this.state.payPalMessageType, \"/\").concat(this.state.payPalOrderID),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 253\n      },\n      __self: this\n    }) : null, React.createElement(PayPalScriptProvider, {\n      options: {\n        currency: \"EUR\",\n        \"client-id\": SANDBOX_CLIENT_ID\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 258\n      },\n      __self: this\n    }, React.createElement(PayPalButtons, {\n      style: {\n        layout: \"horizontal\"\n      },\n      createOrder: this.createOrder,\n      onApprove: this.onApprove,\n      onError: this.onError,\n      onCancel: this.onCancel,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 261\n      },\n      __self: this\n    }))));\n  }\n\n}","map":{"version":3,"sources":["/Users/xhanhan/Desktop/CA Ecommerce/ecommerce_CA/client/src/components/ShoppingCart.js"],"names":["React","Component","axios","Redirect","SANDBOX_CLIENT_ID","SERVER_HOST","PayPalMessage","PayPalButtons","PayPalScriptProvider","NavigationBar","ShoppingCart","constructor","props","createOrder","data","actions","order","create","purchase_units","amount","value","state","totalPrice","toFixed","currency_code","onApprove","paymentData","itemsInCart","console","log","orderID","items","map","item","shirtID","id","price","post","headers","authorization","localStorage","token","then","res","setState","payPalMessageType","messageType","SUCCESS","payPalOrderID","redirectToPayPalMessage","catch","errorData","ERROR","onError","onCancel","cancelData","CANCEL","componentDidMount","location","forEach","quantity","render","index","name","currency","layout"],"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","sourcesContent":["// import React, { Component } from \"react\";\n// import Form from \"react-bootstrap/Form\"\n\n// import { Redirect } from \"react-router-dom\"\n// import { SANDBOX_CLIENT_ID, SERVER_HOST } from \"../config/global_constants\"\n// import PayPalMessage from \"./PayPalMessage\"\n// import { PayPalButtons, PayPalScriptProvider } from \"@paypal/react-paypal-js\"\n\n// import NavigationBar from \"./NavigationBar\"\n\n\n// import axios from \"axios\"\n\n// export default class ShoppingCart extends Component {\n//     constructor(props) {\n//         super(props)\n\n//         this.state = {\n//             redirectToPayPalMessage: false,\n//             payPalMessageType: null,\n//             payPalOrderID: null,\n//             totalPrice: 0\n//         }\n//     }\n\n//     componentDidMount() {\n//         const { itemsInCart } = this.props.location.state || { itemsInCart: [] };\n//         let totalPrice = 0;\n//         itemsInCart.forEach((item) => {\n//           totalPrice += item.price * item.quantity;\n//         });\n//         this.setState({ totalPrice }); // Update totalPrice in state\n//       }\n\n//     //   createOrder = (data, actions) => {\n//     //     // Return an object with the correct amount based on the total price\n//     //     return actions.order.create({\n//     //       purchase_units: [\n//     //         {\n//     //           amount: {\n//     //             value: this.state.totalPrice, // Use the total price from state\n//     //             currency_code: \"EUR\",\n//     //           },\n//     //         },\n//     //       ],\n//     //     });\n//     //   };\n\n//     //   createOrder = (data, actions) => \n//     //   {\n//     //       return actions.order.create({purchase_units:[{amount:{value:this.props.price}}]})\n//     //   }\n\n//     createOrder = (data, actions) => {\n//         const { itemsInCart } = this.props.location.state || { itemsInCart: [] };\n//         let totalPrice = 0;\n//         itemsInCart.forEach((item) => {\n//           totalPrice += item.price * item.quantity;\n//         });\n//         return actions.order.create({\n//           purchase_units: [\n//             {\n//               amount: {\n//                 value: totalPrice.toFixed(2), // Ensure total price is formatted properly\n//                 currency_code: \"EUR\",\n//               },\n//             },\n//           ],\n//         });\n//       };\n      \n      \n//       onApprove = paymentData =>\n//       {      \n//           axios.post(`${SERVER_HOST}/sales/${paymentData.orderID}/${this.props.shirtID}/${this.props.price}`, {headers:{\"authorization\":localStorage.token, \"Content-type\": \"multipart/form-data\"}})\n//           .then(res => \n//           {                   \n//               this.setState({payPalMessageType:PayPalMessage.messageType.SUCCESS, \n//                              payPalOrderID:paymentData.orderID, \n//                              redirectToPayPalMessage:true}) \n//           })\n//           .catch(errorData =>\n//           {           \n//               this.setState({payPalMessageType:PayPalMessage.messageType.ERROR, \n//                              redirectToPayPalMessage:true}) \n//           })\n//       }\n   \n          \n//       onError = errorData => \n//       {\n//           this.setState({payPalMessageType:PayPalMessage.messageType.ERROR, \n//                          redirectToPayPalMessage:true})         \n//       }\n      \n      \n//       onCancel = cancelData => \n//       {\n//           // The user pressed the Paypal checkout popup window cancel button or closed the Paypal checkout popup window\n//           this.setState({payPalMessageType:PayPalMessage.messageType.CANCEL, \n//                          redirectToPayPalMessage:true})       \n//       }\n\n\n//     render() {\n//         const { itemsInCart } = this.props.location.state || { itemsInCart: [] };\n\n//         // let totalPrice = 0;\n//         // itemsInCart.forEach(item => {\n//         //     totalPrice += item.price * item.quantity;\n//         // });\n\n\n\n//         return (\n//             <div>\n//                 <NavigationBar />\n//                 <h2>Shopping Cart</h2>\n//                 <ul>\n//                     {itemsInCart.map((item, index) => (\n//                         <li key={index}>\n//                             {item.name} - Quantity: {item.quantity} - Price: €{item.price * item.quantity}\n//                         </li>\n//                     ))}\n//                 </ul>\n//                 <p>Total Price: €{this.state.totalPrice}</p>\n//                 <div>\n//                     {this.state.redirectToPayPalMessage ? <Redirect to={`/PayPalMessage/${this.state.payPalMessageType}/${this.state.payPalOrderID}`} /> : null}\n\n//                     <PayPalScriptProvider options={{ currency: \"EUR\", \"client-id\": SANDBOX_CLIENT_ID }}>\n//                         <PayPalButtons style={{ layout: \"horizontal\" }} createOrder={this.createOrder} onApprove={this.onApprove} onError={this.onError} onCancel={this.onCancel} />\n//                     </PayPalScriptProvider>\n//                 </div>\n//             </div>\n            \n//         );\n//     }\n// }\n\n\nimport React, { Component } from \"react\";\nimport axios from \"axios\";\nimport { Redirect } from \"react-router-dom\";\nimport { SANDBOX_CLIENT_ID, SERVER_HOST } from \"../config/global_constants\";\nimport PayPalMessage from \"./PayPalMessage\";\nimport { PayPalButtons, PayPalScriptProvider } from \"@paypal/react-paypal-js\";\nimport NavigationBar from \"./NavigationBar\";\n\nexport default class ShoppingCart extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            redirectToPayPalMessage: false,\n            payPalMessageType: null,\n            payPalOrderID: null,\n            totalPrice: 0,\n            itemsInCart: [],\n        };\n    }\n\n    componentDidMount() {\n        const { itemsInCart } = this.props.location.state || { itemsInCart: [] };\n        let totalPrice = 0;\n        itemsInCart.forEach((item) => {\n            totalPrice += item.price * item.quantity;\n        });\n        this.setState({ itemsInCart, totalPrice }); // Update itemsInCart and totalPrice in state\n    }\n\n    createOrder = (data, actions) => {\n        return actions.order.create({\n            purchase_units: [\n                {\n                    amount: {\n                        value: this.state.totalPrice.toFixed(2), // Ensure total price is formatted properly\n                        currency_code: \"EUR\",\n                    },\n                },\n            ],\n        });\n    };\n\n    onApprove = (paymentData) => {\n        const { itemsInCart } = this.state;\n        console.log(\"Items in cart:\", itemsInCart);\n        console.log(\"Payment data:\", paymentData);\n        console.log(\"Data sent to server:\", {\n          orderID: paymentData.orderID,\n          items: itemsInCart.map((item) => ({\n              shirtID: item.id,\n              price: item.price,\n          })),\n      });\n        axios\n            .post(\n                `${SERVER_HOST}/shirtsales`,\n                {\n                    orderID: paymentData.orderID,\n                    items: itemsInCart.map((item) => ({\n                        shirtID: item.id,\n                        price: item.price,\n                    })),\n                },\n                { headers: { authorization: localStorage.token } }\n            )\n            .then((res) => {\n                this.setState({\n                    payPalMessageType: PayPalMessage.messageType.SUCCESS,\n                    payPalOrderID: paymentData.orderID,\n                    redirectToPayPalMessage: true,\n                });\n            })\n            .catch((errorData) => {\n                this.setState({\n                    payPalMessageType: PayPalMessage.messageType.ERROR,\n                    redirectToPayPalMessage: true,\n                });\n            });\n    };\n\n    onError = (errorData) => {\n        this.setState({\n            payPalMessageType: PayPalMessage.messageType.ERROR,\n            redirectToPayPalMessage: true,\n        });\n    };\n\n    onCancel = (cancelData) => {\n        this.setState({\n            payPalMessageType: PayPalMessage.messageType.CANCEL,\n            redirectToPayPalMessage: true,\n        });\n    };\n\n    render() {\n        const { itemsInCart } = this.state;\n\n        return (\n            <div>\n                <NavigationBar />\n                <h2>Shopping Cart</h2>\n                <ul>\n                    {itemsInCart.map((item, index) => (\n                        <li key={index}>\n                            {item.name} - Quantity: {item.quantity} - Price: €{item.price * item.quantity}- ID:{item.id}\n                        </li>\n                    ))}\n                </ul>\n                <p>Total Price: €{this.state.totalPrice}</p>\n                <div>\n                    {this.state.redirectToPayPalMessage ? (\n                        <Redirect\n                            to={`/PayPalMessage/${this.state.payPalMessageType}/${this.state.payPalOrderID}`}\n                        />\n                    ) : null}\n\n                    <PayPalScriptProvider\n                        options={{ currency: \"EUR\", \"client-id\": SANDBOX_CLIENT_ID }}\n                    >\n                        <PayPalButtons\n                            style={{ layout: \"horizontal\" }}\n                            createOrder={this.createOrder}\n                            onApprove={this.onApprove}\n                            onError={this.onError}\n                            onCancel={this.onCancel}\n                        />\n                    </PayPalScriptProvider>\n                </div>\n            </div>\n        );\n    }\n}\n\n\n"]},"metadata":{},"sourceType":"module"}